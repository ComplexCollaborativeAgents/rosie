world-usage << internal external >>
agent-params
    domain << tabletop magicbot >>

io
    input-link
        time
            steps [int] # number of decision cycles
            seconds [int] # seconds elapsed since start of rosie
        language

        pointed-object <handle> # Handle of an object the instructor is pointing at (-1 = none)
        objects # set of objects from perception
            object
                object-handle <h>
                tag-id <id> # magicbot
                property # set of properties describing the object
                    property-handle <ph>
                    type << visual linguistic state >>
                    values
                        <v1> <conf1>
                        ...
        self
            moving-status << stopped moving >>
            pose
                x y z roll pitch yaw
            arm
                moving-status << stopped moving >>
                holding-object << none <h> >>
            current-waypoint
                waypoint-handle <wp-handle>

world
    robot
        moving-state << stopped moving >>
        current-location <obj> # Link to world.objects.object <obj>
        arm
            state << internal external >>
            grabbed <obj>
        predicates
            name rosie
    objects
        object
            handle
            svs-obj <svs-obj> # link to svs.spatial-scene.child <svs-obj>
            linked-to <obj>  # If the object is internally linked to another 
            predicates
                arm-status << grabbed not-grabbed >>
                modifier1 << current1 >>
    predicates
        predicate
            handle <pred-handle>
            instance
                1 <obj1> 2 <obj2> ...
    
maps
    map
        handle <map-handle>
        super-waypoint <wp> # If this map represents a single waypoint in a higher map
        waypoint
            handle <wp-handle>  # The waypoint's handle
            handle-int [int]    # The integer for the waypoint (e.g. waypoint 3)
            x [float] # x,y coord for the waypoint
            y [float]
            map <parent>  # The map this waypoint belongs to
            sub-map <map> # A map defining this waypoint (if hierarchically organized)
            edge # An edge from one waypoint to another
                start <start-wp>
                end <end-wp>
                wall-side << 1 -1 >> # Wall is on the left (1) or right (-1)
                doorway << true false >> # Whether there is a door
                door_sx [float] # x,y coord for closer side of the door (start)
                door_sy [float]
                door_ex [float] # x,y coord for far side of door (end)
                door_ey [float]
                
