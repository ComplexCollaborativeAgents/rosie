#########################################
#     Input Link Representation         #
#########################################

# Final

objects
	object
		object-handle <h>
		tag-id <id> # magicbot
		property
			property-handle <ph>
			type << visual linguistic state >>
			values
				<v1> <conf1>
				...
self
	moving-status << stopped moving >>
	pose
		x y z roll pitch yaw
	arm
		moving-status << stopped moving >>
		holding-object << none <h> >>
language
time
pointed-object <h>





Attend Rules:
	Don't attend to a stale object with an internal-link to a different object
	Don't attend to visual changes (pos/size/predicates) for an object with an internal-link
	Don't attend to an object with predicates.arm-status << moving grabbed >> (other than changed-object-status)

object-info
	# only for new objects
	status << uncertain >>
	stability-check-time <t>
	number-checks <n>

	object-handle <h> # handle for the object
	input-link-obj <obj> # from input-link.objects.object that matches handle
	belief-id  # created by soar |bel-h|
	belief-obj # from svs.spatial-scene.child with object-source belief
	perception-id # from svs
	perception-obj # from svs.spatial-scene-child with object-source perception
				   # or copied from other object-info.perception-obj with internal-link <obj-handle>
				   #
	internal-link <obj-handle> # Whether the object is linked to another one (2 objects for 1 perception obj)
		# auto removed if visible again, and reset occlusion info
		# auto removed if the linked-to object becomes stale
		# make sure you periodically check for occlusion (if not occluded, remove internal-link)

	properties
		property-info # for each property under input-link-obj
			# state properties: anything directly under input-link-obj (e.g. door=closed)
			# linguistic properties: property-handle name
			# visual properties: anything under input-link-obj.property
			property-handle <prop>
			type << state linguistic visual >>
			predicate-handle <pred> # for visual, must be highest confidence and no others more than 80%
			input-link-prop # link to input-link-obj.property
			hypothesis
				predicate-handle <pred>
				confidence <#> # greater than .1
				best true # if highest confidence
				lower-threshold # 80% of confidence for best

	differences
		is-stale << true false >> # is there a perception-obj?

		stability-check-time <t>  # time to check if stable (only for new-object-info)
		stability-timer-satisfied true # if input-link.time.seconds >= stability-check-time

		is-occluded << true false >>   # Whether the object is occluded (deliberately managed)
		recheck-occlusion-time <t> # time to check if the object is still occluded
		occlusion-time-expired true # if input-link.time.seconds >= recheck-occlusion-time

		compare-position  # link to the svs filter extracting distance between belief + perception objs in svs
		pos-diff <meters> # Difference in meters between centroids copied from compare-position filter
		has-moved true    # If pos-diff > agent-params.pos-diff-threshold

		belief-vol        # volume svs filter for the belief object
		perception-vol    # volume svs filter for the perception object
		vol-diff <ratio>  # perception-vol / belief-vol
		has-grown true    # true if vol-diff > agent-params.vol-high-diff-threshold
		has-shrunk true   # true if vol-diff < agent-params.vol-low-diff-threshold
		recheck-growth-at <t> # Time to recheck grown objects 
		growth-wait true  # true if recheck-growth-at > input-link.time.seconds



# Preference Orders:

# update-object = 200
# delete-object = 200
# arm-status-change = 150
# new-location = 150
# different-moving-state = 150
# stale-object = 100
# shrunken-object = 90
# new-object = 60
# new-object = 50
# grown-object = 40
# moved-object = 30
# new-predicate = 20
# changed-predicate = 20
# status-change = 20
# recheck-occlusion = 10



# update-belief-object
	object-info <obj-info>
	change
		type update-object
		category object

	Called with object-info.mark-for-copying true flag on a visible object
	Will update the pose of the belief object given the perception one
		using svs copy-command

# delete-object
	object-info <obj-info>
	change
		type delete-object
		category object

	Called with object-info.mark-for-deletion true flag on an object
	Will delete the object from working memory/svs/perception-monitor

# attend-to-new-object
	object-info <obj-info>
	change
		type new-object
		category object

		Called with new-object-info with a perception-obj and no status

	Will create ^status uncertain, and adds stability-check-time

# evaluate-stability
	object-info <obj-info>
	change
		type stability-timer-satisfied
		category object

		Called with new-object-info.stability-timer-satisfied true flag

	Will check to see if the object is stable (hasn't moved)
		pos-diff < agent-params.pos-diff-threshold
		vol-diff > agent-params.vol-low-diff-threshold
		vol-diff < agent-params.vol-high-diff-threshold
		or num-checks >= agent-params.max-stablity-checks
	If stable: change status to unidentified
	If unstable: updates stability-check-time and number-checks

# evaluate-new-object
	object-info <obj-info>
	change
		type new-stable-object
		category object

		Called with new-object-info.status unidentified
	
	1: match-known-object
		Finds a stale object that either intersects, or is close to the new perception
		Does an external link
	2: match-missing-object
		Matches against a missing object with similar volume and no property conflicts
		Does an external link
	3: create-new-object
		Creates the new object representation

# check-for-occlusion
	object-info <obj-info>
	change
		type moved-object
		category object

		Called with object-info.differences.{ ^has-moved true, ^is-occluded false }
		Case: object-occluded false, sets mark-for-copying true
		Case: object-occluded true, sets is-occluded true
	change 
		type recheck-occlusion
		category object

		Called with object-info.differences.occlusion-time-expired true
		Case: object-occluded false, sets is-occluded false
		Case: object-occluded true, resets recheck-occlusion-time

# evaluate-shrunken-object
	object-info <obj-info>
	change
		type shrunken-object
		category object

		Called with object-info.differences.{ ^has-shrunk true, ^is-occluded false }

	First checks all perception objects that intersects belief object
	Will find all new perception objects contained by the belief object (contained-threshold)
		Will do an external link of all new fragments to the object (merge them)
	If no contained objects, checks for occlusion
		Occluded: sets is-occluded true
		Not-occluded: sets mark-for-copying true

# evaluate-grown-object
	object-info <obj-info>
	change
		type grown-object
		category object

		Called with object-info.differences.{ ^has-grown true, -^growth-wait true }
	
	First checks all belief objects that intersect the perception object
		For stale objects that intersect, will check overlap
		If overlap > contained-threshold, do an internal link 
	Otherwise, will set mark-for-copying true and set recheck-growth-at timer

# attend-to-stale-object
	object-info <obj-info>
	change
		type stale-object
		category object

		Called with object-info.differences.{ is-stale true, is-occluded false }

	First finds all perception objects that intersect the belief object
		For each intersecting object without a belief object, do an external link (contained-threshold)
		For each intersecting object with a belief object, do an internal link (contained-by-threshold)
	Otherwise, will propose check-for-occlusion
		If occluded, sets is-occluded true
		If not occluded, sets mark-for-deletion true

# attend-to-changed-object-predicate
	object-info <obj-info>
	property-handle <prop-handle>
	predicate-handle <pred-handle>
	change
		type changed-object-predicate
		category object

	1. Visual properties
		object-info.properties.property-info.
			{ ^property-handle <prop>, ^type visual, ^predicate-handle <pred> }
		does not match wm-obj.predicates.<prop> <pred>
		and differences.is-occluded false

	2. Non-visual properties
		object-info.properties.property-info.
			{ ^property-handle <prop>, -^type visual, ^predicate-handle <pred> }
		does not match wm-obj.predicates.<prop> <pred>

	3. visible false
		object-info.differences.is-stale true
		wm-obj.predicates.visible true
	
	4. visible true
		object-info.differences.is-stale false 
		wm-obj.predicates.visible false


####################################################
# Combined List of attention operators


#########
# ROBOT #
#########

# attend-to-changed-arm-status
	self-info <self> # io.input-link.self
	change
		type changed-arm-status
		category robot

	Maintains the world.robot.arm.moving-state << moving stopped >> wme
	input-link.self.arm.moving-state << moving stopped >>
	Remove all internal-links for moved object when the arm is done moving
		And all internal-links to the moved object

# attend-to-changed-moving-state
	self-info <self> # io.input-link.self
	change
		type changed-moving-state
		category robot

	Updates world.robot.moving-state from input-link.self.moving-state

# attend-to-changed-waypoint
	new-waypoint-handle <wp-handle>
	change
		type changed-waypoint
		category robot

	Updates world.robot.current-waypoint using io.input-link.self.current-waypoint.waypoint-handle

