package edu.umich.rosie.tools.config;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class SmemConfigurator {
	public static HashMap<String, String> ltiMap = new HashMap<String, String>();
	
	public static ArrayList<String> configureSmem(File inputFile, File outputDir, File agentDir, String agentName){
		File smemDir = new File(outputDir, "/smem");
		if(!smemDir.exists()){
			smemDir.mkdir();
		}
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(
					new File(agentDir, "/init-smem/templates/color.txt")));

			ArrayList<String> template = new ArrayList<String>();
			String line;
			while((line = reader.readLine()) != null){
				template.add(line);
			}
			
			for(String l : fillTemplate(template, "red", "red1")){
				System.out.println(l);
			}

			
			
		} catch (Exception e){

			
		}

		
		
		try{
			Writer actionsFile = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(new File(smemDir, "/actions.soar"))));
			HashMap<String, ArrayList<String> > actions = parseFile(new File(agentDir, "/init-smem/new-actions.soar"));
			for(String handle : actions.keySet()){
				actionsFile.write("smem --add {\n");
				for(String line : actions.get(handle)){
					actionsFile.write("  " + line + "\n");
				}
				actionsFile.write("}\n\n");
			}
			actionsFile.close();
		} catch (Exception e){
			
		}
		
		ArrayList<String> filesWritten = new ArrayList<String>();
//		try{
//			String actionsFilename = outputDir + "/smem_actions_" + agentName + ".soar";
//			Writer actionsFile = new BufferedWriter(new OutputStreamWriter(
//					new FileOutputStream(actionsFilename), "utf-8"));
//			actionsFile.write("# Placeholder for autogenerated actions smem file");
//			actionsFile.close();
//			filesWritten.add(actionsFilename);
//
//			String relationsFilename = outputDir + "/smem_relations_" + agentName + ".soar";
//			Writer relationsFile = new BufferedWriter(new OutputStreamWriter(
//					new FileOutputStream(relationsFilename), "utf-8"));
//			relationsFile.write("# Placeholder for autogenerated relations smem file");
//			relationsFile.close();
//			filesWritten.add(relationsFilename);
//
//			String propertiesFilename = outputDir + "/smem_properties_" + agentName + ".soar";
//			Writer propertiesFile = new BufferedWriter(new OutputStreamWriter(
//					new FileOutputStream(propertiesFilename), "utf-8"));
//			propertiesFile.write("# Placeholder for autogenerated properties smem file");
//			propertiesFile.close();
//			filesWritten.add(propertiesFilename);
//			
//		} catch (Exception e){
//			e.printStackTrace();
//		}	
		return filesWritten;
	}
	
	private static HashMap<String, ArrayList<String> > parseFile(File file){

		HashMap<String, ArrayList<String> > concepts = new HashMap<String, ArrayList<String> >();
		System.out.println(file.getAbsolutePath());

		
		try{
			BufferedReader reader = new BufferedReader(new FileReader(file));
			String line;
			ArrayList<String> currentLines = new ArrayList<String>();
			String handle = null;
			while ((line = reader.readLine()) != null){
				// Ignore lines starting with #!
				if (line.contains("#!")){
					continue;
				}
				
				// New concept definition
				if (line.contains("+")){
					// Wrap up old definition
					if(handle != null){
						if(concepts.containsKey(handle)){
							System.err.println("ERROR: Concept map already contains the key " + handle);
						} else {
							boolean content = false;
							for(String l : currentLines){
								if(!l.trim().startsWith("#")){
									content = true;
									break;
								}
							}
							if(content){
								concepts.put(handle, currentLines);
							}
						}
					}
					
					// Start a new concept definition block
					int plusIndex = line.indexOf("+") + 1;
					int endIndex = line.indexOf(" ", plusIndex);
					if(endIndex == -1){
						endIndex = line.length();
					}
					handle = line.substring(plusIndex, endIndex);
					currentLines = new ArrayList<String>();
					currentLines.add(line);
				} else if(line.trim().length() > 0){
					// Add the line to the current block
					currentLines.add(replaceLTIs(line));
				}
			}
			
			reader.close();
		} catch (Exception e){
			System.err.println("PARSING ERROR in file " + file.getAbsolutePath());
			System.err.println(e.toString());
		}

		return concepts;
	}
	
	public static String replaceLTIs(String line){
		int i = line.indexOf("@");
		while(i != -1){
			int end = line.indexOf(" ", i);
			if (end == -1){
				end = line.indexOf(")", i);
			}
			if (end == -1){
				end = line.length();
			}

			char firstChar = line.charAt(i+1);
			// Note: If the first character is a digit, we don't replace it
			if (end != -1 && !Character.isDigit(firstChar)){
				String ltiName = line.substring(i, end);
				String lti;
				if (ltiMap.containsKey(ltiName)){
					lti = ltiMap.get(ltiName);
				} else {
					lti = "@" + new Integer(100000 + ltiMap.size()).toString();
					ltiMap.put(ltiName, lti);
				}
				line = line.substring(0, i) + lti + line.substring(end);
			}
			i = line.indexOf("@", i+1);
		}
		return line;
	}
	
	public static ArrayList<String> fillTemplate(ArrayList<String> template, String word, String handle){
		ArrayList<String> lines = new ArrayList<String>();
		for(String line : template){
			line = line.replaceAll("_WORD_", word);
			line = line.replaceAll("_HANDLE_", handle);
			line = replaceLTIs(line);
			lines.add(line);
		}
		return lines;
	}

    public static void main(String[] args) {
    	if (args.length < 2){
    		System.err.println("SmemConfigurator requires 2 argument:\n" + 
    							"  1: The input filename with the smem configuration information\n" + 
    							"  2: The name to use when creating files (e.g. smem_actions_<name>.soar\n" + 
    							"  3 [OPT]: The root rosie agent directory (Defaults to $ROSIE_HOME)\n");
    		System.exit(1);
    	}
    	
    	File inputFile = new File(args[0]);
    	String agentName = args[1];
    	
    	File rosieDir = null;
    	if (args.length >= 3){
    		rosieDir = new File(args[2]);
    	} else {
    		String rosieHome = System.getenv("ROSIE_HOME");
    		if (rosieHome == null){
    			System.err.println("$ROSIE_HOME environment variable is not set");
    			System.exit(1);
    		}
    		rosieDir = new File(rosieHome);
    	}
    	
    	File outputDir = new File(System.getProperty("user.dir"));
    	
    	SmemConfigurator.configureSmem(inputFile, outputDir, rosieDir, agentName);
    }

}
