sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6344-3
    :chunk
    (state <s1> ^retrieve-game othello1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default34 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6344-2
    :chunk
    (state <s1> ^retrieve-game othello1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default45 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6344-1
    :chunk
    (state <s1> ^retrieve-game othello1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default50 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t6230-1
    :chunk
    (state <s1> ^retrieve-handle failure-default50 ^gtype failure)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l18> + ^aname failure-default50 +
           ^handle failure-default50 +)
    (<p3> ^argnum 5 +)
    (<l18> ^conditions <l1> + ^conditions <l19> + ^conditions <l20> +
           ^conditions <l21> + ^aname failure-default50 +)
    (<l1> ^rtype set + ^negative false + ^parameter <l2> + ^args <l4> +
           ^result <l16> + ^attribute predicate + ^name covered +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type set +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype set + ^negative false + ^parameter <l6> + ^args <l8> +
           ^result <l14> + ^attribute category + ^name location +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^param-id 1 + ^type set +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^rtype single + ^negative false + ^parameter <l10> + ^args <l11> +
           ^result <l12> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l10> ^num 0 +)
    (<l12> ^set <l13> +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
    (<l20> ^return-type number + ^function soar-count + ^rtype single +
           ^negative false + ^parameter <l26> + ^args <l29> + ^result <l45> +
           ^name count + ^type function +)
    (<l26> ^num 2 + ^2 <l27> + ^1 <l28> +)
    (<l27> ^param-id 3 + ^type set +)
    (<l28> ^param-id 5 + ^type single +)
    (<l29> ^num 1 + ^2 <l30> +)
    (<l30> ^rtype set + ^negative false + ^parameter <l31> + ^args <l32> +
           ^result <l43> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l31> ^num 0 +)
    (<l32> ^num 1 + ^1 <l33> +)
    (<l33> ^rtype single + ^negative false + ^parameter <l34> + ^args <l35> +
           ^result <l41> + ^attribute category + ^name location +
           ^type attribute +)
    (<l34> ^num 0 +)
    (<l35> ^num 1 + ^1 <l36> +)
    (<l36> ^rtype single + ^negative false + ^parameter <l37> + ^args <l38> +
           ^result <l39> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l37> ^num 0 +)
    (<l39> ^set <l40> +)
    (<l41> ^set <l42> +)
    (<l43> ^set <l44> +)
    (<l45> ^set <l46> +)
    (<l19> ^return-type number + ^function soar-count + ^rtype single +
           ^negative false + ^parameter <l47> + ^args <l50> + ^result <l66> +
           ^name count + ^type function +)
    (<l47> ^num 2 + ^2 <l48> + ^1 <l49> +)
    (<l48> ^param-id 2 + ^type set +)
    (<l49> ^param-id 4 + ^type single +)
    (<l50> ^num 1 + ^2 <l51> +)
    (<l51> ^rtype set + ^negative false + ^parameter <l52> + ^args <l53> +
           ^result <l64> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l52> ^num 0 +)
    (<l53> ^num 1 + ^1 <l54> +)
    (<l54> ^rtype single + ^negative false + ^parameter <l55> + ^args <l56> +
           ^result <l62> + ^attribute category + ^name location +
           ^type attribute +)
    (<l55> ^num 0 +)
    (<l56> ^num 1 + ^1 <l57> +)
    (<l57> ^rtype single + ^negative false + ^parameter <l58> + ^args <l59> +
           ^result <l60> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l58> ^num 0 +)
    (<l60> ^set <l61> +)
    (<l62> ^set <l63> +)
    (<l64> ^set <l65> +)
    (<l66> ^set <l67> +)
    (<l21> ^return-type number + ^function soar-greater + ^rtype single +
           ^negative false + ^parameter <l22> + ^args <l25> + ^result <l68> +
           ^name greater + ^type function +)
    (<l22> ^num 2 + ^2 <l23> + ^1 <l24> +)
    (<l23> ^param-id 5 + ^type single +)
    (<l24> ^param-id 4 + ^type single +)
    (<l25> ^num 2 + ^2 <l20> + ^1 <l19> +)
    (<l68> ^set <l69> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t5422-1
    :chunk
    (state <s1> ^retrieve-handle goal-default45 ^gtype goal)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l18> + ^aname goal-default45 +
           ^handle goal-default45 +)
    (<p3> ^argnum 5 +)
    (<l18> ^conditions <l1> + ^conditions <l19> + ^conditions <l20> +
           ^conditions <l21> + ^aname goal-default45 +)
    (<l1> ^rtype set + ^negative false + ^parameter <l2> + ^args <l4> +
           ^result <l16> + ^attribute predicate + ^name covered +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type set +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype set + ^negative false + ^parameter <l6> + ^args <l8> +
           ^result <l14> + ^attribute category + ^name location +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^param-id 1 + ^type set +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^rtype single + ^negative false + ^parameter <l10> + ^args <l11> +
           ^result <l12> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l10> ^num 0 +)
    (<l12> ^set <l13> +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
    (<l20> ^return-type number + ^function soar-count + ^rtype single +
           ^negative false + ^parameter <l26> + ^args <l29> + ^result <l45> +
           ^name count + ^type function +)
    (<l26> ^num 2 + ^2 <l27> + ^1 <l28> +)
    (<l27> ^param-id 3 + ^type set +)
    (<l28> ^param-id 5 + ^type single +)
    (<l29> ^num 1 + ^2 <l30> +)
    (<l30> ^rtype set + ^negative false + ^parameter <l31> + ^args <l32> +
           ^result <l43> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l31> ^num 0 +)
    (<l32> ^num 1 + ^1 <l33> +)
    (<l33> ^rtype single + ^negative false + ^parameter <l34> + ^args <l35> +
           ^result <l41> + ^attribute category + ^name location +
           ^type attribute +)
    (<l34> ^num 0 +)
    (<l35> ^num 1 + ^1 <l36> +)
    (<l36> ^rtype single + ^negative false + ^parameter <l37> + ^args <l38> +
           ^result <l39> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l37> ^num 0 +)
    (<l39> ^set <l40> +)
    (<l41> ^set <l42> +)
    (<l43> ^set <l44> +)
    (<l45> ^set <l46> +)
    (<l19> ^return-type number + ^function soar-count + ^rtype single +
           ^negative false + ^parameter <l47> + ^args <l50> + ^result <l66> +
           ^name count + ^type function +)
    (<l47> ^num 2 + ^2 <l48> + ^1 <l49> +)
    (<l48> ^param-id 2 + ^type set +)
    (<l49> ^param-id 4 + ^type single +)
    (<l50> ^num 1 + ^2 <l51> +)
    (<l51> ^rtype set + ^negative false + ^parameter <l52> + ^args <l53> +
           ^result <l64> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l52> ^num 0 +)
    (<l53> ^num 1 + ^1 <l54> +)
    (<l54> ^rtype single + ^negative false + ^parameter <l55> + ^args <l56> +
           ^result <l62> + ^attribute category + ^name location +
           ^type attribute +)
    (<l55> ^num 0 +)
    (<l56> ^num 1 + ^1 <l57> +)
    (<l57> ^rtype single + ^negative false + ^parameter <l58> + ^args <l59> +
           ^result <l60> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l58> ^num 0 +)
    (<l60> ^set <l61> +)
    (<l62> ^set <l63> +)
    (<l64> ^set <l65> +)
    (<l66> ^set <l67> +)
    (<l21> ^return-type number + ^function soar-greater + ^rtype single +
           ^negative false + ^parameter <l22> + ^args <l25> + ^result <l68> +
           ^name greater + ^type function +)
    (<l22> ^num 2 + ^2 <l23> + ^1 <l24> +)
    (<l23> ^param-id 5 + ^type single +)
    (<l24> ^param-id 4 + ^type single +)
    (<l25> ^num 2 + ^2 <l20> + ^1 <l19> +)
    (<l68> ^set <l69> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t5410-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name covered ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname covered + ^handle covered +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname covered +)
    (<l1> ^rtype single + ^negative false + ^parameter <l2> + ^args <l4> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type single +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l10> +)
    (<l5> ^rtype single + ^negative false + ^parameter <l6> + ^args <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l6> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^rtype single + ^negative false + ^parameter <l11> + ^args <l13> +
           ^result <l14> + ^attribute input-arg + ^name object +)
    (<l11> ^num 1 + ^1 <l12> +)
    (<l12> ^param-id 1 + ^type single +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t4066-1
    :chunk
    (state <s1> ^retrieve-handle action-default34 ^gtype action)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l1> + ^verb-structure <l78> +
           ^aname action-default34 + ^handle action-default34 +)
    (<p3> ^argnum 4 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l56> +
           ^aname action-default34 +)
    (<l2> ^function board-between + ^rtype set + ^negative false +
           ^parameter <l7> + ^args <l11> + ^result <l52> + ^name between +
           ^type function +)
    (<l7> ^num 3 + ^3 <l8> + ^2 <l9> + ^1 <l10> +)
    (<l8> ^param-id 2 + ^type single +)
    (<l9> ^param-id 1 + ^type single +)
    (<l10> ^param-id 3 + ^type set +)
    (<l11> ^num 3 + ^3 <l12> + ^2 <l27> + ^1 <l42> +)
    (<l12> ^rtype single + ^negative false + ^parameter <l13> + ^args <l14> +
           ^result <l25> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l13> ^num 0 +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^rtype single + ^negative false + ^parameter <l16> + ^args <l17> +
           ^result <l23> + ^attribute category + ^name location +
           ^type attribute +)
    (<l16> ^num 0 +)
    (<l17> ^num 1 + ^1 <l18> +)
    (<l18> ^rtype single + ^negative false + ^parameter <l19> + ^args <l20> +
           ^result <l21> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l19> ^num 0 +)
    (<l21> ^set <l22> +)
    (<l23> ^set <l24> +)
    (<l25> ^set <l26> +)
    (<l27> ^rtype single + ^negative false + ^parameter <l28> + ^args <l29> +
           ^result <l40> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l28> ^num 0 +)
    (<l29> ^num 1 + ^1 <l30> +)
    (<l30> ^rtype single + ^negative false + ^parameter <l31> + ^args <l32> +
           ^result <l38> + ^attribute category + ^name location +
           ^type attribute +)
    (<l31> ^num 0 +)
    (<l32> ^num 1 + ^1 <l33> +)
    (<l33> ^rtype single + ^negative false + ^parameter <l34> + ^args <l35> +
           ^result <l36> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l34> ^num 0 +)
    (<l36> ^set <l37> +)
    (<l38> ^set <l39> +)
    (<l40> ^set <l41> +)
    (<l42> ^rtype set + ^negative false + ^parameter <l43> + ^args <l44> +
           ^result <l50> + ^attribute category + ^name location +
           ^type attribute +)
    (<l43> ^num 0 +)
    (<l44> ^num 1 + ^1 <l45> +)
    (<l45> ^rtype single + ^negative false + ^parameter <l46> + ^args <l47> +
           ^result <l48> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l46> ^num 0 +)
    (<l48> ^set <l49> +)
    (<l50> ^set <l51> +)
    (<l52> ^set <l53> +)
    (<l3> ^rtype set + ^negative false + ^parameter <l4> + ^args <l6> +
           ^result <l54> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^param-id 3 + ^type set +)
    (<l6> ^num 1 + ^1 <l2> +)
    (<l54> ^set <l55> +)
    (<l56> ^rtype single + ^negative false + ^parameter <l57> + ^args <l59> +
           ^result <l75> + ^attribute predicate + ^name free + ^type concept +)
    (<l57> ^num 1 + ^1 <l58> +)
    (<l58> ^param-id 4 + ^type single +)
    (<l59> ^num 1 + ^1 <l60> +)
    (<l60> ^rtype single + ^negative false + ^parameter <l61> + ^args <l62> +
           ^result <l73> + ^attribute color + ^name red1 + ^type attribute +)
    (<l61> ^num 0 +)
    (<l62> ^num 1 + ^1 <l63> +)
    (<l63> ^rtype single + ^negative false + ^parameter <l64> + ^args <l65> +
           ^result <l71> + ^attribute category + ^name block +
           ^type attribute +)
    (<l64> ^num 0 +)
    (<l65> ^num 1 + ^1 <l66> +)
    (<l66> ^rtype single + ^negative false + ^parameter <l67> + ^args <l68> +
           ^result <l69> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l67> ^num 0 +)
    (<l69> ^set <l70> +)
    (<l71> ^set <l72> +)
    (<l73> ^set <l74> +)
    (<l75> ^set <l76> +)
    (<l78> ^1 <l77> +)
    (<l77> ^verb-prep on1 + ^verb-name move1 + ^2 1 + ^1 4 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4052-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name occupied ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname occupied + ^handle occupied +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname occupied +)
    (<l1> ^rtype single + ^negative false + ^parameter <l2> + ^args <l4> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type single +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l20> +)
    (<l5> ^rtype single + ^negative false + ^parameter <l6> + ^args <l7> +
           ^result <l18> + ^attribute color + ^name blue1 + ^type attribute +)
    (<l6> ^num 0 +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^negative false + ^parameter <l9> + ^args <l10> +
           ^result <l16> + ^attribute category + ^name block +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^rtype single + ^negative false + ^parameter <l12> + ^args <l13> +
           ^result <l14> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l12> ^num 0 +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
    (<l18> ^set <l19> +)
    (<l20> ^rtype single + ^negative false + ^parameter <l21> + ^args <l23> +
           ^result <l24> + ^attribute input-arg + ^name object +)
    (<l21> ^num 1 + ^1 <l22> +)
    (<l22> ^param-id 1 + ^type single +)
    (<l24> ^set <l25> +)
    (<l26> ^set <l27> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4042-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name captured ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname captured + ^handle captured +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname captured +)
    (<l1> ^rtype single + ^negative false + ^parameter <l2> + ^args <l4> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type single +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l20> +)
    (<l5> ^rtype single + ^negative false + ^parameter <l6> + ^args <l7> +
           ^result <l18> + ^attribute color + ^name red1 + ^type attribute +)
    (<l6> ^num 0 +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^negative false + ^parameter <l9> + ^args <l10> +
           ^result <l16> + ^attribute category + ^name block +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^rtype single + ^negative false + ^parameter <l12> + ^args <l13> +
           ^result <l14> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l12> ^num 0 +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
    (<l18> ^set <l19> +)
    (<l20> ^rtype single + ^negative false + ^parameter <l21> + ^args <l23> +
           ^result <l24> + ^attribute input-arg + ^name object +)
    (<l21> ^num 1 + ^1 <l22> +)
    (<l22> ^param-id 1 + ^type single +)
    (<l24> ^set <l25> +)
    (<l26> ^set <l27> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4032-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname clear +)
    (<l1> ^rtype single + ^negative true + ^parameter <l2> + ^args <l4> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type single +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l10> +)
    (<l5> ^rtype single + ^negative false + ^parameter <l6> + ^args <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l6> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^rtype single + ^negative false + ^parameter <l11> + ^args <l13> +
           ^result <l14> + ^attribute input-arg + ^name object +)
    (<l11> ^num 1 + ^1 <l12> +)
    (<l12> ^param-id 1 + ^type single +)
    (<l14> ^set <l15> +)
    (<l16> ^set <l17> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4022-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name free ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l23> +
           ^aname free + ^handle free +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^aname free +)
    (<l1> ^rtype single + ^negative true + ^parameter <l2> + ^args <l4> +
           ^result <l21> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^param-id 1 + ^type single +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l15> +)
    (<l5> ^rtype single + ^negative false + ^parameter <l6> + ^args <l7> +
           ^result <l13> + ^attribute category + ^name location +
           ^type attribute +)
    (<l6> ^num 0 +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^negative false + ^parameter <l9> + ^args <l10> +
           ^result <l11> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^set <l14> +)
    (<l15> ^rtype single + ^negative false + ^parameter <l16> + ^args <l18> +
           ^result <l19> + ^attribute input-arg + ^name object +)
    (<l16> ^num 1 + ^1 <l17> +)
    (<l17> ^param-id 1 + ^type single +)
    (<l19> ^set <l20> +)
    (<l21> ^set <l22> +)
}

sp {chunk*top-pair*apply*complete*t4349-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p2>)
    (<p2> ^predicate <n2>)
    (<n2> ^instance <n3> ^handle <c2>)
    (<n3> ^1 <n4>)
   -{ (<n4> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^negative false ^name <c2> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r1> ^attribute <c3>)
    (<a1> ^num 1 ^1 <c4>)
   -{ (<n4> ^<elem> <obja>)
     -{ (<c4> ^result <r*1>)
        (<r*1> ^set <s*3>)
        (<s*3> ^instance <i*1>)
        (<i*1> ^1 <obja>)}}
    (<c4> -^rtype set)
    (<p1> ^num { < 2 <c5> })
    (<r1> ^set <p3>)
    -->
    (<p3> ^instance <i1> +)
    (<i1> ^1 <n4> +)
}

sp {chunk*board-between*elaborate*object*instance*t4085-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^type function ^args <a1>
          ^negative <c1> ^parameter <p1> ^result <r3> ^name <c2>)
    (<a1> ^num 3 ^2 <c4> ^3 <c3> ^1 <c5>)
    (<c3> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<c4> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i2>)
    (<i2> ^1 { <> <n2> <n3> })
    (<r3> ^set <p4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <i4> + ^3 <n2> + ^2 <n3> +)
}

sp {chunk*top-pair*apply*complete*t2505-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair
          ^parameter <p1> ^args <a1> ^result <r3> ^attribute <c2>)
    (<p1> ^num 2)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    (<r3> ^set <p5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n5> + ^1 <n6> +)
}

sp {chunk*with-attribute*apply*complete*instance*t3710-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^negative <c2> ^parameter <p1> ^args <a1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c4> + ^3 <c5> + ^1 <i2> +)
}

sp {chunk*soar-compare*greater*param-2*OpNoChange*t2141-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^parameter <p1> ^args <a1>
          ^negative <c1> ^result <r3> ^name <c2>)
    (<p1> ^num 2)
    (<a1> ^num 2 ^2 <n2> ^1 <n3>)
    (<n2> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <c3>)
    (<n3> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i2>)
    (<i2> ^1 { > <c3> <c4> })
    (<r3> ^set <p4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <c4> + ^2 <c3> +)
}

sp {chunk*top-pair*apply*complete*t1257-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair
          ^parameter <p1> ^args <a1> ^result <r5> ^attribute <c2>)
    (<p1> ^num 2)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r3>)
    (<r3> ^set <r4>)
    (<r4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 { <> <n5> <n4> })
   -{ (<n3> ^instance <instance1>)
      (<instance1> ^2 <n4> ^1 <n5>)}
    (<r5> ^set <p3>)
    -->
    (<p3> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1890-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <p2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}

sp {chunk*top-pair*apply*complete*t1896-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    (<r3> ^set <p3>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*attribute-of*apply*complete*t3380-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^type attribute-of ^parameter <p1> ^args <a1> ^negative <c1>
          ^result <r1> ^result <r4> ^name <c2>)
    (<p1> ^num 2)
    (<a1> ^num 1 ^2 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<r4> ^set <p4>)
    (<p3> ^<c2> <c4>)
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c4> +)
}

sp {chunk*top-pair*apply*complete*t4508-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair
          ^parameter <p1> ^args <a1> ^result <r2> ^attribute <c2>)
    (<p1> ^num 1)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set)
    (<c4> ^rtype set ^result <r1>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> ^<elem> <e>)
     -{ (<n3> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c3> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
   -{ (<i2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<r2> ^set <p4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <i2> +)
}

sp {chunk*top-pair*apply*complete*t3934-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^type state-pair ^parameter <p1>
          ^args <a1> ^result <r2> ^name <c1> ^attribute <c2>)
    (<p1> ^num 2)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<r2> ^set <p3>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <i3> +)
}

sp {chunk*soar-compare*greater*OpNoChange*t2479-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^parameter <p1> ^args <a1>
          ^negative <c1> ^result <r3> ^name <c2>)
    (<p1> ^num 1)
    (<a1> ^num 2 ^2 <f1> ^1 <n2>)
    (<f1> ^result <r1>)
    (<r1> ^set <i1>)
    (<i1> ^instance <i2>)
    (<i2> ^1 <c3>)
    (<n2> ^result <r2>)
    (<r2> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 { > <c3> <c4> })
    (<r3> ^set <p4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <c4> +)
}

sp {chunk*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t2468-2
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair
          ^parameter <p1> ^args <a1> ^result <r3> ^attribute <c2>)
    (<p1> ^num 2)
    (<a1> ^num 2 ^2 <c3> ^1 <c4> ^2 <c5> ^1 <c6>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<c5> ^result <r4>)
    (<r4> ^set <p6>)
    (<p6> ^instance <i5>)
    (<i5> ^1 <n7>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    (<r3> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^2 <n5> ^1 <i4>)
    -->
    (<i4> ^object <n6> +)
}

sp {chunk*soar-count*apply*complete*t2474-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c3> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-count ^type function ^parameter <p1> ^args <a1>
          ^negative <c1> ^result <r2> ^name <c2>)
    (<p1> ^num 2)
    (<a1> ^num 1 ^2 <n2>)
    (<n2> ^rtype set ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> -^<something> <s*3>)
      (<s1> ^<a*1> <v*1>)}
    (<r2> ^set <p3>)
    -->
    (<p3> ^instance <p4> +)
    (<p4> ^1 (size <i2>) + ^2 <i2> +)
}

sp {chunk*board-between*elaborate*instances*samexy*set*OpNoChange*t4085-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c11> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^name between ^type function
          ^args <a1> ^negative <c1> ^parameter <p1> ^result <r4>)
    (<a1> ^num 3 ^1 <c2> ^2 <c4> ^3 <c3>)
    (<c2> ^rtype set ^result <r3>)
    (<c3> ^result <r1> ^result <r5>)
    (<r1> ^set <p4>)
    (<p4> ^instance <i3>)
    (<i3> ^1 <n3>)
    (<n3> ^predicates <p2>)
    (<r5> ^set <p9>)
    (<p9> ^instance <i7>)
    (<i7> ^1 <n5>)
    (<c4> ^result <r2> ^result <r6>)
    (<r2> ^set <p5>)
    (<p5> ^instance <i4>)
    (<i4> ^1 <n2>)
    (<n2> ^predicates <p3>)
    (<r6> ^set <p10>)
    (<p10> ^instance <i8>)
    (<i8> ^1 { <> <n5> <n6> })
    (<r3> ^set <p6>)
    (<p6> ^instance <i5>)
    (<i5> ^1 <i6>)
    (<r4> ^set <p7>)
    (<p7> ^instance <i1>)
    (<i1> ^2 <n2> ^3 <n3> ^1 <i2>)
    (<p2> ^{ << x y >> <c5> } <c6> ^{ <> <c5> << x y >> <c7> } <c8>)
    (<p3> ^<c5> <c6> ^<c7> <c9>)
    (<i6> ^<c10> <n4>)
    (<n4> ^predicates <p8>)
    (<p8> ^<c5> <c6>)
   -{ (<p8> ^<c7> { <= <c8> <= <c9> <y> } ^<c7> <y>)}
   -{ (<p8> ^<c7> { >= <c8> >= <c9> <y> } ^<c7> <y>)}
    -->
    (<i2> ^object <n4> +)
}

sp {chunk*with-attribute*apply*complete*instance*objects*OpNoChange*t4079-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^negative <c2> ^parameter <p1> ^args <a1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i3>)
    (<i3> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c4> ^3 <c5> ^1 <i2>)
    (<p3> ^<c5> <c4>)
    -->
    (<i2> ^object <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1507-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^negative <c2> ^parameter <p1>
          ^args <a1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<r3> ^set <p3>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*top-pair*apply*complete*t2935-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r4> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    (<r4> ^set <p4>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}



