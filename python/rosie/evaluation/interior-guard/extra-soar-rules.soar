sp {top-state*elaborate*agent-params*custom
   (state <s> ^superstate nil
              ^agent-params <p>)
-->
   (<p> ^debug-ids true
        ^report-tasks-to-output-link true
#       ^debug-op-ties true
#       ^debug-wait-limit 3

        ^interrupt-operator interpret-message 
#       ^interrupt-end-of-sentence true
#       ^interrupt-new-task true
#       ^interrupt-task-search true
        
        ^print-perception true
#       ^print-new-task true
        ^print-new-task-shorthand true
#       ^print-wp-search-path-costs true
        ^print-parsed-messages true
#       ^print-outgoing-messages true
#       ^print-interaction-stack true

   )
}

# Load chunks for fetch
source fetch-chunks.soar

source waypoint-map.soar
source internal-world.soar

#explain all on

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   (<preds> ^predicate.handle in1)
   (<preds> ^predicate.handle on1)
   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain magicbot
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   # Extract predicates via SVS
   (<pred-mon> ^predicate-info.predicate-handle in1)
   (<pred-mon> ^predicate-info.predicate-handle on1)

   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

# Remove modifiers relieiving or emergency when the top task segment is popped
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*modifiers*relieving
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>
              ^task-stack.top <seg>
              ^top-state.world.objects.object.predicates <preds>)
   (<preds> ^modifier1 { <mod> << relieving1 emergency1 >> })
-->
   (<preds> ^modifier1 <mod> -)
}

########### SCRIPTING CONDITIONS ###############
# These are ways of advancing the script in response to 
# some conditions being met in the world

sp {top-state*elaborate*script-triggers
   (state <s> ^superstate nil)
-->
   (<s> ^script-triggers <tr>)
}

sp {top-state*propose*get-next-script-message
   (state <s> ^superstate nil
              ^script-triggers <tr>)
   (<tr> ^trigger <h>
        -^handled <h>)
-->
   (<s> ^operator <o> + > = !)
   (<o> ^name get-next-script-message
        ^handle <h>)
}

sp {top-state*apply*get-next-script-message
   (state <s> ^superstate nil
              ^operator <o>
              ^script-triggers <tr>
              ^interaction.changes <chgs>)
   (<o> ^name get-next-script-message
        ^handle <h>)
-->
   (<tr> ^handled <h>)
   (<chgs> ^outgoing-message <msg>)
   (<msg> ^type get-next-script-message
          ^complete-message true
          ^fields.trigger <h>)
}

# Trigger 1: First time we turn-on the lights in the messhall, interrupt
sp {top-state*elaborate*script-triggers*messhall_1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.bottom.task-operator.name op_turn-on1
              ^world.robot.current-location.predicates.name messhall1)
-->
   (<tr> ^trigger messhall_1)
}

sp {top-state*elaborate*script-triggers*motorpool_1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.bottom.task-operator.name op_turn-on1
              ^world.robot.current-location.predicates.name motorpool1)
-->
   (<tr> ^trigger motorpool_1)
}

