
sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5543-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a2> ^arg1 <a3>
          ^subtask-handle <s3> ^<a5> <a6>)
    (<a2> ^arg-type object ^id <i3>)
    (<a3> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<o1> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> < <h2> }
          -^handle { <h4> <> <h2> <> <h3> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5543-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a14> <a15>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a21> <a22>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s3> ^subtask-handle <s4>
          ^<a9> <a10> ^<a19> <a20>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<o1> ^{ <a11> <> <a9> <> arg2 <> arg1 } <a12>)
      (<a12> ^arg-type <a13>)}
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> < <h3> }
          -^handle { <h5> <> <h3> <> <h4> })
   -{ (<t1> ^{ <a16> <> <a14> <> arg1 } <a17>)
      (<a17> ^arg-type <a18>)}
    (<a15> ^arg-type partial-predicate ^2 <o3> ^handle <h6>)
    (<a20> ^arg-type modifiers ^handle <h7> ^handle { <h8> < <h7> })
    (<a22> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5543-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a14> <a15>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a21> <a22>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s3> ^subtask-handle <s4>
          ^<a9> <a10> ^<a19> <a20>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<o1> ^{ <a11> <> <a9> <> arg2 <> arg1 } <a12>)
      (<a12> ^arg-type <a13>)}
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> < <h3> }
          -^handle { <h5> <> <h3> <> <h4> })
   -{ (<t1> ^{ <a16> <> <a14> <> arg1 } <a17>)
      (<a17> ^arg-type <a18>)}
    (<a15> ^arg-type partial-predicate ^2 <o3> ^handle <h6>)
    (<a20> ^arg-type modifiers ^handle <h7> ^handle { <h8> < <h7> })
    (<a22> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5543-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^<a5> <a6>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a3>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<s2> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> < <h2> }
          -^handle { <h4> <> <h2> <> <h3> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5543-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^<a5> <a6>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a3>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<s2> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> < <h2> }
          -^handle { <h4> <> <h2> <> <h3> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t5513-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a6> ^<a7> <a15>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>
          ^{ <a7> < <a4> } <a8>)
    (<a2> ^arg-type modifiers ^handle <h1> -^handle { <h4> <> <h1> <> <h2> }
          ^handle <h2>)
    (<a3> ^arg-type modifiers ^handle <h1> ^handle { <h2> < <h1> }
          -^handle { <h3> <> <h1> <> <h2> })
    (<a5> ^arg-type object ^id <i1>)
    (<a6> ^arg-type object ^id <i1>)
   -{ (<c2> ^{ <a9> <> <a1> <> <a4> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
   -{ (<t2> ^{ <a12> <> <a1> <> <a4> <> <a7> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a8> ^arg-type object ^id <i2>)
    (<a15> ^arg-type object ^id <i2>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t5508-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^{ <a5> < <a3> } <a6>)
    (<a2> ^arg-type modifiers ^handle <h1> ^handle { <h2> < <h1> }
          -^handle { <h3> <> <h1> <> <h2> })
    (<a4> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a7> <> <a1> <> <a3> <> <a5> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a10> ^<a3> <a11> ^<a5> <a12>)
    (<a10> ^handle <h1> ^handle <h2> ^arg-type modifiers)
    (<a11> ^id <i2> ^arg-type object)
    (<a12> ^id <i4> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5496-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a7> <a8>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_find1 ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5496-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a15> <a16>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    (<a16> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5496-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a15> <a16>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    (<a16> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5496-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5496-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5494-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5494-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5464-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_pick-up1 ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy modifier1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5464-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy modifier1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
    (<a14> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5464-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy modifier1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
    (<a14> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5464-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy modifier1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5464-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy modifier1 -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5449-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
   -{ (<o1> ^{ <a2> <> arg2 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a5> ^arg-type partial-predicate ^2 <i3> ^handle <h2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5449-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h3>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h4>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    (<a14> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5449-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h3>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h4>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i5> ^object <i2> ^object <i6> ^object <i3> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    (<a14> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5449-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5449-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t5441-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5430-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s2> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5430-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^handle in1 ^type relation ^1 <i3> ^2 <i5>)
    (<i2> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i4> ^object <i5> ^object <i6>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle in1)
    (<p4> ^handle in1)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5430-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^handle in1 ^type relation ^1 <i3> ^2 <i5>)
    (<i2> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i4> ^object <i5> ^object <i6>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle in1)
    (<p4> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5430-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5430-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t5396-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1term6)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle fetch1term6 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5385-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle fetch1)
    (<o1> ^next-goal-handle fetch1term6 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5376-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle fetch1goal5)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle fetch1term6
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t5359-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5349-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5340-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t5324-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1goal1)
    (<t1> ^task-handle put-down1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle put-down1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle not-grabbed1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5307-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5298-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> -^arg2 <a1> ^task-handle put-down1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1goal1
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t5272-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t5248-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg1 <a2> ^subtask-handle subtask13)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t4752-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4745-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^modifier1 starting1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask12)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t4744-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<c2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<t2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a9> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t4664-5
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t4664-4
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t4664-3
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h1>
          ^handle <h3>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h4>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4664-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4664-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4634-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4624-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4615-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4595-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4585-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4576-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t4560-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1goal1)
    (<t1> ^task-handle approach1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle approach1goal1)
    (<i2> ^1 <i1> ^property-handle is-reachable1 ^handle reachable1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4543-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4534-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t4521-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4497-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask11)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4458-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4458-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t4451-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h2> ^1 <i2>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i3>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i4> ^pred-count 1)
    (<i4> ^1 <i3> ^property-handle <p1> ^handle <h2> ^type unary)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t4442-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1goal1)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle pick-up1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle grabbed1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4425-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4416-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t4410-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4386-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask10)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4347-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4347-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1
          ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4337-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_go-to-location1 ^arg2 <a4>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4337-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_go-to-location1 ^arg2 <a4>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t4249-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4143-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle find1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4133-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle find1)
    (<o1> ^next-goal-handle find1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4124-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle find1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle find1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4107-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle gotoloc1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4097-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-location1)
    (<o1> ^next-goal-handle gotoloc1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4088-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle gotoloc1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle gotoloc1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4071-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-waypoint1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-waypoint1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4061-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-waypoint1)
    (<o1> ^next-goal-handle go-to-waypoint1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4052-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-waypoint1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-waypoint1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t3751-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-next-waypoint1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3741-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-next-waypoint1)
    (<o1> ^next-goal-handle go-to-next-waypoint1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3732-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-next-waypoint1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-next-waypoint1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3726-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1goal1)
    (<t1> ^task-handle go-to-next-waypoint1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type waypoint ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle go-to-next-waypoint1goal1)
    (<i2> ^1 <i1> ^name current-waypoint ^type status)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3710-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-next-waypoint1)
    (<o1> ^next-goal-handle go-to-next-waypoint1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3701-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-next-waypoint1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-next-waypoint1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3677-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-next-waypoint1start1 ^item-type start-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3599-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-waypoint1)
    (<o1> ^next-goal-handle go-to-waypoint1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3590-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-waypoint1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-waypoint1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3577-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-waypoint1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-waypoint1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3556-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type waypoint ^id <i1>)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type waypoint)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3550-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1goal1)
    (<t1> ^task-handle go-to-location1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle gotoloc1goal1)
    (<i2> ^1 <i1> ^name current-location ^type status)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3534-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-location1)
    (<o1> ^next-goal-handle gotoloc1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3525-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle gotoloc1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle gotoloc1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3512-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle gotoloc1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3489-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3482-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1goal1)
    (<t1> ^task-handle find1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle find1goal1)
    (<i2> ^1 <i1> ^property-handle is-confirmed1 ^handle confirmed1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3465-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle find1)
    (<o1> ^next-goal-handle find1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3456-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle find1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle find1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3443-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle find1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3422-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t3416-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle find1 ^item-type task-operator ^name op_find1
           ^arg1 <a2> ^subtask-handle subtask9)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t3415-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<c2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<t2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type object ^id <i1>)
    (<a9> ^arg-type object ^id <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3375-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3375-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3370-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3370-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3369-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg1 <a4>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3369-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg1 <a4>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t3230-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle remember1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3220-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle remember1)
    (<o1> ^next-goal-handle remember1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3211-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle remember1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle remember1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3197-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1goal1)
    (<t1> ^task-handle remember1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle remember1goal1)
    (<i1> ^command-name remember-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3182-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle remember1)
    (<o1> ^next-goal-handle remember1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3173-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle remember1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle remember1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3167-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle remember1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3146-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^{ <a5> < <a3> } <a6>)
    (<a2> ^arg-type modifiers ^handle <h1> ^handle { <h2> < <h1> }
          -^handle { <h3> <> <h1> <> <h2> })
    (<a4> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
   -{ (<t1> ^{ <a7> <> <a1> <> <a3> <> <a5> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a10> ^<a3> <a11> ^<a5> <a12>)
    (<a10> ^handle <h1> ^handle <h2> ^arg-type modifiers)
    (<a11> ^id <i1> ^arg-type object)
    (<a12> ^id <i2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t3138-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p2> ^world <w1>)
    (<c1> -^performed-subtask subtask8 -^performed-subtask <p1>)
    (<t1> ^task-handle fetch1 ^name <n1>)
    (<p2> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p3>)
    (<p3> ^is-confirmed1 not-confirmed1 ^modifier1 starting1
          ^category location)
    (<o3> ^predicates <p4>)
    (<p4> ^modifier1 current1 ^category location)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle remember1 ^item-type task-operator ^name op_remember1
           ^modifiers <m1> ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask8)
    (<m1> ^handle first1 ^handle once1 ^arg-type modifiers)
    (<a1> ^id <o2> ^arg-type object)
    (<a2> ^id <o3> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t971-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t963-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t954-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a8>
           ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t945-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i3> <i4> ^<i2> <i5>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i6> ^pred-count 1)
    (<i6> ^2 <i5> ^1 <i4> ^handle <h2> ^type relation)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t932-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1goal5)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 starting1 ^category location)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle fetch1goal5)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t904-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle fetch1)
    (<o1> ^next-goal-handle fetch1goal5 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> fetch1goal5 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 starting1 ^category location)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t895-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle fetch1start3)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle fetch1goal5
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t480-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1start3)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle fetch1start3 ^item-type start-goal)
}
