sp {op_write1*internal*propose*perform-write
   (state <s> ^name op_write1
              ^problem-space.execution-type external
              ^target-value <val>
              -^target-object.predicates.value <val>)
-->
   (<s> ^operator <o> +)
   (<o> ^name perform-write)
}

sp {op_write1*internal*apply*perform-write*change*holding-object
   (state <s> ^name op_write1
              ^problem-space.execution-type external
              ^operator.name perform-write
              ^target-value <val>
              ^top-state.world.objects.object <obj>
              ^target-object <obj>)
   (<obj> ^predicates <p>)
-->
   (<p> ^value <val>)
}

sp {op_write1*internal*prefer*attend-to-scene-change*over*perform-pick-up
   (state <s> ^name op_write1
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name attend-to-scene-change)
   (<o2> ^name perform-write)
-->
   (<s> ^operator <o1> > <o2>)
}

#sp {op_write1*internal*apply*complete-action*remove*in*predicate
#   (state <s> ^name op_write1
#              ^operator <o>
#              ^target-object <obj>
#              ^top-state.world.predicates.predicate <in-pred>
#              ^top-state.world.robot.current-location <loc>)
#   (<o> ^name complete-action
#        ^status success)
#   (<in-pred> ^handle in1
#              ^instance <i>)
#   (<i> ^1 <obj> ^2 <loc>)
#-->
#   (<in-pred> ^instance <i> -)
#}
#
#sp {op_write1*internal*apply*complete-action*remove*holding*predicate
#   (state <s> ^name op_write1
#              ^operator <o>
#              ^target-object <obj>
#              ^top-state.world.predicates.predicate <in-pred>)
#   (<o> ^name complete-action
#        ^status success)
#   (<in-pred> ^handle holding1
#              ^instance <i>)
#   (<i> ^1 <obj> ^2 <person>)
#-->
#   (<in-pred> ^instance <i> -)
#}
