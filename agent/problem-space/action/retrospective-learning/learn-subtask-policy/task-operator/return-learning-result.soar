sp {learn-subtask-policy*task-operator*propose*return-learning-result*success
   (state <s> ^top-retrospective-state true
              ^desired.satisfied true)
-->
   (<s> ^operator <o> + !)
   (<o> ^name return-learning-result
        ^result success)
}

sp {learn-subtask-policy*task-operator*propose*return-learning-result*failure
   (state <s> ^top-retrospective-state true
              ^retrospective-learning-failed true)
-->
   (<s> ^operator <o> + !)
   (<o> ^name return-learning-result
        ^result failure)
}

sp {learn-subtask-policy*task-operator*apply*return-learning-result*copy*to*superstate
   (state <s> ^top-retrospective-state true
              ^operator <o>
              ^superstate <ss>)
   (<o> ^name return-learning-result
        ^result <res>)
-->
   (<ss> ^retrospective-learning-result <res>)
}

# If the agent hit an unexpected op-no-change when applying an action, return failure

sp {learn-subtask-policy*task-operator*operator*no-change*propose*return-learning-result*failure
   (state <s> ^problem-space.subproblem retrospective
              ^attribute operator
              ^impasse no-change
              ^superstate <ss>)
   (<ss> ^name evaluate-operator
         ^superstate <sel>)
   (<sel> ^name selection
          ^superstate <top-ret>)
   (<top-ret> ^top-retrospective-state true)
-->
   (<s> ^operator <o> + !)
   (<o> ^name return-learning-result
        ^result failure
        ^destination <top-ret>)
}

sp {learn-subtask-policy*task-operator*operator*no-change*apply*return-learning-result*failure
   (state <s> ^problem-space.subproblem retrospective
             -^top-retrospective-state true
              ^quiescence t
              ^operator <o>)
   (<o> ^name return-learning-result
        ^result failure
        ^destination <top-ret>)
-->
   (<top-ret> ^retrospective-learning-failed true)
}
