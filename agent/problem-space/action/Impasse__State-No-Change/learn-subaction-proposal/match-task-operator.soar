# try to match the learned subaction against a known proposal 

sp {learn-subaction-proposal*elaborate*match-task-operator
   (state <s> ^name learn-subaction-proposal
              ^subaction-operator <sub>)
-->
   (<s> ^match-task-operator <mto>)
   (<mto> ^task-operator <sub>
          ^candidate-tasks <cands>)
}

sp {learn-subaction-proposal*elaborate*match-task-operator*candidate-task-operator
   (state <s> ^name learn-subaction-proposal
              ^match-task-operator.candidate-tasks <cands>
              ^operator <o> +)
-->
   (<cands> ^candidate-task-operator <o>)
}

sp {learn-subaction-proposal*reject*operator*doesnt*match
   (state <s> ^name learn-subaction-proposal
              ^operator <o> +
              ^match-task-operator <mto>)
   (<mto> ^candidate-tasks.candidate-task-operator <o>
         -^successful-match <o>)
   (<o> -^name return-unmatched-subaction)
-->
   (<s> ^operator <o> -)
}

sp {learn-subaction-proposal*indifferent*preference*matched*operator
   (state <s> ^name learn-subaction-proposal
              ^operator <o> +
              ^match-task-operator <mto>)
   (<mto> ^successful-match <o>)
-->
   (<s> ^operator <o> =)
}
            
sp {TASK*PROPOSE*SUBTASK*learn-subaction-proposal*matched*subaction
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub>
              ^match-task-operator.successful-match <o>
              ^superstate.superstate <ss>)
-->
   (<ss> ^operator <sub> +)
}

sp {learn-subaction-proposal*apply*matched-operator*removed*learned*no*superstate
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^match-task-operator.successful-match <o>
              ^subaction-handle <h>
              ^superstate <ss>)
   (<ss> ^name action-state-no-change
         ^task-concept-network.procedural.subactions.subaction <sub>)
   (<sub> ^handle <h>
          ^learned no)
-->
   (<sub> ^learned no -)
}

