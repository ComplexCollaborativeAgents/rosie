# try to match the learned subaction against a known proposal 

sp {learn-subaction-proposal*elaborate*match-action
   (state <s> ^name learn-subaction-proposal
              ^subaction-operator <sub>)
-->
   (<s> ^match-action.action <sub>)
}

sp {learn-subaction-proposal*elaborate*match-action*candidate-action
   (state <s> ^name learn-subaction-proposal
              ^match-action <ma>
              ^operator <o> +)
-->
   (<ma> ^candidate-action <o>)
}

sp {learn-subaction-proposal*reject*operator*doesnt*match
   (state <s> ^name learn-subaction-proposal
              ^operator <o> +
              ^match-action <ma>)
   (<ma> ^candidate-action <o>
        -^matches-action <o>)
-->
   (<s> ^operator <o> -)
}

sp {learn-subaction-proposal*indifferent*preference*matched*operator
   (state <s> ^name learn-subaction-proposal
              ^operator <o> +
              ^match-action <ma>)
   (<ma> ^matches-action <o>)
-->
   (<s> ^operator <o> =)
}
            
sp {TASK*PROPOSE*SUBTASK*learn-subaction-proposal*matched*subaction
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub>
              ^match-action.matches-action <o>
              ^superstate.superstate <ss>)
-->
   (<ss> ^operator <sub> +)
}

sp {learn-subaction-proposal*apply*matched-operator*removed*learned*no*superstate
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^match-action.matches-action <o>
              ^subaction-handle <h>
              ^superstate <ss>)
   (<ss> ^name action-state-no-change
         ^action-id.procedural.subactions.subaction <sub>)
   (<sub> ^handle <h>
          ^learned no)
-->
   (<sub> ^learned no -)
}

