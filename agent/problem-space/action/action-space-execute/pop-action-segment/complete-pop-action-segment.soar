# complete-pop-action - takes care of thing that needs to be done when popping the action

sp {problem-space*action*pop-action-segment*propose*complete-pop-action
   (state <s> ^name pop-action-segment)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-pop-action)
}

# Remove the action from the top of the stack
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*pop
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^action-stack <stack>
              ^segment-to-pop <segment>)
   (<stack> ^top <segment>)
   (<segment> ^prev <prev>)
   (<prev> ^next <segment>)
-->
   (<stack> ^top <segment> -
            ^top <prev>)
   (<prev> ^next <segment> -
           ^next none)
}

# If the action was the bottom, change it to none
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*change*bottom
  (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^action-stack <stack>
              ^segment-to-pop <segment>)
   (<stack> ^bottom <segment>
            ^top <segment>)
-->
   (<stack> ^bottom <segment> -
           ^bottom none
           ^top <segment> -
           ^top none)
}

sp {problem-space*action*pop-action-segment*apply*complete-pop-action*pop*segment
   (state <s> ^name pop-action-segment
               ^operator.name complete-pop-action
               ^top-state.interaction.stack.segment.purpose <p>
               ^segment-to-pop.execution-operator <op>
               ^top-state.interaction.changes <chgs>)
  (<p> ^type execute-task
       ^parameters.action-operator <op>)
-->
  (<chgs> ^terminate-segment true)
}

# Report to the output link that the action was completed
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*report-to-output-link
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^segment-to-pop <a>
              ^top-state.io.output-link <ol>)
   (<a> ^status success
        ^depth <d>)
-->
   (<ol> ^completed-action <a>)
   (<a> ^depth <d>)
}


# Report an action-event as having been performed if the action was successful
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*report*performed*action-event
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^segment-to-pop <segment>
              ^top-state.interaction.status <status>)
   (<segment> ^status success
             ^execution-operator.task-handle <task-handle>)
-->
   (<status> ^performed.action-event.type <task-handle>)
}

sp {problem-space*action*pop-action-segment*apply*complete-pop-action*report*find-success
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^segment-to-pop <segment>
              ^top-state.interaction.changes <chgs>)
   (<segment> ^status success
             ^execution-operator.task-handle find1)
-->
   (<chgs> ^outgoing-message <msg>)
   (<msg> ^type find-success
          ^complete-message true)
}

# If there is a policy-learning-needed flag, 
#   push a retrospective learning segment onto the interaction stack
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*push*learning*segment
   (state <s> ^name pop-action-segment
              ### ABORT - check for status abort
              ^operator.name complete-pop-action
              ^segment-to-pop <segment>
              ^top-state.interaction.changes <changes>)
   (<segment> ^policy-learning-needed true
             ^status success
             ^execution-operator.task-handle <> find1)
-->
   (<changes> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type retrospective-learning
        ^parameters <params>
        ^satisfaction.learning-event.type retrospective)
   (<params> ^action <action>)
}

# Remove anything remembered during the action
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*remembered*things
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^segment-to-pop.remembered <rem>)
   (<rem> ^object.predicates <preds>
          ^attribute <att>
          ^value <val>)
   (<preds> ^<att> <val>)
-->
   (<preds> ^<att> <val> -)
}

# Remove answers during the action
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*answers
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^superstate.world.objects <objs>
              ^segment-to-pop <bottom>
              ^action-stack.bottom <bottom>)
  (<objs> ^object <obj>)
  (<obj> ^predicates <preds>)
  (<preds> ^modifier1 answer1)
-->
  (<preds> ^modifier1 answer1 -)
}
#
#sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*answer*objects
#   (state <s> ^name pop-action-segment
#              ^operator.name complete-pop-action
#              ^superstate.world.objects <objs>
#              ^segment-to-pop <bottom>
#              ^action-stack.bottom <bottom>)
#  (<objs> ^object <obj>)
#  (<obj> ^predicates <preds>)
#  (<preds> ^modifier1 answer1
#           -^object-status confirmed)
#-->
#  (<objs> ^object <obj> -)
#}
#   
# Clear robot-status
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*robot-status
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^superstate.world.objects.object.predicates <preds>
              ^segment-to-pop <bottom>
              ^action-stack.bottom <bottom>)
  (<preds> ^robot-status <status>)
-->
  (<preds> ^robot-status <status> -)
}
   
   
## Remove any objects added to the world during the action
#sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*added*objects
#   (state <s> ^name pop-action-segment
#              ^operator.name complete-pop-action
#              ^segment-to-pop.added <obj>
#              ^superstate.world.objects <objs>)
#   (<objs> ^object <obj>)
#-->
#   (<objs> ^object <obj> -)
#}
#
## Remove any predicates related to that added object
#sp {problem-space*action*pop-action-segment*apply*complete-pop-action*remove*added*predicates
#   (state <s> ^name pop-action-segment
#              ^operator.name complete-pop-action
#              ^segment-to-pop.added <obj>
#              ^superstate.world.predicates.predicate <pred>)
#   (<pred> ^instance <i>)
#   (<i> ^<any> <obj>)
#-->
#   (<pred> ^instance <i> -)
#}

#   mark it performed in the current action
sp {problem-space*action*pop-action-segment*apply*complete-pop-action*mark*performed*once*subtask
   (state <s> ^name pop-action-segment
              ^operator.name complete-pop-action
              ^segment-to-pop.execution-operator <op>
              ^segment-to-pop.prev.execution-operator <parent-op>)
   (<op> ^subtask-handle { <sub-handle> <> none })
-->
   (<parent-op> ^performed <sub-handle>)
}

sp {problem-space*action*pop-action-segment*apply*complete-pop-action*bottom*clear*task-objects
  (state <s> ^name pop-action-segment
             ^operator.name complete-pop-action
             ^segment-to-pop <segment>
             ^action-stack.bottom <segment>
             ^action-stack <stack>)
  (<stack> ^task-objects <objs>)
-->
  (<stack> ^task-objects <objs> -
           ^task-objects <new>)
}

sp {problem-space*action*pop-action-segment*apply*complete-pop-action*delete*non-confirmed*task*object
  (state <s> ^name pop-action-segment
             ^operator.name complete-pop-action
             ^segment-to-pop <segment>
             ^action-stack.bottom <segment>
             ^action-stack.task-objects.object <obj>
             ^top-state.perception-monitor.object-monitor.object-info <obj-info>)
   (<obj> -^predicates.object-status confirmed
          -^predicates.arm-status grabbed)
   (<obj-info> ^wm-obj <obj>)
-->
   (<obj-info> ^delete-object true)
}

sp {problem-space*action*pop-action-segment*apply*complete-pop-action*delete*dialog*info
  (state <s> ^name pop-action-segment
             ^operator.name complete-pop-action
             ^segment-to-pop <bottom>
             ^action-stack.bottom <bottom>
             ^top-state <top>)
  (<top> ^dialog-object-list <list>
         ^dialog-world <w>)
-->
  (<top> ^dialog-object-list <list> -
         ^dialog-world <w> -
         ^dialog-object-list nil
         ^dialog-object-list-saved nil
         ^dialog-world <new>)
  (<new> ^objects <objs> ^predicates <preds>)
}
