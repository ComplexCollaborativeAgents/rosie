# once everything is done, push the action onto the stack

sp {problem-space*action*push-action-segment*propose*complete-push-action-segment
   (state <s> ^name push-action-segment)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-push-action-segment)
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*add*start-of-execution*flag
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>)
-->
   (<seg> ^start-of-execution true)
}

# remove new-action-segment from task-stack
sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*remove*new-action-segment*task-stack
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>
              ^task-stack <stack>)
   (<stack> ^new-action-segment <seg>)
-->
   (<stack> ^new-action-segment <seg> -)
}

# remove new-action-segment from superstate
sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*remove*new-action-segment*superstate
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>
              ^superstate <ss>)
   (<ss> ^new-action-segment <seg>)
-->
   (<ss> ^new-action-segment <seg> -)
}

# push the action on to the stack

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*push
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^task-stack <stack>
              ^segment-to-push <seg>)
   (<stack> ^top <top>)
   (<top> ^next none)
-->
   (<stack> ^top <top> -
            ^top <seg>)
   (<seg> ^next none
          ^prev <top>)
   (<top> ^next none -
          ^next <seg>)
}

# if the stack was empty, update the top and bottom 
sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*push*empty
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^task-stack <stack>
              ^segment-to-push <seg>)
   (<stack> ^top none
            ^bottom none)
-->
   (<stack> ^top none -
            ^top <seg>
            ^bottom none -
            ^bottom <seg>)
   (<seg> ^next none
          ^prev none)
}

# Report to the output link that the action was started
sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*report-to-output-link
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>
              ^top-state.io.output-link <ol>)
-->
   (<ol> ^started-action <seg>)
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*ask*remove*previous*answer
   (state <s> ^name push-action-segment
              ^operator.name complete-push-action-segment
              ^segment-to-push.execution-operator.task-handle ask1
              ^superstate.world.objects.object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^modifier1 answer1)
-->
   (<preds> ^modifier1 answer1 -)
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*print*action*segment
   (state <s> ^name push-action-segment
              ^agent-params.debug-actions true
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>)
   (<seg> ^execution-operator <exop>)
-->
   (write |Pushing a new action segment: | (crlf))
   (write (cmd print <seg> -d 1)  (crlf))
   (write |Action Operator: |  (crlf))
   (write (cmd print <exop> -d 5)  (crlf))
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*print*action*1*obj
   (state <s> ^name push-action-segment
              ^agent-params.print-actions true
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>)
   (<seg> ^execution-operator <exop>)
   (<exop> ^name <op-name>
           ^<arg1-name> <arg1>
          -^{ <arg2-name> <> <arg1-name> }.arg-type <t2>)
   (<arg1> ^arg-type object ^id.handle <obj>)
-->
   (write (crlf) |!ACTION! | <op-name> | | <obj> (crlf))
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*print*action*1*pred
   (state <s> ^name push-action-segment
              ^agent-params.print-actions true
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>)
   (<seg> ^execution-operator <exop>)
   (<exop> ^name <op-name>
           ^<arg1-name> <arg1>
          -^{ <arg2-name> <> <arg1-name> }.arg-type <t2>)
   (<arg1> ^arg-type predicate ^{2}.handle <obj>)
-->
   (write (crlf) |!ACTION! | <op-name> | | <obj> (crlf))
}

sp {problem-space*action*push-action-segment*apply*complete-push-action-segment*print*action*1*obj*1*pred
   (state <s> ^name push-action-segment
              ^agent-params.print-actions true
              ^operator.name complete-push-action-segment
              ^segment-to-push <seg>)
   (<seg> ^execution-operator <exop>)
   (<exop> ^name <op-name>
           ^<arg1-name> <arg1>
           ^<arg2-name> <arg2>)
   (<arg1> ^arg-type object ^id.handle <obj1>)
   (<arg2> ^arg-type predicate ^{2}.handle <obj2>)
-->
   (write (crlf) |!ACTION! | <op-name> | | <obj1> | | <obj2> (crlf))
}

        

        
