sp {action-space*execute*propose*complete-action*success*desired*satisfied*no*smem*goal
   (state <s> ^problem-space.action-space execute
              ^task-concept-network <tcn>
              ^desired <des>
              ^current-task-seg <seg>)
   (<tcn> -^goal <goal>)
   (<des> ^satisfied true)
   (<seg> -^status)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-action
        ^status success)
}

sp {action-space*execute*propose*complete-action*success*desired*satisfied*final*subgoal
   (state <s> ^problem-space.action-space execute
              ^task-concept-network.goal <g>
              ^desired <des>
              ^current-task-seg <seg>)
   (<g> ^subgoal-count <c>
        ^{<c>}.handle <subgoal-h>)
   (<des> ^handle <subgoal-h>
          ^satisfied true)
   (<seg> -^status)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-action
        ^status success)
}

sp {action-space*execute*propose*complete-action*unrecoverable-failure
   (state <s> ^problem-space.action-space execute
              ^current-task-seg <seg>)
   (<seg> ^unrecoverable-failure <name>
       -^status)
-->
   (<s> ^operator <o> + >)
   (<o> ^name complete-action
        ^status failure
        ^failure-name <name>)
}

sp {action-space*execute*apply*complete-action*mark*status*success
   (state <s> ^problem-space.action-space execute
              ^operator <o>
              ^current-task-seg <seg>)
   (<o> ^name complete-action
        ^status <status>)
-->
   (<seg> ^status <status>)
}

sp {action-space*execute*apply*complete-action*remove*output*commands
   (state <s> ^problem-space.action-space execute
              ^operator.name complete-action
              ^current-task-seg <seg>
              ^io.output-link <out>)
   (<seg> ^sent-command <cmd>)
   (<out> ^<out-name> <cmd>)
-->
   (<out> ^<out-name> <cmd> -)
}
