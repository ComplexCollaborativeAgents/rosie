######## match object arguments #######

sp {learn-matches-task-op-elaboration-rule*elaborate*candidate*matches-arg*object
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^task-info <info>
              ^candidate <cand>)
   (<info> ^arg-name <arg-name>
           ^<arg-name> <arg>)
   (<cand> ^task-operator <task-op>)
   (<arg> ^arg-type object
          ^id <obj>)
   (<task-op> ^<arg-name> <carg>)
   (<carg> ^arg-type object
           ^id <obj>)
-->
   (<cand> ^matches-arg <arg-name>)
}

sp {SHAME*learn-matches-task-op-elaboration-rule*elaborate*candidate*matches-arg*object*2*preds
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^task-info <info>
              ^candidate <cand>)
   (<info> ^arg2 <arg>)
   (<cand> ^task-operator <task-op>)
   (<arg> ^arg-type object
          ^id.predicates <preds1>)
   (<task-op> ^task-handle remember1
              ^arg2 <carg>)
   (<carg> ^arg-type object
           ^id.predicates <preds2>)
   (<preds1> ^modifier1 <mod>
             ^category <cat>)
   (<preds2> ^modifier1 <mod>
             ^category <cat>)
-->
   (<cand> ^matches-arg arg2)
}

# ARGSTATUS
#sp {learn-matches-task-op-elaboration-rule*elaborate*candidate*matches-arg*object*1*preds
#   (state <s> ^name learn-matches-task-op-elaboration-rule
#              ^task-info <info>
#              ^candidate <cand>)
#   (<info> ^arg-name <arg-name>
#           ^<arg-name> <arg>)
#   (<cand> ^task-operator <task-op>)
#   (<arg> ^arg-type object
#          ^arg-status abstract
#          ^id.predicates <preds1>)
#   (<task-op> ^<arg-name> <carg>)
#   (<carg> ^arg-type object
#           ^id.predicates <preds2>)
#   (<preds1> ^{ <prop1> << category modifier1 sentence >> } { <pred1>           }
#            -^{ <prop2> << category modifier1 sentence >> } { <pred2> <> <pred1> })
#   (<preds2> ^<prop1> <pred1>)
#-->
#   (<cand> ^matches-arg <arg-name>)
#}
#
#sp {learn-matches-task-op-elaboration-rule*elaborate*candidate*matches-arg*object*2*preds
#   (state <s> ^name learn-matches-task-op-elaboration-rule
#              ^task-info <info>
#              ^candidate <cand>)
#   (<info> ^arg-name <arg-name>
#           ^<arg-name> <arg>)
#   (<cand> ^task-operator <task-op>)
#   (<arg> ^arg-type object
#          ^arg-status abstract
#          ^id.predicates <preds1>)
#   (<task-op> ^<arg-name> <carg>)
#   (<carg> ^arg-type object
#           ^id.predicates <preds2>)
#   (<preds1> ^{ <prop1> << category modifier1 sentence >> } { <pred1>           }
#             ^{ <prop2> << category modifier1 sentence >> } { <pred2> > <pred1> }
#            -^{ <prop3> << category modifier1 sentence >> } { <pred3> > <pred2> })
#   (<preds2> ^<prop1> <pred1>
#             ^<prop2> <pred2>)
#-->
#   (<cand> ^matches-arg <arg-name>)
#}
