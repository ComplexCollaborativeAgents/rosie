###############################################################
#####                    predicate                        #####


#### Expand the predicate to instantiate the sub-parts

# state predicate
sp {instantiate-task-operator*instantiate-task-argument*expand*predicate*state
  (state <s> ^name instantiate-task-operator
             ^instantiate-task-argument <arg>)
  (<arg> ^arg-type predicate
         ^general-arg-rep <gen>)
  (<gen> ^type state
         ^id <pred-slot>
         ^1 <obj1-slot>)
-->
  (<s> ^instantiate-task-argument <gpred> <gobj1>)

  (<gpred> ^general-arg-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)

  (<gobj1> ^general-arg-rep <gen-obj1>)
  (<gen-obj1> ^arg-type object
              ^id <obj1-slot>)

  (<arg> ^instantiate-handle <gpred>
         ^instantiate-obj1 <gobj1>)
}

# relation predicate
sp {instantiate-task-operator*instantiate-task-argument*expand*predicate*relation
  (state <s> ^name instantiate-task-operator
             ^instantiate-task-argument <arg>)
  (<arg> ^arg-type predicate
         ^general-arg-rep <gen>)
  (<gen> ^type relation
         ^id <pred-slot>
         ^1 <obj1-slot>
         ^2 <obj2-slot>)
-->
  (<s> ^instantiate-task-argument <gpred> <gobj1> <gobj2>)

  (<gpred> ^general-arg-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)

  (<gobj1> ^general-arg-rep <gen-obj1>)
  (<gen-obj1> ^arg-type object
              ^id <obj1-slot>)

  (<gobj2> ^general-arg-rep <gen-obj2>)
  (<gen-obj2> ^arg-type object
              ^id <obj2-slot>)

  (<arg> ^instantiate-handle <gpred>
         ^instantiate-obj1 <gobj1>
         ^instantiate-obj2 <gobj2>)
}

# predicate (from an argument)
sp {instantiate-task-operator*instantiate-task-argument*expand*predicate
  (state <s> ^name instantiate-task-operator
             ^instantiate-task-argument <arg>)
  (<arg> ^general-arg-rep <gen>)
  (<gen> ^arg-type predicate
         ^id <pred-slot>
         ^2 <obj2-slot>)
-->
  (<s> ^instantiate-task-argument <gpred> <gobj2>)
  (<gpred> ^general-arg-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)
  (<gobj2> ^general-arg-rep <gen-obj2>)
  (<gen-obj2> ^arg-type object
              ^id <obj2-slot>)
  (<arg> ^instantiate-handle <gpred>
         ^instantiate-obj2 <gobj2>)
}

# ARGSTATUS
## if the predicate is abstract, mark the object as abstract
#sp {instantiate-task-operator*elaborate*instantiate-task-argument*predicate*object*arg-status*abstract
#  (state <s> ^name instantiate-task-operator
#             ^instantiate-task-argument <parg>)
#  (<parg> ^general-arg-rep.arg-status abstract
#          ^instantiate-obj2.general-arg-rep <rep>)
#-->
#  (<rep> ^arg-status abstract)
#}

##### Propose instantiate-task-argument for the predicate when the subparts have been instantiateed

# predicate argument
sp {instantiate-task-operator*propose*instantiate-task-argument*predicate*partial
   (state <s> ^name instantiate-task-operator
              ^instantiate-task-argument <arg>)
   (<arg> ^general-arg-rep.arg-type predicate
          ^instantiate-handle.instantiation.handle <handle>
          ^instantiate-obj2.instantiation.id <obj2>
          -^instantiation)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^handle <handle>
       ^2 <obj2>)
}

# state predicate
sp {instantiate-task-operator*propose*instantiate-task-argument*predicate*state
  (state <s> ^name instantiate-task-operator
             ^instantiate-task-argument <arg>)
  (<arg> ^arg-type predicate
         ^general-arg-rep.type state
         ^instantiate-handle.instantiation.handle <handle>
         ^instantiate-obj1.instantiation.id <obj1>
         -^instantiation)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type state
       ^handle <handle>
       ^1 <obj1>)
}

# relation predicate
sp {instantiate-task-operator*propose*instantiate-task-argument*predicate*relation
  (state <s> ^name instantiate-task-operator
             ^instantiate-task-argument <arg>)
  (<arg> ^arg-type predicate
         ^general-arg-rep.type relation
         ^instantiate-handle.instantiation.handle <handle>
         ^instantiate-obj1.instantiation.id <obj1>
         ^instantiate-obj2.instantiation.id <obj2>
         -^instantiation)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
}


### Apply instantiate-task-argument, create the instantiateed instantiation structure

# state predicate
sp {instantiate-task-operator*apply*instantiate-task-argument*predicate*state*create*instantiation
  (state <s> ^name instantiate-task-operator
             ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type state
       ^handle <handle>
       ^1 <obj1>)
-->
  (<arg> ^instantiation <i>)
  (<i> ^type state
       ^handle <handle>
       ^1 <obj1>)
}

# relation predicate
sp {instantiate-task-operator*apply*instantiate-task-argument*predicate*relation*create*instantiation
  (state <s> ^name instantiate-task-operator
             ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
-->
  (<arg> ^instantiation <i>)
  (<i> ^type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
}



# predicate argument (partial)
sp {instantiate-task-operator*apply*instantiate-task-argument*predicate*partial*create*instantiation
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^handle <pred-handle>
       ^2 <obj2>)
-->
  (<arg> ^instantiation <i>)
  (<i> ^arg-type predicate
       ^handle <pred-handle>
       ^2 <obj2>)
}
