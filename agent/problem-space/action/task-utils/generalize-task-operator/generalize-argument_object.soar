#################### generalize-task-argument object ########################
# Goes from a specific object instantiation to creating a generalized representation

# match-type procedural - the object matches one on the reference-task-op
sp {generalize-task-operator*propose*generalize-task-argument*object*procedural*level1
  (state <s> ^name generalize-task-operator
             ^generalize-task-argument <arg>
             ^reference-tcn-proc.<arg-name> <parg>
             ^reference-task-op.<arg-name>.id <obj>)
  (<arg> ^instantiation <i>
          -^general-arg-rep)
  (<i> ^arg-type object
       ^id <obj>)
  (<parg> ^arg-type object
          ^id <obj-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
}

sp {generalize-task-operator*propose*generalize-task-argument*object*procedural*level2
  (state <s> ^name generalize-task-operator
             ^generalize-task-argument <arg>
             ^reference-tcn-proc.<arg-name> <parg>
             ^reference-task-op.<arg-name>.{2} <obj>)
  (<arg> ^instantiation <i>
        -^general-arg-rep)
  (<i> ^arg-type object
       ^id <obj>)
  (<parg> ^arg-type predicate
          ^2 <obj-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
}

sp {generalize-task-operator*apply*generalize-task-argument*object*procedural
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
-->
  (<arg> ^general-arg-rep <gen>)
  (<gen> ^arg-type object
         ^id <obj-slot>)
}

# match-type default - copy the predicates onto a default rep
sp {generalize-task-operator*propose*generalize-task-argument*object*default
  (state <s> ^name generalize-task-operator
             ^generalize-task-argument <arg>)
  (<arg> ^instantiation <i>
        -^general-arg-rep)
  (<i> ^arg-type object
       ^id <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instantiation <obj>
       ^predicates <preds>)
}

sp {generalize-task-operator*elaborate*generalize-task-argument*object*default*predicates*sentence
  (state <s> ^name generalize-task-operator
             ^task-concept-network.handle << say1 ask1 >>
             ^operator <o> +)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instantiation.predicates <preds>
       ^predicates <def-preds>)
  (<preds> ^sentence <sent>)
-->
  (<def-preds> ^sentence <sent>)
}

sp {generalize-task-operator*elaborate*generalize-task-argument*reference-info
   (state <s> ^name generalize-task-operator
              ^operator <o> +)
   (<o> ^name generalize-task-argument
        ^argument <arg>
        ^arg-type object)
   (<arg> ^instantiation.reference-info <info>)
-->
   (<o> ^reference-info <info>)
}

sp {generalize-task-operator*elaborate*generalize-task-argument*object*predicates*from*constraints
  (state <s> ^name generalize-task-operator
             ^operator <o> +)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instantiation.predicates <preds>
       ^predicates <def-preds>
       ^reference-info.constraint <c>)
   (<c> ^handle <pred-handle> ^item-type predicate ^property.handle <prop-handle>)
   (<preds> ^<prop-handle> <pred-handle>)
-->
  (<def-preds> ^<prop-handle> <pred-handle>)
}

sp {generalize-task-operator*elaborate*generalize-task-argument*object*default*predicates
  (state <s> ^name generalize-task-operator
             ^operator <o> +)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instantiation.predicates <preds>
       ^predicates <def-preds>)
  (<preds> ^{ <prop-handle> << modifier1 category spatial-shape >> } <pred-handle>)
  #(<preds> ^{ <prop-handle> << modifier1 color shape size category property spatial-shape >> } <pred-handle>)
-->
  (<def-preds> ^<prop-handle> <pred-handle>)
}

sp {generalize-task-operator*elaborate*generalize-task-argument*object*default*predicates*no*reference-info
  (state <s> ^name generalize-task-operator
             ^operator <o> +)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instantiation.predicates <preds>
      -^reference-info
       ^predicates <def-preds>)
  (<preds> ^{ <prop-handle> << name shape property >> } <pred-handle>)
-->
  (<def-preds> ^<prop-handle> <pred-handle>)
}

# ENUMERATE: 1-5 predicates

sp {generalize-task-operator*apply*generalize-task-argument*object*default*1*predicate
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>             } <pred1>
               -^{ <prop2> <> <prop1> } <pred2>)
-->
  (<arg> ^general-arg-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>)
}

sp {generalize-task-operator*apply*generalize-task-argument*object*default*2*predicates
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               -^{ <prop3> <> <prop2> <> <prop1> } <pred3>)
-->
  (<arg> ^general-arg-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>)
}

sp {generalize-task-operator*apply*generalize-task-argument*object*default*3*predicates
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>
               -^{ <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred4>)
-->
  (<arg> ^general-arg-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>)
}

sp {generalize-task-operator*apply*generalize-task-argument*object*default*4*predicates
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>
               ^{ <prop4> > <prop3> } <pred4>
               -^{ <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred5>)
-->
  (<arg> ^general-arg-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>
         ^<prop4> <pred4>)
}

sp {generalize-task-operator*apply*generalize-task-argument*object*default*5*predicates
  (state <s> ^name generalize-task-operator
             ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>
               ^{ <prop4> > <prop3> } <pred4>
               ^{ <prop5> > <prop4> } <pred5>
               -^{ <prop6> <> <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred6>)
-->
  (<arg> ^general-arg-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>
         ^<prop4> <pred4>
         ^<prop5> <pred5>)
}

