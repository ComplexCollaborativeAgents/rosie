#sp {subproblem*search*selection*apply*init-current-evaluation-depth*max
#   (state <s> ^name selection
#              ^problem-space.subproblem search
#              ^top-selection true
#              ^superstate.desired.pred-count <any>
#              ^operator <o>
#              ^agent-params.subtask-search-depth <d>)
#   (<o> ^name init-current-evaluation-depth)
#-->
#   # Change to this set the iterative-deepening max search depth
#   (<s> ^max-evaluation-depth <d>)
#}

sp {subproblem*search*selection*apply*init-current-evaluation-depth*phase*1
   (state <s> ^name selection
              ^problem-space <ps>
              ^top-selection true
              ^operator.name init-current-evaluation-depth
              ^superstate.desired.pred-count <any>
              ^agent-params.subtask-search-phase1-depth <n>)
   (<ps> ^subproblem search
         ^search-phase 1)
-->
   # Change to this set the iterative-deepening max search depth
   (<s> ^max-evaluation-depth <n>)
}

sp {subproblem*search*selection*apply*init-current-evaluation-depth*phase*2
   (state <s> ^name selection
              ^problem-space <ps>
              ^top-selection true
              ^operator.name init-current-evaluation-depth
              ^superstate.desired.pred-count <any>
              ^agent-params.subtask-search-phase2-depth <n>)
   (<ps> ^subproblem search
         ^search-phase 2)
-->
   # Change to this set the iterative-deepening max search depth
   (<s> ^max-evaluation-depth <n>)
}

sp {subproblem*search*selection*apply*init-current-evaluation-depth*zero*no*goal
   (state <s> ^name selection
              ^problem-space.subproblem search
              ^top-selection true
             -^superstate.desired.pred-count
              ^operator <o>)
   (<o> ^name init-current-evaluation-depth)
-->
   (<s> ^max-evaluation-depth 0)
}
