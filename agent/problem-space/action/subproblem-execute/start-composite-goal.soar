#### If the instructor gives the command 'Complete the following tasks'
# The agent will create a new composite goal node in the goal graph
#   which will represent one or more subtasks

sp {subproblem*execute*propose*start-composite-goal*new-subtask*complete*following*tasks
   (state <s> ^problem-space.subproblem execute
              ^current-task-segment <seg>
              ^task-operator <task-op>)
   (<seg> ^new-subtask <subtask-op>)
   (<subtask-op> ^task-handle complete1
                 ^arg1.id.predicates <preds>)
   (<preds> ^modifier1 following1
            ^category tasks1)
   (<task-op> ^task-handle <task-h>
              ^current-goal <goal-h>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name start-composite-goal
        ^task-handle <task-h>
        ^current-goal <goal-h>)
}

### Substate

sp {start-composite-goal*elaborate*params*superoperator
   (state <s> ^name start-composite-goal
              ^superstate.operator <o>)
   (<o> ^name start-composite-goal
        ^task-handle <task-h>
        ^current-goal <goal-h>)
-->
   (<s> ^task-handle <task-h>
        ^current-goal-handle <goal-h>
        ^default-problem-space no)
}

sp {start-composite-goal*propose*add-node-to-goal-graph*composite
   (state <s> ^name start-composite-goal
              ^task-handle <task-h>
              ^current-goal-handle <goal-h>
             -^added-node)
-->
   (<s> ^operator <o> + =)
   (<o> ^name add-node-to-goal-graph
        ^type composite
        ^task-handle <task-h>
        ^after <goal-h>)
}

# Report an task-event as having been performed if the task was successful
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*report*performed*task-event
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <segment>
              ^top-state.interaction <interaction>)
   (<segment> ^status success
              ^task-operator.task-handle <task-handle>)
   (<interaction> ^stack.segment.purpose.satisfaction.task-event <e>
                  ^status <status>)
   (<e> ^type completed-task
        ^task-handle <task-handle>)
-->
   (<status> ^performed.task-event <e>)
}

# Remove the new-subtask from the current-task-segment
#   and pop the segment on the interaction stack
sp {start-composite-goal*apply*add-node-to-goal-graph*composite
   (state <s> ^name start-composite-goal
              ^operator <o>
              ^superstate.current-task-segment <seg>
              ^top-state.interaction <int>)
   (<o> ^name add-node-to-goal-graph
        ^type composite
        ^add-node-result <res>)
   (<seg> ^new-subtask <sub>)
   (<int> ^stack.segment.purpose.satisfaction.task-event <e>
          ^status <status>)
   (<e> ^type completed-task
        ^task-handle complete1)
-->
   (<seg> ^new-subtask <sub> -
          ^learning-composite-goal true)
   (<status> ^performed.task-event <e>)
}

