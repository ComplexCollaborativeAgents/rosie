sp {subproblem*execute*propose*handle-complete-command*new-subtask
   (state <s> ^problem-space.subproblem execute
              ^current-task-segment <seg>)
   (<seg> ^new-subtask <subtask-op>)
   (<subtask-op> ^task-handle complete1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-complete-command
        ^complete-operator <subtask-op>)
}

#### SUBSTATE SETUP

# no default problem space
sp {handle-complete-command*elaborate*default-problem-space*no
   (state <s> ^name handle-complete-command)
-->
   (<s> ^default-problem-space no)
}

# elaborate the complete-operator from the superoperator    
sp {handle-complete-command*elaborate*complete-operator*superoperator
   (state <s> ^name handle-complete-command
              ^superstate.operator.complete-operator <comp-op>)
-->
   (<s> ^complete-operator <comp-op>)
}

# elaborate the superstate task operator
sp {handle-complete-command*elaborate*task-operator*superstate
   (state <s> ^name handle-complete-command
              ^superstate.task-operator <task-op>)
-->
   (<s> ^task-operator <task-op>)
}

# elaborate the current-goal-handle
sp {handle-complete-command*elaborate*current-goal-handle*from*current-task-segment
   (state <s> ^name handle-complete-command
              ^superstate.current-task-segment.current-goal.handle <goal-h>)
-->
   (<s> ^current-goal-handle <goal-h>)
}


##### Add the complete node to the goal graph

sp {handle-complete-command*propose*add-node-to-goal-graph
   (state <s> ^name handle-complete-command
              ^task-operator <task-op>
              ^current-goal-handle <goal-h>
             -^created-complete-goal)
   (<task-op> ^task-handle <task-h>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name add-node-to-goal-graph
        ^type composite
        ^task-handle <task-h>
        ^after <goal-h>)
}

# Elaborate any conditions
sp {handle-complete-command*elaborate*add-node-to-goal-graph*complete-conditions
   (state <s> ^name handle-complete-command
              ^operator <o> +
              ^complete-conditions <conds>)
   (<o> ^name add-node-to-goal-graph)
-->
   (<o> ^complete-conditions <conds>)
}

# If we are current learning a complete block, add the handle of the complete node to the operator
sp {handle-complete-command*elaborate*add-node-to-goal-graph*learning-complete-block
   (state <s> ^name handle-complete-command
              ^operator <o> +
              ^learning-complete-block <goal-h>)
   (<o> ^name add-node-to-goal-graph)
-->
   (<o> ^learning-complete-block <goal-h>)
}

sp {handle-complete-command*apply*add-node-to-goal-graph*complete
   (state <s> ^name handle-complete-command
              ^operator <o>)
   (<o> ^name add-node-to-goal-graph
        ^type complete
        ^add-node-result <node-h>)
-->
   (<s> ^created-complete-goal <node-h>)
}

sp {handle-complete-command*apply*add-node-to-goal-graph*mark*complete-block
   (state <s> ^name handle-complete-command
              ^operator <o>)
   (<o> ^name add-node-to-goal-graph
        ^type complete
        ^learning-complete-block <node-h>
        ^add-node-result <node-h>)
-->
   (<s> ^complete-block <node-h>)
}

##### complete-handle-complete-command

sp {handle-complete-command*propose*complete-handle-complete-command
   (state <s> ^name handle-complete-command
              ^created-complete-goal)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-handle-complete-command)
}

# Remove the new-subtask from the current task segment
sp {handle-complete-command*apply*complete-handle-complete-command*remove*new-subtask
   (state <s> ^name handle-complete-command
              ^operator.name complete-handle-complete-command
              ^superstate.current-task-segment <seg>
              ^complete-command <cmd>
              ^top-state <ts>)
   (<seg> ^new-subtask <cmd>)
-->
   (<seg> ^new-subtask <cmd> -)
}

# Mark the command as having been executed via the interaction status
sp {handle-complete-command*apply*complete-handle-complete-command*terminate-segment
   (state <s> ^name handle-complete-command
              ^operator.name complete-handle-complete-command
              ^complete-command <cmd>
              ^top-state.interaction <int>)
   (<int> ^stack.segment.purpose <p>
          ^changes <chgs>)
   (<p> ^type execute-task
        ^parameters.task-operator <cmd>)
-->
   (<chgs> ^terminate-segment true)
}

# If this is the first complete command, mark the segment as learning-complete-block
sp {handle-complete-command*apply*complete-handle-complete-command*start*learning-complete-block
   (state <s> ^name handle-complete-command
              ^operator.name complete-handle-complete-command
              ^created-complete-goal <node-h>
             -^complete-block <node-h>
              ^superstate.current-task-segment <seg>
              ^top-state <ts>)
-->
   (<seg> ^learning-complete-block <node-h>)
}

sp {handle-complete-command*apply*complete-handle-complete-command*complete*learning-complete-block
   (state <s> ^name handle-complete-command
              ^operator.name complete-handle-complete-command
              ^created-complete-goal <node-h>
              ^complete-block <node-h>
              ^superstate.current-task-segment <seg>
              ^top-state <ts>)
   (<seg> ^learning-complete-block <node-h>)
-->
   (<seg> ^learning-complete-block <node-h> -)
}

#### If the instructor gives the command 'Complete the following tasks'
# The agent will add the flag ^begin-composite-goal true to the current-task-segment
# This operator will see the flag and create a new goal in the goal-graph 
#   which will represent one or more subtasks

# Uses the add-node-to-goal-graph operator in task-utils

sp {subproblem*execute*propose*add-node-to-goal-graph*composite
   (state <s> ^problem-space.subproblem execute
              ^task-operator <task-op>
              ^current-task-segment <seg>)
   (<task-op> ^task-handle <task-h>)
   (<seg> ^new-subtask <subtask-op>)
   (<subtask-op> ^task-handle complete1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name add-node-to-goal-graph
        ^type composite
        ^task-handle <task-h>
        ^after <goal-h>)
}

sp {subproblem*execute*apply*add-node-to-goal-graph*composite
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^current-task-segment <seg>)
   (<o> ^name add-node-to-goal-graph
        ^type composite
        ^add-node-result <node-h>)
   (<seg> ^begin-composite-goal true)
-->
   (<seg> ^begin-composite-goal true -
          ^learning-composite-goal true)
}
