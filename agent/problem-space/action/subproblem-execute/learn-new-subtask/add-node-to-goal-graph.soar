# If the subtask was given when the agent didn't have a goal
# (Finished with the current goal and doesn't have a next one)
# Then add a new procedural goal onto the goal-graph after the current goal

sp {learn-new-subtask*propose*add-node-to-goal-graph*subtask
   (state <s> ^name learn-new-subtask
              ^create-subtask-goal true
              ^task-operator.task-handle <task-h>
              ^subtask-handle <sub-h>
              ^current-goal-id.handle <goal-h>
             -^created-subtask-goal)
-->
   (<s> ^operator <o> + =)
   (<o> ^name add-node-to-goal-graph
        ^type subtask
        ^task-handle <task-h>
        ^subtask-handle <sub-h>
        ^after <goal-h>)
}

sp {learn-new-subtask*elaborate*add-node-to-goal-graph*goal-conditions
   (state <s> ^name learn-new-subtask
              ^operator <o> +
              ^generalize-task-argument <arg>)
   (<o> ^name add-node-to-goal-graph
        ^type subtask)
   (<arg> ^arg-type predicate-set
          ^type task-conditions
          ^general-arg-rep <conds>)
-->
   (<o> ^goal-conditions <conds>)
}

sp {learn-new-subtask*apply*add-node-to-goal-graph*subtask
   (state <s> ^name learn-new-subtask
              ^operator <o>)
   (<o> ^name add-node-to-goal-graph
        ^type subtask
        ^add-node-result <node-h>)
-->
   (<s> ^created-subtask-goal <node-h>)
}

sp {learn-new-subtask*apply*add-node-to-goal-graph*mark*subtask*subgoal-specific
   (state <s> ^name learn-new-subtask
              ^operator <o>
              ^generalized-subtask <sub>)
   (<o> ^name add-node-to-goal-graph
        ^type subtask
        ^add-node-result <node-h>)
-->
   (<sub> ^subgoal-specific <node-h>)
}

