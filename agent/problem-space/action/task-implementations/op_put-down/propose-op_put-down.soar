################### propose op_put-down1 ######################

# put-down on surface (e.g. table, countertop)
sp {problem-space*action*propose*op_put-down1*on1*surface1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.is-grabbed1 grabbed1)
   (<obj2> ^predicates.affordance1 surface1)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle on1
           ^2 <obj2>)
}

# put-down inside receptacle without a door (e.g. sink)
sp {problem-space*action*propose*op_put-down1*in1*receptacle*no*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.is-grabbed1 grabbed1)
   (<obj2> ^predicates <obj2-preds>)
   (<obj2-preds> ^affordance1 receptacle1
                -^<prop> << open2 closed2 >>)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

sp {problem-space*action*propose*op_put-down1*in1*open*receptacle
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.is-grabbed1 grabbed1)
   (<obj2> ^predicates <obj2-preds>)
   (<obj2-preds> ^affordance1 receptacle1
                 ^<prop> open2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

# put-down in a location
sp {problem-space*action*propose*op_put-down1*in*location
   (state <s> ^problem-space <ps>
              ^world.objects <objs>)
   (<objs> ^object <obj> <loc>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.is-grabbed1 grabbed1)
   (<loc> ^predicates.category location)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <loc>)
}

### propose put-down with goal predicate
sp {problem-space*action*propose*op_put-down1*on*block
   (state <s> ^problem-space <ps>
              ^world.objects <objs>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<objs> ^object <obj1> { <obj2> <> <obj1> })
   (<obj1> ^predicates.is-grabbed1 grabbed1)
   (<obj2> ^predicates.category block)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_put-down1
        ^item-type task-operator
        ^task-handle put-down1
        ^perform multple
        ^arg1 <arg1>
        ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type partial-predicate
           ^handle on1
           ^2 <obj2>)
}

