### Say the message via the interaction stack ###

sp {op_say1*propose*send-say-command*no*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
             -^person)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-say-command
        ^item-type command-operator
        ^command-name say-command
        ^object <obj>)
}

sp {op_say1*propose*send-say-command*with*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
              ^person <person>)
   (<person> ^predicates.is-visible1 visible1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-say-command
        ^item-type command-operator
        ^command-name say-command
        ^object <obj>
        ^person <person>)
}

### model send-say-command ###

# Add the heard predicate if saying to a person
# Note: we also do this if executing the task externally

sp {op_say1*internal*apply*send-say-command*add*heard*predicate
   (state <s> ^name op_say1
              ^problem-space.execution-type << internal external >>
              ^operator <o>
              ^world.predicates.predicate <heard>)
   (<o> ^name send-say-command
        ^object <obj>
        ^person <person>)
   (<person> ^predicates.category person)
   (<heard> ^handle heard2)
  -{(<heard> ^instance <i>)
    (<i> ^1 <person> ^2 <obj>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <obj>)
}

### send-say-command (all domains) ###

# Send the say command for a sentence object
sp {op_say*external*apply*say-message*send*message
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^top-state.interaction.changes <changes>
              ^current-task-segment <seg>)
   (<o> ^name say-message
        ^command-name <cmd-name>
        ^sentence-obj.predicates.sentence <msg>)
-->
   (<changes> ^outgoing-message <send>)
   (<send> ^type say-sentence
           ^complete-message true
           ^fields.sentence <msg>)

   (<seg> ^<cmd-name> <send-msg>)
   (<send-msg> ^item-type output-command
               ^status success
               ^outgoing-message <send>)
}

# Send the say command for a non-sentence object (describes object)
sp {op_say*external*apply*say-message*send*message*object
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^top-state.interaction.changes <changes>
              ^current-task-segment <seg>)
   (<o> ^name say-message
        ^command-name <cmd-name>
        ^sentence-obj <obj>)
   (<obj> -^predicates.sentence <msg>)
-->
   (<changes> ^outgoing-message <send>)
   (<send> ^type agent-object-description
           ^complete-message true
           ^fields.object <obj>)

   (<seg> ^<cmd-name> <send-msg>)
   (<send-msg> ^item-type output-command
               ^status success
               ^outgoing-message <send>)
}
