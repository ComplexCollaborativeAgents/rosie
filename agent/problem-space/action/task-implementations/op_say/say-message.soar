### Send the message to the interaction stack as an outgoing-message ###

sp {op_say*propose*say-message*no*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
             -^person)
-->
   (<s> ^operator <o> + =)
   (<o> ^name say-message
        ^item-type command-operator
        ^command-name send-message
        ^sentence-obj <obj>)
}

sp {op_say*propose*say-message*person
   (state <s> ^name op_say1
              ^sentence-obj <obj>
              ^person <person>)
   (<person> ^predicates.is-visible1 visible1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name say-message
        ^item-type command-operator
        ^command-name send-message
        ^sentence-obj <obj>
        ^person <person>)
}

### model say-message ###

sp {op_say1*internal*say-message*best-preference
   (state <s> ^name op_say1
              ^problem-space.execution-type internal
              ^operator <o> +)
   (<o> ^name say-message)
-->
   (<s> ^operator <o> + >)
}

sp {op_say1*internal*apply*say-message*add*heard*predicate
   (state <s> ^name op_say1
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <heard>)
   (<o> ^name say-message
        ^sentence-obj <msg>
        ^person <person>)
   (<heard> ^handle heard2)
  -{(<heard> ^instance <i>)
    (<i> ^1 <person> ^2 <msg>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <msg>)
}


### execute say-message (all domains) ###

sp {op_say*external*apply*say-message*send*message
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^top-state.interaction.changes <changes>
              ^current-task-segment <seg>)
   (<o> ^name say-message
        ^command-name <cmd-name>
        ^sentence-obj.predicates.sentence <msg>)
-->
   (<changes> ^outgoing-message <send>)
   (<send> ^type say-sentence
           ^complete-message true
           ^fields.sentence <msg>)
   (<seg> ^<cmd-name> <send-msg>)
   (<send-msg> ^status success)
}

sp {op_say*external*apply*say-message*send*message*object
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^operator <o>
              ^top-state.interaction.changes <changes>
              ^current-task-segment <seg>)
   (<o> ^name say-message
        ^command-name <cmd-name>
        ^sentence-obj <obj>)
   (<obj> -^predicates.sentence <msg>)
-->
   (<changes> ^outgoing-message <send>)
   (<send> ^type agent-object-description
           ^complete-message true
           ^fields.object <obj>)
   (<seg> ^<cmd-name> <send-msg>)
   (<send-msg> ^status success)
}

sp {op_say1*external*apply*say-message*add*heard*predicate
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^sentence-obj <msg>
              ^operator <o>
              ^world.predicates.predicate <heard>)
   (<o> ^name say-message
        ^person <person>)
   (<heard> ^handle heard2)
  -{(<heard> ^instance <i>)
    (<i> ^1 <person> ^2 <msg>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <msg>)
}

