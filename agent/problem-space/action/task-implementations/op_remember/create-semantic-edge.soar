sp {op_remember1*ltm*propose*create-semantic-edge
   (state <s> ^name op_remember1
              ^memory-type ltm
              ^problem-space.execution-type external
              ^query-object-workspace <wsh> <wst>
              ^edge-object <edge>
             -^stored-link true)
   (<wsh> ^type head-object
          ^ltm-object <head>)
   (<wst> ^type tail-object
          ^ltm-object <tail>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-semantic-edge
        ^head <head>
        ^edge <edge>
        ^tail <tail>
        ^semantic-edge <se>)
}

sp {op_remember1*ltm*apply*create-semantic-edge*create*semantic-edge*store
   (state <s> ^name op_remember1
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name create-semantic-edge
        ^head <head>
        ^semantic-edge <se>
        ^tail <tail>)
-->
   (<head> ^semantic-edge <se>)
   (<se> ^tail <tail>)

   (<cmd> ^store <head> <se>)
}

sp {op_remember1*ltm*apply*create-semantic-edge*copy*predicates*to*semantic-edge
   (state <s> ^name op_remember1
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name create-semantic-edge
        ^semantic-edge <se>
        ^edge.predicates <preds>)
   (<preds> ^<prop> <pred>)
-->
   (<se> ^<prop> <pred>)
}

sp {op_remember1*ltm*apply*create-semantic-edge*cleanup*smem
   (state <s> ^name op_remember1
              ^operator <o>
              ^smem <smem>)
   (<o> ^name create-semantic-edge
        ^head <head>
        ^semantic-edge <se>)
   (<smem> ^command <cmd>
           ^result.success <head>)
   (<cmd> ^store <head> <se>)
-->
   (<s> ^stored-link true)
   (<cmd> ^store <head> -
          ^store <se> -)
}

sp {op_remember1*apply*create-semantic-edge*mark*remember-command*complete
   (state <s> ^name op_remember1
              ^operator <o>
              ^smem.result.success <head>
              ^current-task-segment <seg>)
   (<o> ^name create-semantic-edge
        ^head <head>)
-->
   (<seg> ^remember-command.status success)
}

