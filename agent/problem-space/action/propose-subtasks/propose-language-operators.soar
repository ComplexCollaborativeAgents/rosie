## op_say
sp {action*task-substate*propose*op_say1*message
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object <person>
              ^world.predicates.predicate <heard>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates <objpreds>)
   (<objpreds> ^category message ^sentence <any>)
   (<person> ^predicates <perpreds>)
   (<perpreds> ^category person ^visible true)
   (<heard> ^handle heard2)
   -{(<heard> ^instance <i>)
     (<i> ^1 <person> ^2 <obj>)}
-->
   (<s> ^operator <op> +)
   (<op> ^name op_say1
         ^task-handle say1
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type predicate
           ^handle to1
           ^2 <person>)
}

#sp {action*task-substate*propose*op_say1*message*current-task-segment
#   (state <s> ^problem-space <ps>
#              ^current-task-segment.task-operator <ex-op>
#              -^world.objects.object <obj>)
#   (<ps> ^name action
#         ^propose-subtasks true)
#   (<ex-op> ^task-handle say1
#            ^arg1.id <obj>)
#   (<obj> ^predicates.category message)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name op_say1
#         ^task-handle say1
#         ^arg1 <arg1>)
#   (<arg1> ^arg-type object
#           ^id <obj>)
#}
#
#sp {action*task-substate*propose*op_ask1*message*current-task-segment
#   (state <s> ^problem-space <ps>
#              ^current-task-segment.task-operator <ex-op>
#              -^world.objects.object <obj>)
#   (<ps> ^name action
#         ^propose-subtasks true)
#   (<ex-op> ^task-handle ask1
#            ^arg1.id <obj>)
#   (<obj> ^predicates.category message)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name op_ask1
#         ^task-handle ask1
#         ^arg1 <arg1>)
#   (<arg1> ^arg-type object
#           ^id <obj>)
#}

