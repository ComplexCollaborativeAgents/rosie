###############################################################
#####                    predicate                        #####


#### Expand the predicate to ground the sub-parts

# state predicate
sp {ground-action*ground-argument*expand*predicate*state
  (state <s> ^name ground-action
             ^ground-argument <arg>)
  (<arg> ^arg-type predicate
         ^generalized-rep <gen>)
  (<gen> ^type state
         ^id <pred-slot>
         ^1 <obj1-slot>)
-->
  (<s> ^ground-argument <gpred> <gobj1>)

  (<gpred> ^generalized-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)

  (<gobj1> ^generalized-rep <gen-obj1>)
  (<gen-obj1> ^arg-type object
              ^id <obj1-slot>)

  (<arg> ^ground-handle <gpred>
         ^ground-obj1 <gobj1>)
}

# relation predicate
sp {ground-action*ground-argument*expand*predicate*relation
  (state <s> ^name ground-action
             ^ground-argument <arg>)
  (<arg> ^arg-type predicate
         ^generalized-rep <gen>)
  (<gen> ^type relation
         ^id <pred-slot>
         ^1 <obj1-slot>
         ^2 <obj2-slot>)
-->
  (<s> ^ground-argument <gpred> <gobj1> <gobj2>)

  (<gpred> ^generalized-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)

  (<gobj1> ^generalized-rep <gen-obj1>)
  (<gen-obj1> ^arg-type object
              ^id <obj1-slot>)

  (<gobj2> ^generalized-rep <gen-obj2>)
  (<gen-obj2> ^arg-type object
              ^id <obj2-slot>)

  (<arg> ^ground-handle <gpred>
         ^ground-obj1 <gobj1>
         ^ground-obj2 <gobj2>)
}

# predicate (from an argument)
sp {ground-action*ground-argument*expand*predicate
  (state <s> ^name ground-action
             ^ground-argument <arg>)
  (<arg> ^generalized-rep <gen>)
  (<gen> ^arg-type predicate
         ^id <pred-slot>
         ^2 <obj2-slot>)
-->
  (<s> ^ground-argument <gpred> <gobj2>)
  (<gpred> ^generalized-rep <gen-pred>)
  (<gen-pred> ^arg-type predicate-handle
              ^id <pred-slot>)
  (<gobj2> ^generalized-rep <gen-obj2>)
  (<gen-obj2> ^arg-type object
              ^id <obj2-slot>)
  (<arg> ^ground-handle <gpred>
         ^ground-obj2 <gobj2>)
}

# if the predicate is abstract, mark the object as abstract
sp {ground-action*elaborate*ground-argument*predicate*object*arg-status*abstract
  (state <s> ^name ground-action
             ^ground-argument <parg>)
  (<parg> ^generalized-rep.arg-status abstract
          ^ground-obj2.generalized-rep <rep>)
-->
  (<rep> ^arg-status abstract)
}

##### Propose ground-argument for the predicate when the subparts have been grounded

# predicate argument
sp {ground-action*propose*ground-argument*predicate*partial
   (state <s> ^name ground-action
              ^ground-argument <arg>)
   (<arg> ^generalized-rep.arg-type predicate
          ^ground-handle.instance.handle <handle>
          ^ground-obj2.instance.id <obj2>
          -^instance)
-->
  (<s> ^operator <o> + =)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^handle <handle>
       ^2 <obj2>)
}

# state predicate
sp {ground-action*propose*ground-argument*predicate*state
  (state <s> ^name ground-action
             ^ground-argument <arg>)
  (<arg> ^arg-type predicate
         ^generalized-rep.type state
         ^ground-handle.instance.handle <handle>
         ^ground-obj1.instance.id <obj1>
         -^instance)
-->
  (<s> ^operator <o> + =)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type state
       ^handle <handle>
       ^1 <obj1>)
}

# relation predicate
sp {ground-action*propose*ground-argument*predicate*relation
  (state <s> ^name ground-action
             ^ground-argument <arg>)
  (<arg> ^arg-type predicate
         ^generalized-rep.type relation
         ^ground-handle.instance.handle <handle>
         ^ground-obj1.instance.id <obj1>
         ^ground-obj2.instance.id <obj2>
         -^instance)
-->
  (<s> ^operator <o> + =)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
}


### Apply ground-argument, create the grounded instance structure

# state predicate
sp {ground-action*apply*ground-argument*predicate*state*create*instance
  (state <s> ^name ground-action
             ^operator <o>)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type state
       ^handle <handle>
       ^1 <obj1>)
-->
  (<arg> ^instance <i>)
  (<i> ^type state
       ^handle <handle>
       ^1 <obj1>)
}

# relation predicate
sp {ground-action*apply*ground-argument*predicate*relation*create*instance
  (state <s> ^name ground-action
             ^operator <o>)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
-->
  (<arg> ^instance <i>)
  (<i> ^type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
}



# predicate argument (partial)
sp {ground-action*apply*ground-argument*predicate*partial*create*instance
  (state <s> ^operator <o>)
  (<o> ^name ground-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^handle <pred-handle>
       ^2 <obj2>)
-->
  (<arg> ^instance <i>)
  (<i> ^arg-type predicate
       ^handle <pred-handle>
       ^2 <obj2>)
}
