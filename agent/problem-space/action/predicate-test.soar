####################### predicate-test ###########################
#
# These rules will check if an predicate-test on the state is satisfed
#
# They fire if an predicate-test structure is on the state
#   (state <s> ^predicate-test <pt>)
#   (<pt> ^prediate <pred>)  # Can be more than 1 predicate
#   (<pred> ^type << state relation >>
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>) # may have 2 or more arguments if a relation
# Will elaborate each predicate with ^satisfied true, 
#   and elaborates the predicate-test with ^satisfied true if all predicates are satisfied

#   Also expects the following on the state: 
#     world

# Elaborate the desired goal as a predicate-test
sp {problem-space*action*elaborate*predicate-test*from*desired
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^pred-count <c>)
-->
   (<s> ^predicate-test <d>)
}

# By default, elaborated from the task-operator
sp {problem-space*action*elaborate*predicate-test*from*task-operator*until-clause
   (state <s> ^problem-space.name action
              ^task-operator.until-clause <pt>)
-->
   (<s> ^predicate-test <pt>)
}

sp {problem-space*action*elaborate*predicate-test*from*task-operator*after-clause
   (state <s> ^problem-space.name action
              ^task-operator.after-clause <pt>)
-->
   (<s> ^predicate-test <pt>)
}


### Start or Terminal goal nodes are always satisfied

sp {problem-space*action*elaborate*predicate-test*start-goal*satisfied
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^item-type start-goal)
-->
   (<des> ^satisfied true)
}

sp {problem-space*action*elaborate*predicate-test*terminal-goal*satisfied
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^item-type terminal-goal)
-->
   (<des> ^satisfied true)
}


############# Satisfying Different Predicate Types #################

# type = unary, a single predicate on an object
sp {problem-space*action*elaborate*predicate-test*state*predicate*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.objects.object <obj>)
   (<pred> ^type unary
           ^handle <pred-handle>
           ^property-handle <prop-handle>
           ^{1} <obj>)
   (<obj> ^predicates.<prop-handle> <pred-handle>)
-->
   (<pred> ^satisfied true)
}

# type = relation, a binary relation between two objects
sp {problem-space*action*elaborate*predicate-test*state*relation*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^world <world>)
   (<pt-pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1>
           ^2 <obj2>)
   (<world> ^predicates.predicate <pred>
            ^objects.object <obj1>
            ^objects.object <obj2>)
   (<pred> ^handle <pred-handle>
           ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
-->
   (<pt-pred> ^satisfied true)
}

# type = status, some status of the robot
sp {problem-space*action*elaborate*predicate-test*status*predicate*satisfied*current-location
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.robot.current-location <loc>)
   (<pred> ^type status
           ^name current-location
           ^1 <loc>)
-->
   (<pred> ^satisfied true)
}

sp {problem-space*action*elaborate*predicate-test*status*predicate*satisfied*current-waypoint
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.robot.current-waypoint <wp>)
   (<pred> ^type status
           ^name current-waypoint
           ^1 <wp>)
-->
   (<pred> ^satisfied true)
}

# type = duration, if the specified time has elapsed since the start-time
sp {problem-space*action*elaborate*predicate-test*duration*end-time*seconds
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit seconds
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> <num>))
}
sp {problem-space*action*elaborate*predicate-test*duration*end-time*minutes
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit minutes
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> (* <num> 60)))
}
sp {problem-space*action*elaborate*predicate-test*duration*end-time*hours
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit hours
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> (* <num> 3600)))
}

sp {problem-space*action*elaborate*predicate-test*duration*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock.elapsed-seconds <secs>)
   (<pt-pred> ^type duration
              ^end-time <= <secs>)
-->
   (<pt-pred> ^satisfied true)
}


# type = clocktime, the current time is after the given time
sp {problem-space*action*elaborate*predicate-test*clocktime*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock <clock>)
   (<pt-pred> ^type clocktime
              ^hour <hour>
              ^minute <min>)
   (<clock> ^hour >= <hour>
            ^minute >= <min>)
-->
   (<pt-pred> ^satisfied true)
}

# type = subtask, a specific subtask was performed
sp {problem-space*action*elaborate*predicate-test*subtask*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^task-operator.performed <sub-h>)
   (<p> ^type subtask
        ^subtask-handle <sub-h>)
-->
   (<p> ^satisfied true)
}

# type = execute-command, the given command has status success
sp {problem-space*action*elaborate*predicate-test*execute-command*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^current-task-segment.<cmd-name>.status << complete success succeeded >>)
   (<p> ^type execute-command
        ^command-name <cmd-name>)
-->
   (<p> ^satisfied true)
}

# type = has-argument, the task-operator has the given argument
sp {problem-space*action*elaborate*predicate-test*has-argument*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^task-operator.<arg-name> <arg>)
   (<p> ^type has-argument
        ^argument-name <arg-name>)
-->
   (<p> ^satisfied true)
}

# type = missing-argument, the task-operator does not have the given argument
sp {problem-space*action*elaborate*predicate-test*missing-argument*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^task-operator <task-op>)
   (<p> ^type missing-argument
        ^argument-name <arg-name>)
   (<task-op> -^<arg-name> <arg>)
-->
   (<p> ^satisfied true)
}



# @ENUMERATE 1-5 PREDICATE SET PREDICATES

# Note: pred-count 0 is possible, but usually only with custom goals that get marked satisfied manually

# predicate-test with 1 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*1*predicate
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^pred-count 1
         ^{1}.satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 2 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*2*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^pred-count 2
         ^{1}.satisfied true
         ^{2}.satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 3 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*3*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^pred-count 3
         ^{1}.satisfied true
         ^{2}.satisfied true
         ^{3}.satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 4 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*4*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^pred-count 3
         ^{1}.satisfied true
         ^{2}.satisfied true
         ^{3}.satisfied true
         ^{4}.satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 5 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*5*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^pred-count 5
         ^{1}.satisfied true
         ^{2}.satisfied true
         ^{3}.satisfied true
         ^{4}.satisfied true
         ^{5}.satisfied true)
-->
   (<pt> ^satisfied true)
}

 
 
