####################### desired ###########################
#
# These rules will check if a desired structure (goal) is satisfied
#
# They fire is a desired structure is on the state in an action problem-space
#   (state <s> ^desired <des>)
#   (<des> ^predicate <pred>)   # Can be more than 1 predicate
#   (<pred> ^type << state relation >>
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>) # may have 2 or more arguments if a relation
# Will elaborate each predicate with ^satisfied true, 
#   and elaborates the desired structure with ^satisfied true if all predicates are satisfied

#   Also expects the following on the state: 
#     world


# state predicate is satisfied if the unary predicate exists on the object
sp {action*elaborate*desired*state*predicate*satisfied
   (state <s> ^problem-space.name action
              ^desired.<pred-num> <p>)
   (<p> ^type state
        ^handle <pred-name>
        ^1 <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop-handle> <pred-name>)
-->
   (<p> ^satisfied true)
}

# Check if a visible predicate is satisfied (the object is visible)
sp {action*elaborate*desired*state*predicate*satisfied*visible
   (state <s> ^problem-space.name action
              ^desired.<pred-num> <p>
              ^world.objects.object <obj>)
   (<p> ^type state
        ^handle visible1
        ^{1} <obj>)
   (<obj> ^predicates.visible true)
-->
   (<p> ^satisfied true)
}

# relation predicate is satisfied if the relation exists as a predicate instance
sp {action*elaborate*desired*relation*predicate*satisfied
   (state <s> ^problem-space.name action
              ^desired.<pred-num> <p>
              ^world.predicates <preds>)
   (<p> ^type relation
        ^handle <rel-handle>
        ^1 <obj1>
        ^2 <obj2>)
   (<preds> ^predicate <pred>)
   (<pred> ^handle <rel-handle>
           ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
-->
   (<p> ^satisfied true)
}

# Check if a subtask predicate is satisfied
sp {action*elaborate*desired*subtask*predicate*satisfied
   (state <s> ^problem-space.name action
              ^desired.<pred-num> <p>
              ^task-operator.performed <sub-h>)
   (<p> ^type subtask
        ^subtask-handle <sub-h>)
-->
   (<p> ^satisfied true)
}

# ENUMERATE whether a subgoal is satisfied based on the number of predicates (1-5)
sp {action*elaborate*desired*subgoal*satisfied*1*predicates
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 1
          ^{1}.satisfied true)
-->
   (<des> ^satisfied true)
}

sp {action*elaborate*desired*subgoal*satisfied*2*predicates
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 2
          ^{1}.satisfied true
          ^{2}.satisfied true)
-->
   (<des> ^satisfied true)
}

sp {action*elaborate*desired*subgoal*satisfied*3*predicates
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 3
          ^{1}.satisfied true
          ^{2}.satisfied true
          ^{3}.satisfied true)
-->
   (<des> ^satisfied true)
}

sp {action*elaborate*desired*subgoal*satisfied*4*predicates
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 4
          ^{1}.satisfied true
          ^{2}.satisfied true
          ^{3}.satisfied true
          ^{4}.satisfied true)
-->
   (<des> ^satisfied true)
}

sp {action*elaborate*desired*subgoal*satisfied*5*predicates
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 5
          ^{1}.satisfied true
          ^{2}.satisfied true
          ^{3}.satisfied true
          ^{4}.satisfied true
          ^{5}.satisfied true)
-->
   (<des> ^satisfied true)
}

## ENUMERATE (1-5) whether a goal is satisfied based on the number of subgoals (1-5)
#sp {action*elaborate*desired*satisfied*1*subgoals
#   (state <s> ^problem-space.name action
#              ^desired <des>)
#   (<des> ^item-type task-goal
#          ^subgoal-count 1
#          ^{1}.satisfied true)
#-->
#   (<des> ^satisfied true)
#}
#
#sp {action*elaborate*desired*satisfied*2*subgoals
#   (state <s> ^problem-space.name action
#              ^desired <des>)
#   (<des> ^item-type task-goal
#          ^subgoal-count 2
#          ^{1}.satisfied true
#          ^{2}.satisfied true)
#-->
#   (<des> ^satisfied true)
#}
#
#sp {action*elaborate*desired*satisfied*3*subgoals
#   (state <s> ^problem-space.name action
#              ^desired <des>)
#   (<des> ^item-type task-goal
#          ^subgoal-count 3
#          ^{1}.satisfied true
#          ^{2}.satisfied true
#          ^{3}.satisfied true)
#-->
#   (<des> ^satisfied true)
#}
#
#sp {action*elaborate*desired*satisfied*4*subgoals
#   (state <s> ^problem-space.name action
#              ^desired <des>)
#   (<des> ^item-type task-goal
#          ^subgoal-count 4
#          ^{1}.satisfied true
#          ^{2}.satisfied true
#          ^{3}.satisfied true
#          ^{4}.satisfied true)
#-->
#   (<des> ^satisfied true)
#}
#
#sp {action*elaborate*desired*satisfied*5*subgoals
#   (state <s> ^problem-space.name action
#              ^desired <des>)
#   (<des> ^item-type task-goal
#          ^subgoal-count 5
#          ^{1}.satisfied true
#          ^{2}.satisfied true
#          ^{3}.satisfied true
#          ^{4}.satisfied true
#          ^{5}.satisfied true)
#-->
#   (<des> ^satisfied true)
#}
#
