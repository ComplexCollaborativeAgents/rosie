####################### predicate-test ###########################
#
# These rules will check if an predicate-test on the state is satisfed
#
# They fire if an predicate-test structure is on the state
#   (state <s> ^predicate-test <pt>)
#   (<pt> ^prediate <pred>)  # Can be more than 1 predicate
#   (<pred> ^type << state relation >>
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>) # may have 2 or more arguments if a relation
# Will elaborate each predicate with ^satisfied true, 
#   and elaborates the predicate-test with ^satisfied true if all predicates are satisfied

#   Also expects the following on the state: 
#     world


# By default, elaborated from the task-operator
sp {problem-space*action*elaborate*predicate-test*from*task-operator*until-clause
   (state <s> ^problem-space.name action
              ^task-operator.until-clause <pt>)
-->
   (<s> ^predicate-test <pt>)
}

# Check if a visible predicate is satisfied (the object is visible)
sp {problem-space*action*elaborate*predicate-test*state*predicate*satisfied*visible
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^world.objects.object <obj>)
   (<pt> ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^{1} <obj>)
   (<obj> ^predicates.visible true)
-->
   (<pred> ^satisfied true)
}

# Check if a state predicate is satisfied (the predicate exists on the object)
sp {problem-space*action*elaborate*predicate-test*state*predicate*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^world.objects.object <obj>)
   (<pt> ^predicate <pred>)
   (<pred> ^type state
           ^handle <pred-handle>
           ^{1} <obj>)
   (<obj> ^predicates.<prop-handle> <pred-handle>)
-->
   (<pred> ^satisfied true)
}

# Check if a relation predicate is satisifed (relation instance exists in the world)
sp {problem-space*action*elaborate*predicate-test*state*relation*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^world <world>)
   (<pt> ^predicate <pt-pred>)
   (<pt-pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1>
           ^2 <obj2>)
   (<world> ^predicates.predicate <pred>
            ^objects.object <obj1>
            ^objects.object <obj2>)
   (<pred> ^handle <pred-handle>
           ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
-->
   (<pt-pred> ^satisfied true)
}

# @ENUMERATE

# predicate-test with 1 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*1*predicate
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^predicate <p1>
        -^predicate { <p2> <> <p1> })
   (<p1> ^satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 2 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*2*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^predicate <p1>
         ^predicate <p2> > <p1>
        -^predicate { <p3> <> <p1> <> <p2> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
-->
   (<pt> ^satisfied true)
}

# predicate-test with 3 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*3*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>)
   (<pt> ^predicate <p1>
         ^predicate <p2> > <p1>
         ^predicate <p3> > <p2>
        -^predicate { <p4> <> <p1> <> <p2> <> <p3> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   (<p3> ^satisfied true)
-->
   (<pt> ^satisfied true)
}

 
 
