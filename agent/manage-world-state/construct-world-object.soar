################################################################################
# construct-world-object
#
# utility operator for creating an object in the proper world representation
# Can essentially be proposed anywhere
# Note: This operator will take 2 dc's, as it has to do an smem retrieval
#
# Structure:
# (<s> ^operator <o>)
# (<o> ^name construct-world-object
#      ^source-type << perception smem tcn-obj-slot imagined >>
#      ^source-obj <obj>
#      ^result-destination <dest>  # OPTIONAL
#      ^result-name <res-name>)    # OPTIONAL
#
# Will create the object and copy it to (<dest> ^<res-name> <obj>)
# If no result info is given, defaults as 
# (<s> ^constructed-world-object <cons>)
# (<cons> ^source <src-obj> ^result <constructed-obj>)
#
#################################################################################

# Categories:
# intrinsic: category, color, shape, size, weight, name, proper-name
# extrinsic: is-visible, is-reachable, door open/closed, activation on/off, temperature
# affordances: is-grabbable

### All source-types

# Elaborate an identifier to collect the object's predicates
sp {anystate*elaborate*construct-world-object*predicates
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object)
-->
   (<o> ^predicates <preds>)
}

# The construct-world-object-workspace is used to put intermediate information
sp {anystate*elaborate*construct-world-object*workspace
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^object-handle <h>
        ^predicates <preds>)
-->
   (<o> ^workspace <ws>)
   (<s> ^construct-world-object-workspace <ws>)
   (<ws> ^categories <cats>
         ^new-object-rep <obj>
         ^new-object-preds <new-preds>)
}

# If there is no category specified, default to entity1 (the most generic category)
sp {anystate*elaborate*construct-world-object*default*category*entity1
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^predicates <preds>)
   (<preds> -^category <> entity1)
-->
   (<preds> ^category entity1)
}

################ source-type perception ###############
# source-obj is from input-link.object.object:
#(<obj> ^object-handle <h>
#       ^property <p1> <p2> ...)
#(<p1> ^property-handle <prop1-handle>
#      ^predicate-handle <pred1-handle>)
#(<p2> ^property-handle <prop2-handle>
#      ^predicate-handle <pred2-handle>)

sp {anystate*elaborate*construct-world-object*perception*object-handle
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type perception
        ^source-obj <il-obj>)
   (<il-obj> ^object-handle <h>)
-->
   (<o> ^object-handle <h>)
}

sp {anystate*elaborate*construct-world-object*perception*predicates
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type perception
        ^source-obj.property <prop>
        ^predicates <preds>)
   (<prop> ^property-handle <prop-h>
           ^predicate-handle <pred-h>)
-->
   (<preds> ^<prop-h> <pred-h>)
}

################ source-type smem ###############
# source-obj is an object-instance in semantic memory
#(<obj> ^handle <obj-h>
#       ^object-instance true
#       ^item-type object
#       ^<pred1> <prop1>
#       ^<pred2> <prop2> 
#       ...
#)

sp {anystate*elaborate*construct-world-object*smem*object-handle
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type smem
        ^source-obj <smem-obj>)
   (<smem-obj> ^handle <h>)
-->
   (<o> ^object-handle <h>)
}

sp {anystate*elaborate*construct-world-object*smem*predicates
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type smem
        ^source-obj.{ <prop-h> <> handle <> object-instance <> item-type } <pred-h>
        ^predicates <preds>)
-->
   (<preds> ^<prop-h> <pred-h>)
}

################ source-type tcn-obj-slot ###############
# source-obj is a default representation on a TCN slot
#(<obj> ^<prop1> <pred1>
#       ^<prop2> <pred2>
#       ...
#)

sp {anystate*elaborate*construct-world-object*tcn-obj-slot*object-handle*new
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type tcn-obj-slot)
-->
   (<o> ^object-handle (make-constant-symbol |obj|))
}

sp {anystate*elaborate*construct-world-object*tcn-obj-slot*predicates
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type tcn-obj-slot
        ^source-obj.default.<prop-h> <pred-h>
        ^predicates <preds>)
-->
   (<preds> ^<prop-h> <pred-h>)
}

################ source-type imagined ###############
# source-obj is information which can be used to construct a new object
#(<obj> ^object-handle <h> # Optional: if missing it will create a new one
#       ^predicates <preds>)
#(<preds> ^category <cat>  # Required: the root category of the object
#         ^<prop1> <pred1> # Optional: additional predicates
#          ... )

sp {anystate*elaborate*construct-world-object*imagined*object-handle
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type imagined
        ^source-obj.object-handle <h>)
-->
   (<o> ^object-handle <h>)
}

sp {anystate*elaborate*construct-world-object*imagined*object-handle*new
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type imagined
        ^source-obj <src-obj>)
   (<src-obj> -^object-handle <h>
               ^predicates.root-category <cat>)
-->
   (<o> ^object-handle (make-constant-symbol (concat <cat> |_|)))
}

sp {anystate*elaborate*construct-world-object*imagined*object-handle*new*no*root
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type imagined
        ^source-obj <src-obj>)
   (<src-obj> -^object-handle <h>
              -^predicates.root-category <cat>)
-->
   (<o> ^object-handle (make-constant-symbol |obj|))
}

sp {anystate*elaborate*construct-world-object*imagined*predicates
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^source-type imagined
        ^source-obj <src-obj>
        ^predicates <preds>)
   (<src-obj> ^predicates.<prop-h> <pred-h>)
-->
   (<preds> ^<prop-h> <pred-h>)
}


##### Retrieve category information (to get ontology)

sp {ASSERT*anystate*apply*construct-world-object*only*one*category*predicate
   (state <s> ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name construct-world-object
        ^predicates <preds>)
   (<preds> ^category <cat>
            ^category { <cat2> <> <cat> }
           -^root-category)
-->
   (halt)
   (write |ASSERTION VIOLATED: construct-world-object has two categories with no root-category specified: | <cat> | | <cat2> (crlf))
   (write (cmd print -d 5 <o>) (crlf))
}

sp {anystate*apply*construct-world-object*smem-query*category-info*one*category
   (state <s> ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name construct-world-object
        ^predicates <preds>)
   (<preds> ^category <cat>
           -^category <> <cat>
           -^root-category)
-->
   (<cmd> ^query <q>
          ^depth 8)
   (<q> ^handle <cat>)
}

sp {anystate*apply*construct-world-object*smem-query*category-info*root-category
   (state <s> ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name construct-world-object
        ^predicates.root-category <cat>)
-->
   (<cmd> ^query <q>
          ^depth 8)
   (<q> ^handle <cat>)
}

sp {anystate*apply*construct-world-object*smem-query*copy*result
   (state <s> ^operator <o>
              ^smem <smem>)
   (<o> ^name construct-world-object
        ^predicates.category <cat>
        ^workspace <ws>)
   (<smem> ^result <res>
           ^command <cmd>)
   (<res> ^success <q>
          ^retrieved <cat-lti>)
   (<q> ^handle <cat>)
   (<cmd> ^query <q>
          ^depth <d>)
   (<ws> ^categories <cats>)
-->
   (<ws> ^category-info <cat-lti>)
   (<cats> ^category <cat-lti>
           ^root-category <cat-lti>)
   (<cmd> ^query <q> -
          ^depth <d> -)
}

sp {anystate*elaborate*construct-world-object-workspace*categories*category*supercategory
   (state <s> ^construct-world-object-workspace.categories <cats>)
   (<cats> ^category.supercategory <super>)
   (<super> ^handle <> none1)
-->
   (<cats> ^category <super>)
}

sp {anystate*elaborate*construct-world-object-workspace*all-categories
   (state <s> ^construct-world-object-workspace <ws>)
   (<ws> ^categories.category.supercategory.handle none1)
-->
   (<ws> ^all-categories-copied true)
}

### Create the base object structure

sp {anystate*apply*construct-world-object*create*base
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^object-handle <h>
        ^workspace <ws>)
   (<ws> ^new-object-rep <obj>
         ^new-object-preds <preds>)
-->
   (<obj> ^item-type object
          ^handle <h>
          ^predicates <preds>)
}

### Copy the predicates onto the object

sp {anystate*apply*construct-world-object*copy*category
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^categories.category.handle <cat>
         ^new-object-preds <preds>)
-->
   (<preds> ^category <cat>)
}

sp {anystate*apply*construct-world-object*copy*root-category
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^categories.root-category.handle <root-cat>
         ^new-object-rep <obj>)
-->
   (<obj> ^root-category <root-cat>)
}

sp {anystate*apply*construct-world-object*copy*affordance
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^categories.category.affordance1.handle <aff>
         ^new-object-preds <preds>)
-->
   (<preds> ^affordance1 <aff>)
}

sp {anystate*apply*construct-world-object*copy*waypoint
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>
        ^predicates.waypoint <wp-h>)
   (<ws> ^new-object-rep <obj>)
-->
   (<obj> ^waypoint <wp-h>)
}

### intrinsic-predicate
# HARDCODED: need to be better at this
# predicates which to use when creating the object
sp {anystate*apply*construct-world-object*copy*instrinsic*predicates
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^predicates.{ <prop> << proper-name name category color shape size weight sentence modifier1 >> } <pred>
        ^workspace <ws>)
   (<ws> ^new-object-preds <preds>)
-->
   (<preds> ^<prop> <pred>)
}

### Copy the object to the result destination

sp {anystate*apply*construct-world-object*copy*result*destination
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>
        ^result-destination <dest>
        ^result-name <res-name>)
   (<ws> ^all-categories-copied true
         ^new-object-rep <obj>)
-->
   (<dest> ^<res-name> <obj>)
}

sp {anystate*apply*construct-world-object*copy*result*destination*default
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^source-obj <src-obj>
        ^workspace <ws>
       -^result-destination <dest>)
   (<ws> ^all-categories-copied true
         ^new-object-rep <obj>)
-->
   (<s> ^constructed-world-object <cons>)
   (<cons> ^source <src-obj>
           ^result <obj>)
}
