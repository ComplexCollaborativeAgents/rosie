# start-stability-timer
# The first time we see a new-perception-object, we set a timer to make sure that it is stable and not noise


### For noisy external environments, the agent will make sure the object is real and stable
#       before adding it to the world by waiting and monitoring its position/volume

sp {anystate*elaborate*attend-to-perception*new-perception-object*object-info*from*object-monitor
   (state <s> ^operator <o> +
              ^top-state.perception-monitor.object-monitor <obj-mon>)
   (<o> ^name attend-to-perception
        ^discrepancy-type new-perception-object
        ^discrepancy-info.input-link-obj <il-obj>)
   (<obj-mon> ^new-object-info <obj-info>)
   (<obj-info> ^input-link-obj <il-obj>)
-->
   (<o> ^object-info <obj-info>)
}


### new-object-info: only exists the first time we see the object (it is not on the object-monitor)

sp {anystate*elaborate*attend-to-perception*new-perception-object*new-object-info
   (state <s> ^operator <o> +
              ^top-state.perception-monitor.object-monitor <obj-mon>)
   (<o> ^name attend-to-perception
        ^discrepancy-type new-perception-object)
-->
   (<o> ^new-object-info <obj-info>)
}

# Add a confirmed false flag, and sets a time to check if the object is still stable
sp {anystate*apply*attend-to-perception*new-perception-object*add*status
   (state <s> ^operator <o>
              ^io.input-link.time.seconds <t>
              ^agent-params.stability-check-duration <dur>
              ^top-state.perception-monitor.object-monitor <obj-mon>)
   (<o> ^name attend-to-perception
        ^discrepancy-type new-perception-object
        ^discrepancy-info.input-link-obj <il-obj>
        ^new-object-info <obj-info>)
-->
   (<obj-mon> ^new-object-info <obj-info>)
   (<obj-info> ^input-link-obj <il-obj>
               ^check-stability-time (+ <t> <dur>)
               ^number-checks 0)
}

# Creates filters to monitor if the object changes position/size
sp {anystate*apply*attend-to-perception*new-perception-object*create*filters
   (state <s> ^operator <o>
             -^agent-params.domain internal
              ^top-state.svs.command <cmd>)
   (<o> ^name attend-to-perception
        ^discrepancy-type new-perception-object
        ^discrepancy-info.input-link-obj <objh>
        ^new-object-info <obj-info>)
-->
   (<cmd> ^extract <pos>)
   (<pos> ^type monitor_position
          ^a <pa>)
   (<pa> ^type node
         ^id <objh>)
   (<obj-info> ^position-monitor <pos>)
   
   (<cmd> ^extract <vol>)
   (<vol> ^type monitor_volume
          ^a <va>)
   (<va> ^type node
         ^id <objh>)
   (<obj-info> ^volume-monitor <vol>)
}

# If a new-perception-object prematurely disappears from the input-link, remove the new-object-info for it
sp {top-state*remove*new-object-info*disappeared
   :o-support
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^object-monitor <obj-mon>
              -^input-link.objects.object <il-obj>)
   (<obj-mon> ^new-object-info <obj-info>)
   (<obj-info> ^input-link-obj <il-obj>)
-->
   (<obj-mon> ^new-object-info <obj-info> -)
}

sp {top-state*remove*new-object-info*filters*disappeared
   :o-support
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>
              ^svs.command <cmd>)
   (<perc-mon> ^object-monitor <obj-mon>
              -^input-link.objects.object <il-obj>)
   (<obj-info> ^input-link-obj <il-obj>
               ^position-monitor <pos>
               ^volume-monitor <vol>)
   (<cmd> ^extract <pos>
          ^extract <vol>)
-->
   (<cmd> ^extract <pos> -
          ^extract <vol> -)
}
