
# operator match-existing-object
# Tries to match the new object against those already in the world
# Returns a match as ^matches-existing-object <obj-info> or none
sp {attend-to-perception*new-perception-object*propose*match-existing-object
   (state <s> ^name attend-to-perception
              ^discrepancy-type new-perception-object
              ^input-link-obj <il-obj>
              ^obj-is-stable true
             -^matches-existing-object <any>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-existing-object
        ^source-type perception
        ^source-obj <il-obj>)
}

## operator update-existing-object
## If ^matches-existing-object <> none, then updates the existing object
## instead of creating a new one
#sp {attend-to-perception*new-perception-object*propose*update-existing-object
#   (state <s> ^name attend-to-perception
#              ^discrepancy-type new-perception-object
#              ^input-link-obj <perc-obj>
#              ^matches-existing-object { <obj> <> none })
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name update-existing-object
#        ^source-obj <perc-obj>
#        ^existing-obj <obj>)
#}
#
## operator construct-world-object
## If the object doesn't match an existing one, create a new representation for it
#sp {attend-to-perception*new-perception-object*propose*construct-world-object
#   (state <s> ^name attend-to-perception
#              ^discrepancy-type new-perception-object
#              ^source-obj <perc-obj>
#              ^matches-existing-object none
#             -^new-object-rep)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name construct-world-object
#        ^source-obj <perc-obj>
#        ^destination <s>
#        ^result-name new-object-rep)
#}
#
## elaborate smem-obj if one was retrieved
#sp {attend-to-perception*new-perception-object*elaborate*construct-world-object*smem-obj*non*perception-obj
#   (state <s> ^name attend-to-perception
#              ^discrepancy-type new-perception-object
#              ^source-type <> perception-obj
#              ^operator <o> +
#              ^matches-smem-object { <lti> <> none })
#   (<o> ^name construct-world-object)
#-->
#   (<o> ^smem-obj <lti>)
#}
#
## for a perception-obj, only add the smem info if it doesn't match an object already in the world 
#sp {attend-to-perception*new-perception-object*elaborate*construct-world-object*smem-obj*perception-obj
#   (state <s> ^name attend-to-perception
#              ^discrepancy-type new-perception-object
#              ^source-type perception-obj
#              ^operator <o> +
#              ^matches-smem-object { <lti> <> none }
#              ^object-monitor <obj-mon>)
#   (<o> ^name construct-world-object)
#   (<lti> ^handle <handle>)
#   (<obj-mon> -^object-info.object-handle <handle>)
#-->
#   (<o> ^smem-obj <lti>)
#}
#
## operator add-object-to-world
## Takes the new object representation and adds it to the world and object-monitor
#sp {attend-to-perception*new-perception-object*propose*add-object-to-world
#   (state <s> ^name attend-to-perception
#              ^discrepancy-type new-perception-object
#              ^source-obj <perc-obj>
#              ^source-type <type>
#              ^new-object-rep <obj>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name add-object-to-world
#        ^source-obj <obj>
#        ^source-type <type>
#        ^new-object-rep <obj>)
#}
#        
