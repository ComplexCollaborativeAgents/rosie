# change-world-command
#   We simply add the predicate on the object


### Elaborate the internal-world object using the perc-id
sp {anystate*elaborate*attend-to-perception*change-world-command*source-obj*perc-id
   (state <s> ^operator <o> +
              ^top-state.internal-world.objects.object <obj>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>)
   (<cmd> ^{ <att> << object-id destination-id >> } <obj-id>)
   (<obj> ^perc-id <obj-id>)
-->
   (<o> ^<att> <obj>)
}
sp {anystate*elaborate*attend-to-perception*change-world-command*source-obj*handle
   (state <s> ^operator <o> +
              ^top-state.internal-world.objects.object <obj>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>)
   (<cmd> ^<att> <obj-id>)
   (<obj> ^handle <obj-id>)
-->
   (<o> ^<att> <obj>)
}

### MOVE: Change the waypoint of the object
sp {anystate*apply*attend-to-perception*change-world-command*move*object
   (state <s> ^operator <o>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>
        ^object-id <obj>)
   (<cmd> ^type move
          ^waypoint-handle <wph>)
   (<obj> ^waypoint { <old-wp> <> <wph> })
-->
   (<obj> ^waypoint <old-wp> -
          ^waypoint <wph>)
}

# remove any relations involving the object being moved
sp {anystate*apply*attend-to-perception*change-world-command*move*remove*relations
   (state <s> ^operator <o>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>
              ^top-state.world.predicates.predicate <pred>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info.type move
        ^object-id <obj-src>)
   (<obj-info> ^input-link-obj.source-obj <obj-src>
               ^world-obj <obj>)
   (<pred> ^instance <i>)
   (<i> ^<num> <obj>)
-->
   (<pred> ^instance <i> -)
}

### PLACE: Put one object in/on another
sp {anystate*apply*attend-to-perception*change-world-command*place*object
   (state <s> ^operator <o>
              ^top-state.perception-monitor.object-monitor <obj-mon>
              ^top-state.world.predicates.predicate <pred>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>
        ^object-id <obj-src>
        ^destination-id <dest-src>)
   (<cmd> ^type place
          ^relation-handle <rel-h>)
   (<obj-mon> ^object-info <obj-info1> <obj-info2>)
   (<obj-info1> ^input-link-obj.source-obj <obj-src>
                ^world-obj <obj1>)
   (<obj-info2> ^input-link-obj.source-obj <dest-src>
                ^world-obj <obj2>)
   (<pred> ^handle <rel-h>)
  -{(<pred> ^instance <i>)
    (<i> ^1 <obj1> ^2 <obj2>)}
-->
   (<pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
   (<cmd> ^handled true)
}

sp {anystate*apply*attend-to-perception*change-world-command*place*remove*relations
   (state <s> ^operator <o>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>
              ^top-state.world.predicates.predicate <pred>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>
        ^object-id <obj-src>)
   (<cmd> ^type place
         -^handled)
   (<obj-info> ^input-link-obj.source-obj <obj-src>
               ^world-obj <obj>)
   (<pred> ^instance <i>)
   (<i> ^<num> <obj>)
   # don't remove in(obj, loc) predicate
   -{ (<pred> ^handle in1)
      (<i> ^{2}.predicates.category location) }
-->
   (<pred> ^instance <i> -)
}

# PREDICATE: change the predicate on the object
sp {anystate*apply*attend-to-perception*change-world-command*predicate
   (state <s> ^operator <o>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>
        ^object-id.predicates <preds>)
   (<cmd> ^type predicate
          ^property-handle <prop-h>
          ^predicate-handle <pred-h>)
   (<preds> ^<prop> { <old-pred> <> <pred-h> })
-->
   (<preds> ^<prop> <old-pred> -
            ^<prop> <pred-h>)
}

# Send a message on the output link saying the command was handled
sp {anystate*apply*attend-to-perception*change-world-command*send*handled-world-change*output-link
   (state <s> ^operator <o>
              ^top-state.io.output-link <out>)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>)
   (<cmd> ^num <n>)
-->
   (<out> ^handled-world-change <hwc>)
   (<hwc> ^num <n>)
}

# if print-perception is on, print a message
sp {anystate*apply*attend-to-perception*change-world-command*print-perception
   (state <s> ^operator <o>
              ^agent-params.print-perception true)
   (<o> ^name attend-to-perception
        ^discrepancy-type change-world-command
        ^discrepancy-info.command-info <cmd>)
-->
   (write |attend-to-perception(change-world-command):| (crlf))
   (write (cmd p <cmd>) (crlf))
}


