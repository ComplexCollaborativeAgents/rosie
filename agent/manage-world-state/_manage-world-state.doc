The perception-monitor is a top-state structure that monitors perceptual information from
   both the input-link and svs,
It will detect discrepancies between the top-state world and perception
   and propose, investigate, and take actions to resolve those discrepancies

perception-monitor
    changes
        change-info
            change
                type <change-type>
        change
            type <change-type>
            info <info> # Links to change-info.change <info> that matches on the type
    robot-view-filter <f> # Link to svs filter for extracting which objects intersect the view volume [magicbot]
    object-monitor
        object-info
            # only for new objects
            status << uncertain >>
            check-stability-time <t>
            number-checks <n>
            
            # All established objects
            object-handle <h> # handle for the object
            input-link-obj <obj> # from input-link.objects.object that matches handle
            belief-id  # created by soar |bel-h|
            belief-obj # from svs.spatial-scene.child with object-source belief
            perception-id # from svs
            perception-obj # from svs.spatial-scene-child with object-source perception
                           # or copied from other object-info.perception-obj with internal-link <obj-handle>
                           #
            internal-link <obj-handle> # Whether the object is linked to another one (2 objects for 1 perception obj)
                # auto removed if visible again, and reset occlusion info
                # auto removed if the linked-to object becomes stale
                # make sure you periodically check for occlusion (if not occluded, remove internal-link)
                
            check-occlusion-time <t> # The time to recheck whether the object is occluded
            check-growth-time <t>    # The time to recheck whether the object has grown

            properties
                property-info # for each property under input-link-obj
                    property-handle <prop>
                    type << state linguistic visual >>
                    predicate-handle <pred> # for visual, must be highest confidence and no others more than 80%
                    input-link-prop # link to input-link-obj.property
                    hypothesis
                        predicate-handle <pred>
                        confidence <#> # greater than .1
                        best true # if highest confidence
                        lower-threshold # 80% of confidence for best
            
            status
                is-visible1 << visible1 not-visible1 >>
                in-view << true false >>
                is-occluded << true false >>
                
                stability-timer-expired true # if input-link.time.seconds >= check-stability-time
                occlusion-timer-expired true # if input-link.time.seconds >= check-occlusion-time
                growth-timer-expired true    # if input-link.time.seconds >= check-growth-time

            differences
                compare-position  # link to the svs filter extracting distance between belief + perception objs in svs
                pos-diff <meters> # Difference in meters between centroids copied from compare-position filter
                has-moved true    # If pos-diff > agent-params.pos-diff-threshold

                belief-vol        # volume svs filter for the belief object
                perception-vol    # volume svs filter for the perception object
                vol-diff <ratio>  # perception-vol / belief-vol
                has-grown true    # true if vol-diff > agent-params.vol-high-diff-threshold
                has-shrunk true   # true if vol-diff < agent-params.vol-low-diff-threshold
    predicate-monitor
        predicate-info
            predicate-handle <pred-handle>
            smem-info <pred-lti>
            object-test
                object <obj>
                match <obj2>
            

                
####### extract-relations.soar #######

Given an object and a relation predicate handle
This code will take care of creating the svs filters needed
to extract the relation
It will return all objects that are in the given relation
with the given object
(E.G. given obj7 and relation 'on', returns all objects on obj7)

To use, simply create the following structure on top-state
(state <s> ^perception-monitor.predicate-monitor <mon>)
(<mon> ^predicate-info <pred-info>)
  (<pred-info> ^predicate-handle <pred-handle>
               ^object-test <test>)
    (<test> ^object <obj>)

Result: Extracts the relations through SVS and will copy all different matching world objects
      as object-test.match <obj> 
 
####### retrieve-predicate-info.soar #######

Given a predicate-info with a predicate-handle
   Will use the handle to retrieve the predicate information 
   from semantic memory

Result: creates predicate-info.smem-info <LTI>



manage-world-state/perception-monitor/object-monitor

############## elaborate-object-info.soar ############

Elaborates substructure of object-monitor/object-info

# REQUIRED #

object-handle <handle> 
	The handle of the object, must be there on creation
	
perception-id <id> 
	The id for the perception object in svs, must be there on creation

belief-id <id> 
	The id to use on the belief object in svs, must be there on creation

# ELABORATED #

status <status> 
	Contains wmes for monitoring object status (see elaborate-object-status.soar)

properties <props> 
	Contains wmes for monitoring object properties from perception (see elaborate-object-properties.soar)

perception-obj <obj> 
	Reference to the perceptual object in svs (matches perception-id)

belief-obj <obj> 
	Reference to the belief object in svs (matches belief-id)

input-link-obj <obj> 
	Reference to the object representation on the input-link (matches object-handle)

wm-obj <obj> 
	Reference to the object representation in working memory (top-state.world.objects.object <obj>)
	(matches object-handle)
	
check-occlusion-time <t>
    The time to recheck whether the object is still occluded
    

######### elaborate-object-status.soar ##########

Elaborates object-info.status <status>

in-view << true false >>
	True if the belief object intersects the robot's view volume
	(The object should be in view)
	
is-visible1 << visible1 not-visible1 >>
	True if the object is visible (coming in on perception)
	
is-occluded << true false >>
    True if the object is being occluded

occlusion-timer-expired true    
    True if object-info.check-occlusion-time has passed

shared-input-link-obj true
	True if the object shares a input-link-obj with another object
	(Probably segmented together)
    
	
######## elaborate-object-properties.soar ########

Elaborates object-info.properties <props>

Each att/val pair on input-link-obj.classifications <cls>
	is copied onto this id
	

################## Robot scene changes #####################
# (perception-monitor.robot-monitor.elaborate-changes.soar)
# Monitors perception-monitor.input-link.self for changes in the robot status
# change.category robot

# attend-to-changed-arm-moving-status
    self-info <self> # perception-monitor.input-link.self
    change
        type changed-arm-moving-status
        category robot

    Maintains the world.robot.arm.moving-status << moving stopped >> wme
    input-link.self.arm.moving-status << moving stopped >>
    Remove all internal-links for moved object when the arm is done moving
        And all internal-links to the moved object

# attend-to-changed-moving-status
    self-info <self> # perception-monitor.input-link.self
    change
        type changed-moving-status
        category robot

    Updates world.robot.moving-status from input-link.self.moving-status

# attend-to-changed-waypoint
    new-waypoint-handle <wp-handle>
    change
        type changed-waypoint
        category robot

    Updates world.robot.current-waypoint using perception-monitor.input-link.self.current-waypoint.waypoint-handle

################## Object scene changes #####################
# (perception-monitor.object-monitor.elaborate-changes.soar)
# Monitors perception and compares against the current world
#   to catch discrepancies between the two and respond
# Updates the world with new information

# attend-to-new-perception-object
    object-info <obj-info> # object-monitor.new-object-info
    change
        type new-perception-object
        category object
    
    Will give the object a stability timer to recheck later
    
# check-object-stability
    object-info <obj-info> # object-monitor.new-object-info
    change
        type stability-timer-expired
        category object
        
    Will check if the object is stable (hasn't changed size/position)
        If not, will increase the check time
        Otherwise, will mark the object as confirmed
        
# attend-to-new-object
    perception-obj <obj> # If the new object is coming from perception + confirmed
    change
        type new-object
        category object
    
