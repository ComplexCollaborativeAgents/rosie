# object-monitor.object-info.status <status>
#   Contains information about the status of the object (visible/in-view/etc)

# Elaborate the status identifier
sp {top-state*perception-monitor*object-monitor*object-info*elaborate*status
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.{ << object-info new-object-info >> } <obj-info>)
-->
   (<obj-info> ^status <status>)
}

##################################################################
#
# in-view << true false >>
#   true if the belief object is in the robot's view volume (should be visible)
#
#################################################################

# Fully Observable Environments, objects are always in view
sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*in-view*true*tabletop*domain
   (state <s> ^superstate nil
              ^agent-params.domain << internal tabletop fetch ai2thor >>
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>)
-->
   (<status> ^in-view true)
}

# Partially Observable Domains, objects are in view if they intersect the view volume
sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*in-view*true
   (state <s> ^superstate nil
              ^agent-params.domain << magicbot cozmo >>
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^perception-monitor.robot-view-filter.result.record <r>)
   (<obj-info> ^belief-obj.id <bel-id>
               ^status <status>)
   (<r> ^params.b <bel-id>
        ^value true)
-->
   (<status> ^in-view true)
}

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*in-view*false
   (state <s> ^superstate nil
              ^agent-params.domain << magicbot cozmo >>
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^perception-monitor.robot-view-filter.result.record <r>)
   (<obj-info> ^belief-obj.id <bel-id>
               ^status <status>)
   (<r> ^params.b <bel-id>
        ^value false)
-->
   (<status> ^in-view false)
}

##################################################################
#
# is-visible1 << visible1 not-visible1 >>
#   true if the belief-obj has a perception-obj
#
##################################################################

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*visible1
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^perception-obj <perc-obj>
               ^status <status>)
-->
   (<status> ^is-visible1 visible1)
}

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*visible1*current-location
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^perception-monitor.input-link.self.current-waypoint.waypoint-handle <wp-handle>
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>
               ^input-link-obj.waypoint <wp-handle>)
-->
   (<status> ^is-visible1 visible1)
}

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*not-visible1
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>)
   (<status> -^is-visible1 visible1)
-->
   (<status> ^is-visible1 not-visible1)
}


##################################################################
#
# Monitoring occluded objects
#   is-occluded << true false >> - based on the last time occlusion was checked
#   occlusion-timeout <secs> - says the object is occluded until the given time
#
##################################################################

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*is-occluded*true
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^io.input-link.time.seconds <t>)
   (<obj-info> ^status <status>
               ^occlusion-timeout > <t>)
-->
   (<status> ^is-occluded true)
}

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*is-occluded*false
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info.status <status>)
   (<status> -^is-occluded true)
-->
   (<status> ^is-occluded false)
}

##################################################################
#
# shared-perception-obj true
#   true if the object shares a perception-obj with another object
#
#################################################################

sp {top-state*perception-monitor*object-monitor*object-info*status*elaborate*shared-perception-obj*true
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor <obj-mon>)
   (<obj-mon> ^object-info <obj-info>
              ^object-info { <other-info> <> <obj-info> })
   (<obj-info> ^perception-obj <perc-obj>
               ^status <status>)
   (<other-info> ^perception-obj <perc-obj>)
-->
   (<status> ^shared-perception-obj true)
}

