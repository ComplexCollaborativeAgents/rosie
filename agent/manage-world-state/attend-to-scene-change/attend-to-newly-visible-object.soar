# Adds the ^visible true predicate
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*add*visible*true
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
-->
   (<wm-preds> ^visible true)
}

# Removes the ^visible false predicate
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*visible*false
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> ^visible false)
-->
   (<wm-preds> ^visible false -)
}

# If the object has no ^object-status, create confirmed
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*create*object-status*confirmed
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> -^object-status)
-->
   (<wm-preds> ^object-status confirmed)
}

# If the object has ^object-status unconfirmed, change to confirmed
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*change*object-status*to*confirmed
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> ^object-status unconfirmed)
-->
   (<wm-preds> ^object-status unconfirmed -
               ^object-status confirmed)
}

# Add an in predicate instance for in(obj, cur-loc)
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*add*in*predicate
   (state <s> ^operator <o>
              ^top-state.world <world>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj <obj>)
   (<world> ^predicates.predicate <in-pred>
            ^robot.current-location <cur-loc>)
   (<in-pred> ^handle in1)
   -{(<in-pred> ^instance <i>)
     (<i> ^1 <obj> ^2 <cur-loc>)}
-->
    (<in-pred> ^instance <i>)
    (<i> ^1 <obj> ^2 <cur-loc>)
}

# Remove any in predicate instances for other locations
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*old*in*predicate
   (state <s> ^operator <o>
              ^top-state.world <world>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj <obj>)
   (<world> ^predicates.predicate <in-pred>
            ^robot.current-location <cur-loc>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 {<old-loc> <> <cur-loc>})
   (<old-loc> ^predicates.category location)
-->
    (<in-pred> ^instance <i> -)
}

# if debug-perception is on, print a message
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*debug-perception*print
   (state <s> ^operator <o>
              ^agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.object-handle <handle>)
-->
   (write |Object | <handle> |: marking visible=true| (crlf))
}
