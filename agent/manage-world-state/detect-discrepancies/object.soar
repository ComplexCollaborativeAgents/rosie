###########################################################################
#
# Change: moved-object
#   If an object's position significantly changes, investigate
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*moved-object*tabletop
   (state <s> ^superstate nil
              ^agent-params.domain << tabletop fetch >>
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <moved-object>)
   (<moved-object> ^type moved-object
                   ^category object
                   ^op-name check-for-occlusion)
}

sp {top-state*perception-monitor*elaborate*change-info*moved-object*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain << ai2thor magicbot cozmo >>
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <moved-object>)
   (<moved-object> ^type moved-object
                   ^category object
                   ^op-name update-pose)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*moved-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^differences.has-moved true
               ^status.is-occluded false)
-->
   (<changes> ^change <change>)
   (<change> ^type moved-object
             ^object-info <obj-info>)
}


#########################################################
#
# Change: missing-object
#   Occurs when a belief object is no longer visible 
#     and should be in view
#
#########################################################

sp {top-state*perception-monitor*elaborate*change-info*missing-object*tabletop
   (state <s> ^superstate nil
              ^agent-params.domain << fetch tabletop >>
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <missing-obj>)
   (<missing-obj> ^type missing-object 
                ^category object
                ^op-name attend-to-stale-object)
}

sp {top-state*perception-monitor*elaborate*change-info*missing-object*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain << ai2thor magicbot cozmo >>
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <stale-obj>)
   (<stale-obj> ^type missing-object 
                ^category object
                ^op-name attend-to-missing-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*missing-object*tabletop
   (state <s> ^superstate nil
              ^agent-params.domain << tabletop fetch >>
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>)
   (<status> ^is-visible1 not-visible1
             ^is-occluded false)
-->
   (<changes> ^change <change>)
   (<change> ^type missing-object
             ^object-info <obj-info>)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*missing-object*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain << ai2thor magicbot cozmo >>
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>
              -^wm-obj.predicates.is-confirmed1 not-confirmed1)
   (<status> ^is-visible1 not-visible1
            ^in-view true)
-->
   (<changes> ^change <change>)
   (<change> ^type missing-object
             ^object-info <obj-info>)
}


############################################################################################
#
# Change: new-object-predicate
#    When a unary predicate for a given category is on the perception object
#      and not on the belief object
#
#############################################################################################

sp {top-state*perception-monitor*elaborate*change-info*new-object-predicate
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <new-obj-pred>)
   (<new-obj-pred> ^type new-object-predicate
                   ^category object
                   ^op-name attend-to-new-object-predicate)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*new-object-predicate*visual
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^properties.property-info <prop-info>
               ^wm-obj.predicates <wm-preds>
               ^status.is-occluded false)
   (<prop-info> ^property-handle <prop>
                ^type visual
                ^predicate-handle <pred>)
   (<wm-preds> -^<prop> <pred>)
-->
   (<changes> ^change <change>)
   (<change> ^type new-object-predicate
             ^object-info <obj-info>
             ^property-handle <prop>
             ^predicate-handle <pred>)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*new-object-predicate*non-visual
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^properties.property-info <prop-info>
               ^wm-obj.predicates <wm-preds>)
   (<prop-info> ^property-handle <prop>
                -^type visual
                ^predicate-handle <pred>)
   (<wm-preds> -^<prop> <pred>)
-->
   (<changes> ^change <change>)
   (<change> ^type new-object-predicate
             ^object-info <obj-info>
             ^property-handle <prop>
             ^predicate-handle <pred>)
}

###########################################################################
#
# Change: shrunken-object
#   If an object's volume drastrically lowers, investigate
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*shrunken-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <shrunk-obj>)
   (<shrunk-obj> ^type shrunken-object
                 ^category object
                 ^op-name evaluate-shrunken-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*shurnken-object
   (state <s> ^superstate nil
              ^agent-params.domain << fetch tabletop >>
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^differences.has-shrunk true
               ^status.is-occluded false)
-->
   (<changes> ^change <change>)
   (<change> ^type shrunken-object
             ^object-info <obj-info>)
}


###########################################################################
#
# Change: grown-object
#   If an object's volume drastrically increases, investigate
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*grown-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <grown-obj>)
   (<grown-obj> ^type grown-object
                ^category object
                ^op-name evaluate-grown-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*grown-object
   (state <s> ^superstate nil
              ^agent-params.domain << tabletop fetch >>
              ^world.robot.arm.moving-status stopped
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^differences <diffs>)
   (<diffs> ^has-grown true
           -^growth-wait true)
-->
   (<changes> ^change <change>)
   (<change> ^type grown-object
             ^object-info <obj-info>)
}

#############################################################################
# Change: recheck-occlusion
#   Periodically check occluded objects to see if they are still occluded
#############################################################################

sp {top-state*perception-monitor*elaborate*change-info*recheck-occlusion
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <recheck-occlusion>)
   (<recheck-occlusion> ^type recheck-occlusion
                        ^category object
                        ^op-name check-for-occlusion)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*recheck-occlusion
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status.occlusion-timer-expired true)
-->
   (<changes> ^change <change>)
   (<change> ^type recheck-occlusion
             ^object-info <obj-info>)
}

#############################################################################
# Change: perform-internal-dynamics
#   For an internal environment, we may have to do things to manage the world state
#############################################################################

sp {top-state*perception-monitor*elaborate*change-info*perform-internal-dynamics
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <perf-int-dyn>)
   (<perf-int-dyn> ^type perform-internal-dynamics
                   ^category object
                   ^op-name perform-internal-dynamics)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*perform-internal-dyanmics*turn*off
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status.needs-turned-off true)
-->
   (<changes> ^change <change>)
   (<change> ^type perform-internal-dynamics
             ^action turn-off
             ^object-info <obj-info>)
}


