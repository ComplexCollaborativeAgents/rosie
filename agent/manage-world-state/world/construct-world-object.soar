################################################################################
# construct-world-object
#
# utility operator for creating an object in the proper world representation
#
# Structure:
# (<s> ^operator <o>)
# (<o> ^name construct-world-object
#      ^object-handle <h>
#      ^predicates <preds>
#      ^result-destination <dest>  # OPTIONAL
#      ^result-name <res-name>)    # OPTIONAL
#
# Will create the object and copy it to (<dest> ^<res-name> <obj>)
# If no result info is given, defaults to (<s> ^constructed-world-object <obj>)
#
# Note: This operator will take 2 dc's, as it has to do an smem retrieval
#
#################################################################################


sp {anystate*elaborate*construct-world-object*workspace
   (state <s> ^operator <o> +)
   (<o> ^name construct-world-object
        ^object-handle <h>
        ^predicates <preds>)
-->
   (<o> ^workspace <ws>)
   (<s> ^construct-world-object-workspace <ws>)
   (<ws> ^categories <cats>
         ^new-object-rep <obj>
         ^new-object-preds <new-preds>)
}

sp {anystate*apply*construct-world-object*smem-query*category-info
   (state <s> ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name construct-world-object
        ^predicates.category <cat>)
-->
   (<cmd> ^query <q>)
   (<q> ^cue.handle <cat>
        ^depth 8)
}

sp {anystate*apply*construct-world-object*smem-query*copy*result
   (state <s> ^operator <o>
              ^smem <smem>)
   (<o> ^name construct-world-object
        ^predicates.category <cat>
        ^workspace <ws>)
   (<smem> ^result <res>
           ^command <cmd>)
   (<res> ^success <cue>
          ^retrieved <cat-lti>)
   (<cue> ^handle <cat>)
   (<cmd> ^query <q>)
   (<q> ^cue <cue>)
-->
   (<ws> ^category-info <cat-lti>)
   (<cmd> ^query <q> -)
}

sp {anystate*elaborate*construct-world-object-workspace*categories*category*base
   (state <s> ^construct-world-object-workspace <ws>)
   (<ws> ^category-info.handle <cat>
         ^categories <cats>)
-->
   (<cats> ^category <cat>)
}

sp {anystate*elaborate*construct-world-object-workspace*categories*category*supercategory
   (state <s> ^construct-world-object-workspace.categories <cats>)
   (<cats> ^category.supercategory.handle { <cat> <> none1 })
-->
   (<cats> ^category <cat>)
}

sp {anystate*elaborate*construct-world-object-workspace*all-categories
   (state <s> ^construct-world-object-workspace <ws>)
   (<ws> ^categories.category.supercategory.handle none1)
-->
   (<ws> ^all-categories-copied true)
}

sp {anystate*apply*construct-world-object*create*base
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^object-handle <h>
        ^workspace <ws>)
   (<ws> ^new-object-rep <obj>
         ^new-object-preds <preds>)
-->
   (<obj> ^item-type object
          ^handle <h>
          ^predicates <preds>)
}

### Copy the predicates onto the object

sp {anystate*apply*construct-world-object*copy*category
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^categories.category.handle <cat>
         ^new-object-preds <preds>)
-->
   (<preds> ^category <cat>)
}

sp {anystate*apply*construct-world-object*copy*affordance
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^categories.category.affordance1.handle <aff>
         ^new-object-preds <preds>)
-->
   (<preds> ^affordance1 <aff>)
}

### instrinsic-predicate
# HARDCODED: need to be better at this
# predicates which to use when creating the object
sp {anystate*apply*construct-world-object*copy*instrinsic*predicates
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>)
   (<ws> ^predicates.{ <prop> << proper-name name category color shape size weight >> } <pred>
         ^new-object-preds <preds>)
-->
   (<preds> ^<prop> <pred>)
}

### Copy the object to the result destination

sp {anystate*apply*construct-world-object*copy*result*destination
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>
        ^result-destination <dest>
        ^result-name <res-name>)
   (<ws> ^all-categories-copied true
         ^new-object-rep <obj>)
-->
   (<dest> ^<res-name> <obj>)
}

sp {anystate*apply*construct-world-object*copy*result*destination*default
   (state <s> ^operator <o>)
   (<o> ^name construct-world-object
        ^workspace <ws>
       -^result-destination <dest>)
   (<ws> ^all-categories-copied true
         ^new-object-rep <obj>)
-->
   (<s> ^constructed-world-object <obj>)
}
