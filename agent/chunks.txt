sp {chunk*selection*select*success-evaluation-becomes-best-preference*OpNoChange*t2764-1
    :chunk
    (state <s1> ^desired <d1> ^action-operator <a1>
          ^name { <n1> <> evaluate-operator } ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<a1>
          -^{ <a2> <> arg2 <> arg1 << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          ^action-handle deliver1 ^arg2 <a4> ^arg1 <a5> ^name <n1>
          ^subaction-handle <s2> ^perform <p3>)
    (<a4> ^arg-type predicate ^2 <i3> ^arg-status <a10> ^handle <h1>)
    (<a5> ^arg-type object ^id <i2> ^arg-status <a9>)
    (<i1> ^item-type goal-predicate ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1> ^item-type <i5>)
    (<p1> ^arm-status not-grabbed)
    (<o1> -^{ <a6> <> arg1 << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a7>
          ^name op_pick-up1 ^arg1 <a8> ^subaction-handle <s3> ^perform <p4>
          ^action-handle <a12>)
    (<a8> ^arg-type object ^id <i2> ^arg-status <a11>)
    (<p2> ^name action)
    (<i3> ^item-type <i4>)
    (<w1> ^predicates <p5> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<p5> ^predicate <p6>)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^operator <o1> = 0.900000 ^best-pref-eval <o1>)
}

sp {chunk*selection*select*success-evaluation-becomes-best-preference*OpNoChange*t2746-1
    :chunk
    (state <s1> ^desired <d1> ^action-operator <a1>
          ^name { <n1> <> evaluate-operator } ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<a1> ^action-handle deliver1 ^arg1 <a2> ^name <n1> ^subaction-handle <s3>
          ^perform <p4>
          ^{ <a9> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a10>
          -^{ <a11> <> <a9> <> arg1 << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a12>)
    (<a2> ^arg-type object ^id <i2> ^arg-status <a7>)
    (<i1> ^item-type goal-predicate ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1> ^item-type <i5>)
    (<p1> ^arm-status grabbed)
    (<o1> -^{ <a3> <> arg2 << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a4>
          ^name op_go-to1 ^arg2 <a5> ^subaction-handle <s2> ^perform <p3>
          ^action-handle <a8>)
    (<a5> ^arg-type predicate ^2 <i3> ^arg-status <a6> ^handle <h1>)
    (<p2> ^name action)
    (<i3> ^item-type <i4>)
    (<w1> ^predicates <p5> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<a10> ^arg-type predicate ^2 <i3> ^arg-status <a13> ^handle <h3>)
    (<p5> ^predicate <p6>)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^operator <o1> = 0.900000 ^best-pref-eval <o1>)
}

sp {chunk*action-space*retrospective*selection*SNC*apply*return-matches-action*add*matches-action*superstate*Tie*t2742-1
    :chunk
    (state <s1> ^match-action <m1>)
    (<m1> ^candidate-action <c1> ^action <a2>)
    (<c1> ^action-handle <a1>
          -^{ <a5> <> <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a6>
          ^<a3> <a9>)
    (<a2> ^action-handle <a1>
          ^{ <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a4>
          -^{ <a7> <> <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a8>)
    (<a4> ^arg-type predicate ^handle <h1> ^2 <i1>)
    (<a9> ^arg-type predicate ^handle <h1> ^2 <i1>)
    -->
    (<m1> ^matches-action <c1>)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t2733-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^source-action <s2>
          ^destination <d1>)
    (<s2> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1> ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a4> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a5>)
    (<a3> ^arg-type predicate ^arg-status <a6> ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a2> <a7> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1>
           ^name <n1>)
    (<a7> ^2 <i2> ^handle <h1> ^arg-type predicate ^arg-status <a6>)
}

sp {chunk*selection*select*success-evaluation-becomes-best-preference*OpNoChange*t2724-1
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^item-type goal-predicate ^handle in1 ^type relation ^1 <i2> ^2 <c1>)
    (<o1> -^{ <a1> <> arg1 << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a2>
          ^name op_put-down1 ^arg1 <a3> ^subaction-handle <s2> ^perform <p2>
          ^action-handle <a5>)
    (<a3> ^arg-type object ^id <i2> ^arg-status <a4>)
    (<p1> ^name action)
    (<i2> ^item-type <i3>)
    (<w1> ^robot <r1> ^predicates <p3> ^objects <o2>)
    (<r1> ^current-location <c1>)
    (<c1> ^item-type <i4>)
    (<o2> ^object <c1> ^object <i2>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^operator <o1> = 0.900000 ^best-pref-eval <o1>)
}

sp {chunk*action-space*retrospective*selection*SNC*apply*return-matches-action*add*matches-action*superstate*Tie*t2721-1
    :chunk
    (state <s1> ^match-action <m1>)
    (<m1> ^candidate-action <c1> ^action <a2>)
    (<c1> ^action-handle <a1>
          -^{ <a5> <> <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a6>
          ^<a3> <a9>)
    (<a2> ^action-handle <a1>
          ^{ <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a4>
          -^{ <a7> <> <a3> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a8>)
    (<a4> ^arg-type object ^id <i1>)
    (<a9> ^arg-type object ^id <i1>)
    -->
    (<m1> ^matches-action <c1>)
}

sp {chunkx2*learn-subaction-proposal*apply*complete-learn-subaction-proposal*OpNoChange*t2647-1
    :chunk
    (state <s1> ^action-operator <a1> ^name <n1> ^problem-space <p1>
          ^world <w1>)
    (<a1> ^action-handle deliver1 ^arg1 <a2> ^name <n1>)
    (<a2> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<i1> ^predicates <p2>)
    (<p2> ^arm-status grabbed)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^perform multiple ^action-handle put-down1 ^name op_put-down1
           ^arg1 <a3> ^subaction-handle subaction6)
    (<a3> ^id <i1> ^arg-type object ^arg-status real)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t2291-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> ^name copy-action ^source-action <s2> ^copy-name <c1>
          ^destination <d1>)
    (<s2> -^subaction-handle <s3> -^perform <p1> ^action-handle <a1>
          ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a5> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a6>)
    (<a3> -^arg-status <a4> ^arg-type waypoint ^id <i1>)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^<a2> <a7> ^perform multiple ^action-handle <a1> ^name <n1>)
    (<a7> ^id <i1> ^arg-type waypoint ^arg-status unknown)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t2266-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-action ^copy-name <c1>
          ^source-action <s2> ^destination <d1>)
    (<s2> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1> ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a4> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a5>)
    (<a3> ^arg-type predicate ^arg-status <a6> ^handle <h1> ^2 <i1>)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^<a2> <a7> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1>
           ^name <n1>)
    (<a7> ^2 <i1> ^handle <h1> ^arg-type predicate ^arg-status <a6>)
}

sp {chunkx2*learn-subaction-proposal*apply*complete-learn-subaction-proposal*OpNoChange*t2259-1
    :chunk
    (state <s1> ^action-operator <a1> ^name <n1> ^problem-space <p1>
          ^world <w1>)
    (<a1> ^action-handle deliver1 ^arg2 <a2> ^arg2 <a3> ^name <n1>)
    (<a2> ^arg-type predicate ^2 <i1>)
    (<a3> ^arg-type predicate ^handle <h1>)
    (<p1> ^name action)
    (<w1> ^robot <r1>)
    (<r1> -^current-location <i1>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^perform multiple ^action-handle go-to1 ^name op_go-to1 ^arg2 <a4>
           ^subaction-handle subaction5)
    (<a4> ^2 <i1> ^handle <h1> ^arg-type predicate ^arg-status desired)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t2114-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^source-action <s2>
          ^destination <d1>)
    (<s2> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1> ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a4> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a5>)
    (<a3> ^arg-type object ^arg-status <a6> ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a2> <a7> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1>
           ^name <n1>)
    (<a7> ^id <i2> ^arg-type object ^arg-status <a6>)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t2008-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-action ^copy-name <c1>
          ^source-action <s2> ^destination <d1>)
    (<s2> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1> ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a4> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a5>)
    (<a3> ^arg-type object ^arg-status <a6> ^id <i1>)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^<a2> <a7> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1>
           ^name <n1>)
    (<a7> ^id <i1> ^arg-type object ^arg-status <a6>)
}

sp {chunkx2*learn-subaction-proposal*apply*complete-learn-subaction-proposal*OpNoChange*t2002-1
    :chunk
    (state <s1> ^action-operator <a1> ^name <n1> ^problem-space <p1>
          ^world <w1>)
    (<a1> ^action-handle deliver1 ^arg1 <a2> ^name <n1>)
    (<a2> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
   -{ (<o1> ^object <o2>)
      (<o2> ^predicates <p2>)
      (<p2> ^arm-status grabbed)}
    (<i1> ^predicates <p3>)
    (<p3> ^visible true)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^perform multiple ^action-handle pick-up1 ^name op_pick-up1
           ^arg1 <a3> ^subaction-handle subaction4)
    (<a3> ^id <i1> ^arg-type object ^arg-status real)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*2*args*OpNoChange*t876-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^source-action <s2> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<s2> -^subaction-handle <s3> -^perform <p1> ^action-handle <a1>
          ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          ^{ <a5> << arg1 arg2 arg3 arg4 arg5 until-clause >> < <a2> } <a6>
          -^{ <a8> <> <a2> <> <a5> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a9>)
    (<a3> -^arg-status <a4> ^arg-type predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
    (<a6> -^arg-status <a7> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a5> <a10> ^<a2> <a11> ^perform multiple ^action-handle <a1>
           ^name <n1>)
    (<a10> ^id <i4> ^arg-type object ^arg-status unknown)
    (<a11> ^2 <i2> ^handle <h1> ^arg-type predicate ^arg-status unknown)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t794-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^source-action <s2> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<s2> -^subaction-handle <s3> -^perform <p1> ^action-handle <a1>
          ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a5> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a6>)
    (<a3> -^arg-status <a4> ^arg-type predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a2> <a7> ^perform multiple ^action-handle <a1> ^name <n1>)
    (<a7> ^2 <i2> ^handle <h1> ^arg-type predicate ^arg-status unknown)
}

sp {chunk*copy-desired*complete-copy-desired*learn-copy-desired-elaboration-rule*1*predicates*OpNoChange*t778-1
    :chunk
    (state <s1> ^copy-desired <c1> ^deep-copy-world <d1>)
    (<c1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^item-type goal-predicate ^type relation ^handle <h2> ^2 <i2>
          ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i4> ^<i3> <i5>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^item-type task-goal ^pred-count 1 ^handle <h1>
           ^1 <i6>)
    (<i6> ^2 <i4> ^1 <i5> ^handle <h2> ^type relation
           ^item-type goal-predicate)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*1*args*OpNoChange*t773-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^source-action <s2> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<s2> -^subaction-handle <s3> -^perform <p1> ^action-handle <a1>
          ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          -^{ <a5> <> <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a6>)
    (<a3> -^arg-status <a4> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a2> <a7> ^perform multiple ^action-handle <a1> ^name <n1>)
    (<a7> ^id <i2> ^arg-type object ^arg-status unknown)
}

sp {chunkx2*learn-desired-elaboration-rule*elaborate*goal-handle*OpNoChange*t754-2
    :chunk
    (state <s1> ^action-operator <a1> ^name <n1> ^problem-space <p1>)
    (<a1> ^current-subgoal tasksubgoal3 ^action-handle deliver1 ^arg2 <a2>
          ^arg1 <a3> ^name <n1>)
    (<a2> ^arg-type predicate ^2 <i2>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^goal-handle tasksubgoal3)
}

sp {chunkx2*learn-desired-elaboration-rule*apply*complete-learn-desired-elaboration-rule*OpNoChange*t754-1
    :chunk
    (state <s1> ^action-operator <a1> -^copy-desired <c1> ^name <n1>
          ^problem-space <p1>)
    (<a1> ^current-subgoal tasksubgoal3 ^action-handle deliver1 ^arg2 <a2>
          ^arg1 <a3> ^name <n1>)
    (<a2> ^arg-type predicate ^2 <i2>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle tasksubgoal3 ^item-type task-subgoal)
    (<i3> ^2 <i2> ^1 <i1> ^handle in1 ^type relation ^item-type goal-predicate)
}

sp {chunk*copy-action*complete-copy-action*learn-copy-action-elaboration-rule*2*args*OpNoChange*t378-1
    :chunk
    (state <s1> ^copy-action <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^source-action <s2>
          ^destination <d1>)
    (<s2> ^subaction-handle <s3> ^perform <p1> ^action-handle <a1> ^name <n1>
          ^{ <a2> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a3>
          ^{ <a5> << arg1 arg2 arg3 arg4 arg5 until-clause >> < <a2> } <a6>
          -^{ <a7> <> <a2> <> <a5> << arg1 arg2 arg3 arg4 arg5 until-clause >> } <a8>)
    (<a3> ^arg-type predicate ^arg-status <a4> ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
    (<a6> ^arg-type object ^arg-status <a9> ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^<a5> <a10> ^<a2> <a11> ^subaction-handle <s3> ^perform <p1>
           ^action-handle <a1> ^name <n1>)
    (<a10> ^id <i4> ^arg-type object ^arg-status <a9>)
    (<a11> ^2 <i2> ^handle <h1> ^arg-type predicate ^arg-status <a4>)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3>)
}



