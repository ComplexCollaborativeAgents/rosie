## LTI's are listed at https://docs.google.com/spreadsheets/d/1SNkkEIQo8q_8AkT6zwGYUDUBvRp2pjSrmTm3FheLR1Y
#

###############################################
# Manipulation Actions
# @1010XX

smem --add {

### @pick-up [001]
# 1 Argument: Pick up the <obj>
#             Pick up the yellow block
(@101001 ^handle pick-up1 ^procedural <proc001> ^item-type action)
(<proc001> ^op_name op_pick-up1 
          ^arg1 <parg0011>)
(<parg0011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0011>)


### @put-down [002]
# 2 Argument Version: Put the <obj> <rel> <obj2>
#                     Put the red block in the pantry
#(@101002 ^handle put-down1 ^procedural <proc002> ^item-type action)
#(<proc002> ^op_name op_put-down1 
#           ^arg1 <parg0021>
#           ^arg2 <parg0022>)
#   (<parg0021> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0021>)
#   (<parg0022> ^arg-type predicate ^importance optional ^arg-status desired ^id <pred-slot0022> ^2 <obj-slot0022>)

# 1 Argument Version: Put down the <obj>
#                     Put down the package
(@101002 ^handle put-down1 ^procedural <proc002> ^item-type action)
(<proc002> ^op_name op_put-down1 
           ^arg1 <parg0021>)
   (<parg0021> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0021>)
   

### @open [003]
# Open the <obj>
# Open the pantry
(@101003 ^handle open1 ^procedural <proc003> ^item-type action)
(<proc003> ^op_name op_open1 
          ^arg1 <parg0031>)
(<parg0031> ^arg-type object ^id <obj-slot0031>)


### @close [004]
# Close the <obj>
# Close the stove
(@101004 ^handle close1 ^procedural <proc004> ^item-type action)
(<proc004> ^op_name op_close1
          ^arg1 <parg0041>)
(<parg0041> ^arg-type object ^id <obj-slot0041>)
   
   
### @turn-on [005]
# Turn on the <obj>
# Turn on the lights
(@101005 ^handle turn-on1 ^procedural <proc005> ^item-type action)
(<proc005> ^op_name op_turn-on1 
          ^arg1 <parg0051>)
(<parg0051> ^arg-type object ^id <obj-slot0051>)


### @turn-off [006]
# Turn off the <obj>
# Turn off the stove
(@101006 ^handle turn-off1 ^procedural <proc006> ^item-type action)
(<proc006> ^op_name op_turn-off1 
          ^arg1 <parg0061>)
(<parg0061> ^arg-type object ^id <obj-slot0061>)

}


###############################################
# Robot Tasks
# @1011XX

smem --add {

### @move [101]
# 2 Argument Version: Move the <obj> <rel> <obj2>
#                     Move the red block onto the green block
 (@101101 ^handle move1 ^procedural <proc101> ^item-type action ^goal <goal101>)
 (<proc101> ^op_name op_move1
		   ^arg1 <parg1011> ^arg2 <parg1012> ^subactions <subs>)
   (<parg1011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1011>)
   (<parg1012> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot1012> ^2 <obj-slot1012>)
 (<goal101> ^predicate <gpred101>)
   (<gpred101> ^type relation ^id <pred-slot1012> ^1 <obj-slot1011> ^2 <obj-slot1012>)

### @store [102]
# Store the <obj>
(@101102 ^handle store1)

### @discard [103]
# Discard the <obj>
(@101103 ^handle discard1)

### @deliver [104]
# Deliver the <obj> to the <loc>
(@101104 ^handle deliver1)

### @fetch [105]
# Fetch a <obj>
# Fetch a <obj> from the <loc>
(@101105 ^handle fetch1)

## take
#(@101127 ^handle take1)
#
## guide
#(@101128 ^handle guide1)
#
## serve
#(@101129 ^handle serve1)
#
## bring
#(@101130 ^handle bring1)
#
## tell
#(@101031 ^handle tell1)
}


smem --add {

#####################################
# Internal/Virtual actions
### @write [101]
# 2 Argument Version: write a <num> onto <obj2>
#                     Write a five onto the green location
 (@101901 ^handle write1 ^procedural <proc101> ^item-type action ^goal <goal101>)
 (<proc101> ^op_name op_write1
		   ^arg1 <parg1011> ^arg2 <parg1012>)
   (<parg1011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1011>)
   (<parg1012> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot1012> ^2 <obj-slot1012>)
 (<goal101> ^predicate <gpred101>)
   (<gpred101> ^type relation ^id <pred-slot1012> ^1 <obj-slot1011> ^2 <obj-slot1012>)

}


###############################################
# Driving Tasks
# @1012XX

smem --add {

### @turn [201]
# Change direction, Turn [right|left|around]
(@101201 ^handle turn1 ^procedural <proc201> ^item-type action)
(<proc201> ^op_name op_turn1 
           ^arg1 <parg2011>)
  (<parg2011> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot2011>)

### @follow-wall [202]
# Follow the [right|left] wall
(@101202 ^handle follow-wall1 ^procedural <proc202> ^item-type action)
(<proc202> ^op_name op_follow-wall1 
           ^arg1 <parg2021>)
  (<parg2021> ^arg-type object ^importance required ^arg-status abstract ^id <conc-slot2021>)

### @orient [203]
# Orient [north|south|east|west]
(@101203 ^handle orient1 ^procedural <proc203> ^item-type action)
(<proc203> ^op_name op_orient1 
           ^arg1 <parg2031>)
  (<parg2031> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot2031>)

### @face [204]
# Face the <obj>
# Face the door
(@101204 ^handle face1 ^procedural <proc204> ^item-type action)
(<proc204> ^op_name op_face1
           ^arg1 <parg2041>)
  (<parg2041> ^arg-type object ^importance required ^arg-status real ^id <obj-slot2041>)
  
#### @drive-forward [205]
## Drive forward
#(@101205 ^handle drive-forward1 ^procedural <proc205> ^item-type action)
#(<proc205> ^op_name op_drive-forward
#           ^arg1 <parg2051>)
#  (<parg2051> ^arg-type concept ^importance optional ^arg-status abstract ^id <conc-slot2051>)

### @go-to [206]
# Go to the <loc>
(@101206 ^handle go-to1 ^procedural <proc206> ^item-type action)
(<proc206> ^op_name op_go-to1 
           ^arg2 <parg2062>)
  (<parg2062> ^arg-type predicate ^importance optional ^arg-status desired ^id <pred-slot2062> ^2 <obj-slot2062>)
  
### @go-to-waypoint1 [207]
# Used internally, used to navigate between any 2 waypoints
(@101207 ^handle go-to-waypoint1 ^procedural <proc207> ^item-type action)
(<proc207> ^op_name op_go-to-waypoint1 ^arg2 <parg2071>)
  (<parg2071> ^arg-type concept ^arg-status abstract ^id <conc-slot2071>)

### @go-to-next-waypoint1 [208]
# Used internally, navigate to an adjacent waypoint (edge traversal)
(@101208 ^handle go-to-next-waypoint1 ^procedural <proc208> ^item-type action)
(<proc208> ^op_name op_go-to-next-waypoint1 ^arg2 <parg2081>)
  (<parg2081> ^arg-type concept ^arg-status abstract ^id <conc-slot2081>)

### @stop [209]
# Stop
(@101209 ^handle stop1 ^procedural <proc209> ^item-type action)
(<proc209> ^op_name op_stop1)

# scan the room
(@101131 ^handle scan1 ^procedural <proc31> ^item-type action ^learn-proposal true)
(<proc31> ^op_name op_scan1)


(@101111 ^handle sense1 ^procedural <exp21> ^item-type action)
(<exp21> ^op_name op_sense1)

}

#######################################################  
#### external actions
#
#smem --add {
#
#
## give the package to Bob
#(@101126 ^handle give1 ^procedural <proc26> ^item-type action)
#(<proc26> ^op_name op_give1
#       ^arg1 <parg261>)
#       ^arg2 <parg262>)
#(<parg261> ^arg-type object ^importance required ^arg-status real ^id <obj-slot261>)
#(<parg262> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot262> ^2 <obj-slot262>) 
#
## Ask 'where do you want to go?'
#(@101030 ^handle ask1 ^procedural <proc30> ^item-type action ^learn-proposal true ^perform once)
#(<proc30> ^op_name op_ask1
#          ^arg1 <parg301>
#          ^match no)
#  (<parg301> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot301>)
#
## Say 'hello' to bob
#(@101116 ^handle say1 ^procedural <exp26> ^type action)
#(<exp26> ^op_name op_say1
#          ^arg1 <parg1161>
#          ^arg2 <parg1162>)
#(<parg1161> ^arg-type object ^arg-status abstract ^importance required ^id <obj-slot1161>)
#(<parg1162> ^arg-type object ^arg-status real ^importance optional ^id <obj-slot1162>)
#
## Find the red box
#  (@101020 ^handle find1 ^procedural <proc20> ^item-type action ^goal <goal20>)
#(<proc20> ^op_name op_find1 
#          ^arg1 <parg201>)
#  (<parg201> ^arg-type object ^arg-status real ^importance required ^id <obj-slot201>)
#  (<goal20> ^predicate <gp201>)
#  (<gp201> ^type state ^id <pred-slot201> ^1 <obj-slot201>)
#  (<pred-slot201> ^default <def201>)
#  (<def201> ^predicate-handle visible1)
#
### Explore
# (@101110 ^handle explore1 ^procedural <proc110> ^item-type action ^learn-proposal true)
# (<proc110> ^op_name op_explore1)
#
#
# (@101150 ^handle start-leading1 ^procedural <proc150> ^item-type action)
#  (<proc150> ^op_name op_start-leading1
#             ^arg1 <parg1501>)
#  (<parg1501> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1501>)
#
# (@101151 ^handle stop-leading1 ^procedural <proc151> ^item-type action)
#  (<proc151> ^op_name op_stop-leading1
#             ^arg1 <parg1501>)
#  (<parg1511> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1511>)
#
# (@101152 ^handle follow-person1 ^procedural <proc152> ^item-type action)
#  (<proc152> ^op_name op_follow-person1
#             ^arg1 <parg1501>)
#  (<parg1521> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1521>)
#
#}
#
###########################################################
## Internal Actions
#
#smem --add {
#  (@101112 ^handle remember1 ^procedural <proc112> ^item-type action ^learn-proposal true ^perform once)
#  (<proc112> ^op_name op_remember1
#              ^arg1 <parg1121> ^arg2 <parg1122>)
#   (<parg1121> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1121>)
#   (<parg1122> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot1122>)
# 
# (@101114 ^handle recall1 ^procedural <proc114> ^item-type action ^learn-proposal true ^perform once)
# (<proc114> ^op_name op_recall1
#             ^arg1 <parg1141> ^arg2 <parg1142>)
# (<parg1141> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1141>)
# (<parg1142> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot1142> ^2 <obj-slot1142>)
# 
# (@101125 ^handle think1 ^procedural <proc125> ^item-type action ^learn-proposal true ^perform once)
# (<proc125> ^op_name op_think1
#            ^arg1 <parg1251> ^arg2 <parg1252>)
# (<parg1251> ^arg-type predicate ^importance required ^arg-status real ^id <pred-slot1251> ^2 <obj-slot1251>)
# (<parg1252> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot1252> ^2 <obj-slot1252>)
#
# (@101111 ^handle sense1 ^procedural <exp21> ^item-type action)
# (<exp21> ^op_name op_sense1)
#}
#
############################################################
## TASKS
#
smem --add {
#
#
#
#

##
##### new wait
##     (@101007 ^handle wait1 ^procedural <ap10> ^item-type action)
##     (<ap10> ^op_name op_wait1)
##
##       
##     
##(@101011 ^handle stack)
##(@101012 ^handle cook1)
##(@101013 ^handle set)
##(@101014 ^handle clean)
##
##
##    
##(@101018 ^handle deliver1)
###        ^procedural <proc18> ^item-type action)
###(<proc18> ^op_name initiate-deliver1 
###          ^arg1 <parg181> ^arg2 <parg182>)
###  (<parg181> ^arg-type object ^id <obj-slot181>)
###  (<parg182> ^arg-type predicate ^id <pred-slot182> ^2 <obj-slot182>)
##    
##(@101019 ^handle fetch1)
###         ^procedural <proc19> ^item-type action)
###(<proc19> ^op_name initiate-fetch1 
###          ^arg1 <parg191> ^arg2 <parg192>)
###  (<parg191> ^arg-type object ^id <obj-slot191>)
###  (<parg192> ^arg-type predicate ^id <pred-slot192> ^2 <obj-slot192>)
##      
##  
### Interaction
##
##    
##(@101032 ^handle throw1 ^procedural <proc32> ^item-type action)
##(<proc32> ^op_name op_throw1
##          ^arg1 <parg321>)
##  (<parg321> ^arg-type object ^arg-status real ^id <obj-slot321>)
##
#
##  
## (@101113 ^handle check ^procedural <exp23> ^item-type action)
## (<exp23> ^op_name op_check1)
##   
#
##  
## (@101115 ^handle heard ^procedural <exp25> ^type action)
## (<exp25> ^op_name op_heard1)
#     
 
 (@101117 ^handle attend ^procedural <exp27> ^type action)
 (<exp27> ^op_name initiate-attend1)
 
 (@101118 ^handle ignore ^procedural <exp28> ^type action)
 (<exp28> ^op_name initiate-ignore1)
 
 (@101119 ^handle has ^procedural <exp29> ^type action)
 (<exp29> ^op_name initiate-has1)
 
 (@101120 ^handle play ^procedural <exp30> ^type action)
  (<exp30> ^op_name initiate-play1)
 
 (@101121 ^handle win ^procedural <exp31> ^type action)
 (<exp31> ^op_name initiate-win1)
 
 (@101122 ^handle lose ^procedural <exp32> ^type action)
 (<exp32> ^op_name initiate-lose1)
 
 (@101123 ^handle prefer ^procedural <exp33> ^type action)
 (<exp33> ^op_name initiate-prefer1) 
  
 (@101124 ^handle avoid ^procedural <exp34> ^type action)
 (<exp34> ^op_name initiate-avoid1)
 
 
 (@101143 ^handle think ^procedural <exp35> ^type action)
 (<exp35> ^op_name initiate-think1)

 (@101144 ^handle attack ^procedural <exp36> ^type action)
 (<exp36> ^op_name initiate-attack)
 

# (@101244 ^handle fill ^procedural <exp37> ^type action)
# (<exp37> ^op_name initiate-fill)
 

 (@101145 ^handle load ^procedural <exp37> ^type action)

 (<exp37> ^op_name initiate-load)
 
  (@101146 ^handle consider ^procedural <exp46> ^type action)
 (<exp46> ^op_name initiate-consider1) 
 
  (@101147 ^handle matches1) 
  (@101148 ^handle is1) 
  (@101149 ^handle covers1
          ^tense past)
}
