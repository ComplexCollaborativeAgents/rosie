#!##########################################################################
#!##########################################################################
#! Manipulation Actions
#! 001-099

### +pick-up [001]
# 1 Argument: Pick up the <obj>
#             Pick up the yellow block
smem --add {
   # word 'pick'
   (<pick> ^spelling |pick|
           ^referent <a001>
           ^super-type @60998
           ^can-be-part-of |pick-up|)

   # action 'pick-up'
   (<a001> ^handle pick-up1 ^procedural <proc001> ^item-type action)
   (<proc001> ^op_name op_pick-up1 
              ^arg1 <parg0011>)
   (<parg0011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0011>)
}


### +put-down [002]
# 1 Argument Version: Put down the <obj>
# 2 Argument Version: Put the <obj> <rel> <obj2>
smem --add {
   # word 'place'
   (<place> ^spelling |place|
            ^referent <a002>
            ^super-type @60999
            ^directional true)

   # word 'put'
   (<put> ^spelling |put|
          ^referent <a002>
          ^super-type @60985 
          ^directional true)

   # action 'put-down'
   (<a002> ^handle put-down1 ^procedural <proc002> ^item-type action)
   (<proc002> ^op_name op_put-down1 
              ^arg1 <parg0021>
              ^arg2 <parg0022>)
   (<parg0021> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0021>)
   (<parg0022> ^arg-type predicate ^importance optional ^arg-status desired ^id <pred-slot0022> ^2 <obj-slot0022>)
}


### +open [003]
# Open the <obj>
# Open the pantry
smem --add {
   # word 'open'
   (<open> ^spelling |open|
           ^referent <a003>
           ^super-type @60997                 
           ^can-be-part-of |open-up|)

   # word-pair 'open up'
   (<open-up> ^prior-word |open|
              ^current-word |up|
              ^spelling |open-up|
              ^super-type @60997 
              ^prior-word-first true
              ^referent <a003>)

   # action 'open'
   (<a003> ^handle open1 ^procedural <proc003> ^item-type action)
   (<proc003> ^op_name op_open1 
              ^arg1 <parg0031>)
   (<parg0031> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0031>)
}


### +close [004]
# Close the <obj>
# Close the stove
smem --add {
   # word 'close'
   (<close> ^spelling |close|
            ^referent <a004>
            ^super-type @60997 
            ^converts-to VP)

   # action 'close'
   (<a004> ^handle close1 ^procedural <proc004> ^item-type action)
   (<proc004> ^op_name op_close1
              ^arg1 <parg0041>)
   (<parg0041> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0041>)
}


### +turn-on [005]
# Turn on the <obj>
# Turn on the lights
smem --add {
   # word 'activate'
   (<activate> ^spelling |activate|
               ^referent <a005>
               ^super-type @60997)

   # word-pair 'turn on'
   (<turn-on> ^prior-word |turn|
              ^current-word |on|
              ^spelling |turn-on|
              ^super-type @60997 
              ^prior-word-first true
              ^referent <a005>)

   # turn <obj> on
   (@901 ^spelling |turn|
         ^structure-type V
         ^semantic-structure action
         ^tense present
         ^number singular
         ^assigners  <turna1>
         <turna2>
         <turna3>
         ^referent <a005>
         ^converts-to VP)
   (<turna1> ^structure-type DP
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg1
             ^before <turna2> 
             ^before <turna3>
             ^optional true)
   (<turna2> ^structure-type ADJ
             ^exclusive <turna3>
             ^lexical-item-spelling |on| 
             ^relative-position after
             ^after <turna1>
             ^syntactic-structure adjunct
             ^semantic-structure on-off-state
             ^required true
             ^referent-type literal)
   (<turna3> ^structure-type ADJ
             ^exclusive <turna2>
             ^lexical-item-spelling |off|
             ^relative-position after
             ^after <turna1>
             ^syntactic-structure adjunct
             ^semantic-structure on-off-state
             ^required true
             ^referent-type literal)

   # action 'turn-on'
   (<a005> ^handle turn-on1 ^procedural <proc005> ^item-type action)
   (<proc005> ^op_name op_turn-on1 
              ^arg1 <parg0051>)
   (<parg0051> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0051>)
}


### +turn-off [006]
# Turn off the <obj>
# Turn off the stove
smem --add {
   # word-pair 'turn off'
   (<turn-off> ^prior-word |turn|
               ^prior-word-lti @60001
               ^current-word |off|
               ^spelling |turn-off|
               ^super-type @60997 
               ^prior-word-first true
               ^referent <a006>)

   # action 'turn-off'
   (<a006> ^handle turn-off1 ^procedural <proc006> ^item-type action)
   (<proc006> ^op_name op_turn-off1 
              ^arg1 <parg0061>)
   (<parg0061> ^arg-type object ^id <obj-slot0061>)
}


### +write [007]
# 2 Argument Version: write a <num> onto <obj2>
#                     Write a five onto the green location
smem --add {
   # word 'write'
   (<write> ^spelling |write|
            ^referent <a007>
            ^tense present
            ^directional true
            ^super-type @60987)

   # action 'write'
   (<a007> ^handle write1 ^procedural <proc007> ^item-type action ^goal <goal007>)
   (<proc007> ^op_name op_write1
              ^arg1 <parg0071> ^arg2 <parg0072>)
   (<parg0071> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0071>)
   (<parg0072> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot0072> ^2 <obj-slot0072>)
   (<goal007> ^predicate <gpred007>)
   (<gpred007> ^type relation ^id <pred-slot0072> ^1 <obj-slot0071> ^2 <obj-slot0072>)
}


### +give [008]
# Give the <obj> to <person>.
smem --add {
   # word 'give'
   (<give> ^spelling |give|
           ^referent <a008>
           ^super-type @60999
           ^directional true)

   # action 'give'
   (<a008> ^handle give1 ^procedural <proc008> ^item-type action)
   (<proc008> ^op_name op_give1
             ^arg1 <parg0081> ^arg2 <parg0082>)
   (<parg0081> ^arg-type object ^importance required ^arg-status real ^id <obj-slot0081>)
   (<parg0082> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot0082> ^2 <obj-slot0082>) 
}


### +point [009]
# Point at the <obj>
smem --add {
   # word 'point'
   (<point> ^spelling |point|
            ^referent <a009>
            ^super-type @60995)

   # action 'point'
   (<a009> ^handle point1 ^procedural <proc009> ^item-type action)
   (<proc009> ^op_name op_point1
              ^arg1 <parg0091>)
   (<parg0091> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot0091> ^2 <obj-slot0091>)
}




#!####################################################################
#!####################################################################
#! Robot Tasks
#! 101-199

### +move [101]
# 2 Argument Version: Move the <obj> <rel> <obj2>
#                     Move the red block onto the green block
smem --add {
   # word 'move'
   (<move> ^spelling |move|
           ^referent <a101>
           ^tense present
           ^directional true
           ^super-type @60987)

   # word 'moved'
   #   (<moved> ^spelling |moved|
   #           ^referent <a101>
   #           ^tense past
   #           ^directional true
   #           ^super-type @60986)

   # word 'moving'
   (<moving> ^spelling |moving|
             ^super-type @20999 
             ^referent <a101>)

   # action 'moved'
   (<a101> ^handle move1 ^procedural <proc101> ^item-type action)
   (<proc101> ^op_name op_move1
              ^arg1 <parg1011> ^arg2 <parg1012>)
   (<parg1011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1011>)
   (<parg1012> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot1012> ^2 <obj-slot1012>)
   #(<a101> ^goal <goal101>)
   #(<goal101> ^predicate <gpred101>)
   #(<gpred101> ^type relation ^id <pred-slot1012> ^1 <obj-slot1011> ^2 <obj-slot1012>)
}


### +store [102]
# Store the <obj>
smem --add {
   # word 'store'
   (<store> ^spelling |store|
            ^referent <a102>
            ^super-type @60996)         

   # action 'store'
   (<a102> ^handle store1 ^item-type action)
}


### +discard [103]
# Discard the <obj>
smem --add {
   # word 'discard'
   (<discard> ^spelling |discard|
              ^referent <a103>
              ^super-type @60998)

   # action 'discard'
   (<a103> ^handle discard1 ^item-type action)
}


### +deliver [104]
# Deliver the <obj> to the <loc>
smem --add {
   # word 'deliver'
   (<deliver> ^spelling |deliver|
              ^referent <a104>
              ^super-type @60999
              ^directional true)

   # action 'deliver'
   (<a104> ^handle deliver1 ^item-type action)
}


### +fetch [105]
# Fetch a <obj>
# Fetch a <obj> from the <loc>
smem --add {
   # word 'fetch'
   (<fetch> ^spelling |fetch|
            ^referent <a105>
            ^super-type @60999
            ^directional true)

   # action 'fetch'
   (<a105> ^handle fetch1 ^item-type action)
}


### +take [106]
# Take the <obj> to the <loc>
smem --add {
   # word 'take'
   (<take> ^spelling |take|
           ^referent <a106>
           ^super-type @60999)

   # action 'take'
   (<a106> ^handle take1 ^item-type action)
}


### +guide [107]
# Guide <person>
smem --add {
   # word 'guide'
   (<guide> ^spelling |guide|
            ^referent <a107>
            ^super-type @60999)

   # action 'guide'
   (<a107> ^handle guide1 ^item-type action)
}


### +serve [108]
# Serve [person]
smem --add {
   # word 'serve'
   (<serve> ^spelling |serve|
            ^referent <a108>
            ^super-type @60999)

   # action 'serve'
   (<a108> ^handle serve1 ^item-type action)
}


### +bring [109]
# Bring <obj> to the <loc>
smem --add {
   # word 'bring'
   (<bring> ^spelling |bring|
            ^referent <a109>
            ^super-type @60999)

   # action 'bring'
   (<a109> ^handle bring1 ^item-type action)
}


### +tell [110]
# Tell <person> |Bob says hi|
smem --add {
   # word 'tell'
   (<tell> ^spelling |tell|
           ^referent <a110>
           ^super-type @60991)  # ALT: 60999

   # action 'tell'
   (<a110> ^handle tell1 ^item-type action)
}


### +stack [111]
# Stack the <obj1> and the <obj2>
smem --add {
   # word 'stack'
   (<stack> ^spelling |stack|
            ^structure-type V
            ^semantic-structure action
            ^tense present
            ^number singular
            ^assigners <stack1> <stack2> <stack3> <stack4> <stack5> 
            ^referent <a111>
            ^converts-to VP)
   (<stack1> ^structure-type DP
             ^before <stack3>
             ^before <stack5>
             ^syntactic-structure head
             ^semantic-structure arg1
             ^required true)
   (<stack2> ^structure-type CONJ
             ^before <stack4>
             ^syntactic-structure nil
             ^optional true)
   (<stack3> ^structure-type DP
             ^before <stack5>
             ^syntactic-structure head
             ^semantic-structure arg2
             ^optional true)
   (<stack4> ^structure-type CONJ
             ^syntactic-structure nil
             ^optional true)
   (<stack5> ^structure-type DP
             ^syntactic-structure head
             ^semantic-structure arg3
             ^optional true)

   # action 'stack'
   (<a111> ^handle stack ^item-type action)
}


### +cook [112]
# Cook the steak
smem --add {
   # word 'cook'
   (<cook> ^spelling |cook|
           ^referent <a112>
           ^super-type @60998)

   # action 'cook'
   (<a112> ^handle cook1 ^item-type action)
}


### +set [113]
# Set the table
   # AM: Check this
smem --add {
   # word 'set'
#          (<set> ^spelling |set|
   #                     ^referent <a113>
#                     ^super-type @60997)
#            #@60997

   (<set> ^spelling |set|
          ^referent <a113>
          ^directional true
          ^super-type @60997)
   (<a113> ^handle set)
}


### +clean [114]
# Clean up
# Clean the table
smem --add {
   # word 'clean'
   (<clean> ^spelling |clean|
            ^referent <a114>
            ^super-type @60997)

   # word-pair 'clean up'
   (<clean-up> ^prior-word |clean|
               ^prior-word-lti @60001
               ^current-word |up|
               ^spelling |clean-up|
               ^super-type @60997 
               ^prior-word-first true
               ^referent <a114>)           
            
   # action 'clean'
   (<a114> ^handle clean1 ^item-type action)
}


### +throw [115]
# Throw away the object
smem --add {
   # word 'throw'
   (<throw> ^spelling |throw|
            ^referent <a115>
            ^super-type @60998
            ^directional true) 

   # action 'throw'
   (<a115> ^handle throw1 ^procedural <proc115> ^item-type action)
   (<proc115> ^op_name op_throw1
              ^arg1 <parg1151>)
     (<parg1151> ^arg-type object ^arg-status real ^id <obj-slot1151>)
}


### +organize [116]
# Organize the table
smem --add {
   # word 'organize'
   (<organize> ^spelling |organize|
               ^referent <a116>
               ^super-type @60997)

   # action 'organize'
   (<a116> ^handle organize ^item-type action)
}



#!#############################################################################################
#!#############################################################################################
#! Driving Actions
#! 201-299

### +turn [201]
# Change direction, Turn [right|left|around]
smem --add {
   # word-pair 'turn left'
   (<turn-left>  ^prior-word |turn|
                 ^current-word |left|
                 ^spelling |turn-left|
                 ^structure-type CP
                 ^semantic-structure action
                 ^referent <a201>
                 ^semantic-structure2 arg1
                 ^referent2 @409002
                 ^prior-word-first true
                 ^message-type command)

   # word-pair 'turn right'
   (<turn-right> ^prior-word |turn|
                 ^current-word |right|
                 ^spelling |turn-right|
                 ^structure-type CP
                 ^semantic-structure action
                 ^referent <a201>
                 ^semantic-structure2 arg1
                 ^referent2 @409001
                 ^prior-word-first true
                 ^message-type command)

   # word-pair 'turn around'
   (<turn-around> ^prior-word |turn|
                  ^current-word |around|
                  ^spelling |turn-around|
                  ^structure-type CP
                  ^semantic-structure action
                  ^referent <a201>
                  ^semantic-structure2 arg1
                  ^referent2 @409003
                  ^prior-word-first true
                  ^message-type command)

   # action 'turn <dir>'
   (<a201> ^handle turn1 ^procedural <proc201> ^item-type action)
   (<proc201> ^op_name op_turn1 
              ^arg1 <parg2011>)
   (<parg2011> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot2011>)
}


### +follow-wall [202]
# Follow the [right|left] wall
smem --add {
   # word 'follow'
   (<follow> ^spelling |follow|
             ^super-type @60993
             ^referent <a202>) 

   # action 'follow'
   (<a202> ^handle follow-wall1 ^procedural <proc202> ^item-type action)
   (<proc202> ^op_name op_follow-wall1 
              ^arg1 <parg2021>)
   (<parg2021> ^arg-type object ^importance required ^arg-status abstract ^id <conc-slot2021>)
}


### +orient [203]
# Orient [north|south|east|west]
smem --add {
   # word 'orient'
   (<orient> ^spelling |orient|
             ^semantic-structure action
             ^referent <a203>
             ^converts-to VP
             ^structure-type V
             ^semantic-structure action
             ^tense present
             ^number singular
             ^assigners  <orient-a1>
             ^converts-to VP)  
   (<orient-a1> ^structure-type CARDINAL
                ^syntactic-structure head
                ^referent-type literal
                ^semantic-structure arg1
                ^required true)

   # action 'orient'
   (<a203> ^handle orient1 ^procedural <proc203> ^item-type action)
   (<proc203> ^op_name op_orient1 
              ^arg1 <parg2031>)
   (<parg2031> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot2031>)
}


### +face [204]
# Face the <obj>
# Face the door
smem --add {
   # word 'face'
   (<face> ^spelling |face|
           ^referent <a204>
           ^super-type @60998)

   # AM: The sentence 'Face the red box' didn't work with this included
   #           (<orient> ^spelling |face|
   #                      ^semantic-structure action
   #                      ^referent <a204>
   #                      ^converts-to VP
   #                      ^structure-type V
   #                      ^semantic-structure action
   #                      ^tense present
   #                      ^number singular
   #                      ^assigners <face-a1>
   #                      ^converts-to VP) 
   #          (<face-a1> ^structure-type CARDINAL
   #                 ^syntactic-structure head
   #                 ^referent-type literal
   #                 ^semantic-structure arg1
   #                 ^required true)

   # action 'face'
   (<a204> ^handle face1 ^procedural <proc204> ^item-type action)
   (<proc204> ^op_name op_face1
              ^arg1 <parg2041>)
   (<parg2041> ^arg-type object ^importance required ^arg-status real ^id <obj-slot2041>)
}


### +drive-TODO # AM: figure this out

   #   (<gox> ^spelling-single-word |go|
   #          ^structure-type CP
   #          ^semantic-structure action
   #          ^message-type command
   #          ^referent <a206>)          
   #
   #   (<forward> ^spelling |forward|
   #              ^super-type @60995
   #              ^referent <a206>) 
   #
   #   (<forwardx> ^spelling-single-word |forward|
   #               ^structure-type CP
   #               ^semantic-structure action
   #               ^message-type command
   #               ^referent <a206>) 
   #
   #   (<go-forward> ^prior-word |go|
   #                 ^current-word |forward|
   #                 ^spelling |go-forward|
   #                 ^super-type @60992
   #                 ^referent <a206>
   #                 ^prior-word-first true)
   #   
   #   (<go-down> ^prior-word |go|
   #              ^current-word |down|
   #              ^spelling |go-down|
   #              ^super-type @60993
   #              ^referent <a206>
   #              ^prior-word-first true)
   #
   #   # single-word-sentence 'drive'
   #   (<drivex> ^spelling-single-word |drive|
   #               ^structure-type CP
   #               ^semantic-structure action
   #               ^message-type command
   #               ^referent <a205>) 
   #           
   #   (<drive-down> ^prior-word |drive|
   #                 ^current-word |down|
   #                 ^spelling |drive-down|
   #                 ^super-type @60993
   #                 ^referent <a205>
   #                 ^prior-word-first true)
   #
   #   (<drive-forward> ^prior-word |drive|
   #                    ^current-word |forward|
   #                    ^spelling |drive-forward|
   #                    ^super-type @60992
   #                    ^referent <a205>
   #                    ^prior-word-first true)
   #

### +drive-forward [205]
# Drive forward.
# Drive.
# Drive down the hall.
   #smem --add {
   #   (<a205> ^handle drive-forward1 ^procedural <proc205> ^item-type action)
   #   (<proc205> ^op_name op_drive-forward
   #              ^arg1 <parg2051>)
   #   (<parg2051> ^arg-type concept ^importance optional ^arg-status abstract ^id <conc-slot2051>)
   #}


### +go-to [206]
# Go to the <loc>
# Drive to the <loc>
smem --add {
   # word 'drive'
   (<drive> ^spelling |drive|
            ^super-type @60992
            ^referent <a206>)

   # word 'go'
   (<go> ^spelling |go|
         ^referent <a206>
         ^super-type @60992)

   (<a206> ^handle go-to1 ^procedural <proc206> ^item-type action)
   (<proc206> ^op_name op_go-to1 
              ^arg2 <parg2062>)
   (<parg2062> ^arg-type predicate ^importance optional ^arg-status desired ^id <pred-slot2062> ^2 <obj-slot2062>)
}


### +go-to-waypoint1 [207]
# Used internally, used to navigate between any 2 waypoints
smem --add {
   # action 'go-to-waypoint'
   (<a207> ^handle go-to-waypoint1 ^procedural <proc207> ^item-type action)
   (<proc207> ^op_name op_go-to-waypoint1 ^arg2 <parg2071>)
   (<parg2071> ^arg-type concept ^arg-status abstract ^id <conc-slot2071>)
}


### +go-to-next-waypoint1 [208]
# Used internally, navigate to an adjacent waypoint (edge traversal)
smem --add {
   # action 'go-to-next-waypoint'
   (<a208> ^handle go-to-next-waypoint1 ^procedural <proc208> ^item-type action)
   (<proc208> ^op_name op_go-to-next-waypoint1 ^arg2 <parg2081>)
   (<parg2081> ^arg-type concept ^arg-status abstract ^id <conc-slot2081>)
}


### +stop [209]
# Stop.
smem --add {
   # word 'stop'
   (<stop> ^spelling |stop|
           ^referent <a209>
           ^super-type @60995)

   (<stop2> ^spelling |stop|
            ^structure-type MV
            ^semantic-structure action
            ^tense present
            ^number singular
            ^referent <a209>)

   # single-word 'stop'
   (<stop-sw> ^spelling-single-word |stop|
              ^structure-type CP
              ^semantic-structure action
              ^message-type command
              ^referent <a209>)

   # action 'stop'
   (<a209> ^handle stop1 ^procedural <proc209> ^item-type action)
   (<proc209> ^op_name op_stop1)
}


### +scan [210]
# scan the room
# Scan.
# Scan until you see the <obj>.
smem --add {
   # word 'scan'
   # AM: Are both of these legit?
   (<scan> ^spelling |scan|
           ^referent <a210>
           ^super-type @60992)
   (<scan2> ^spelling |scan|
            ^referent <a210>
            ^super-type @60995)

   # single-word 'scan'
   (<scan-sw> ^spelling-single-word |scan|
              ^structure-type CP
              ^semantic-structure action
              ^message-type command
              ^referent <a210>)

   # action 'scan'
   (<a210> ^handle scan1 ^procedural <proc210> ^item-type action ^learn-proposal true)
   (<proc210> ^op_name op_scan1)
}


### +explore [211]
# Explore.
# Explore until you see the <obj>.
smem --add {
   # word 'explore'
   (<explore> ^spelling |explore|
              ^referent <a211>
              ^super-type @60992)

   # single-word 'explore'
   (<explore-sw> ^spelling-single-word |explore|
                 ^structure-type CP
                 ^semantic-structure action
                 ^message-type command
                 ^referent <a211>)


   # action 'explore'
   (<a211> ^handle explore1 ^procedural <proc211> ^item-type action ^learn-proposal true)
   (<proc211> ^op_name op_explore1)
}


### +find [212]
# Find the <obj>
smem --add {
   # word 'find'
   (<find> ^spelling |find|
           ^super-type @60998 # ALT: 60999
           ^referent <a212>)

   # action 'find'
   (<a212> ^handle find1 ^procedural <proc212> ^item-type action ^goal <goal212>)
   (<proc212> ^op_name op_find1 
              ^arg1 <parg2121>)
      (<parg2121> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2121>)

   (<goal212> ^predicate <gp2121>)
      (<gp2121> ^type state ^id <pred-slot2121> ^1 <obj-slot2121>)
         (<pred-slot2121> ^default <def2121>)
         (<def2121> ^predicate-handle visible1)
}


### +start-leading [213]
# Start leading <person>
smem --add {
   # word-pair 'start leading'
   (<start-lead> ^prior-word |start|
                 ^current-word |leading|
                 ^spelling |start-leading|
                 ^super-type @60998
                 ^prior-word-first true
                 ^referent <a213>)

   # action 'start-leading'
   (<a213> ^handle start-leading1 ^procedural <proc213> ^item-type action)
   (<proc213> ^op_name op_start-leading1
              ^arg1 <parg2131>)
   (<parg2131> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2131>)
}


### +stop-leading [214]
# Stop leading <person>
smem --add {
   # word-pair 'stop leading'
   (<stop-lead> ^prior-word |stop|
                ^current-word |leading|
                ^spelling |stop-leading|
                ^super-type @60998
                ^prior-word-first true
                ^referent <a214>)

   # action 'stop-leading'
   (<a214> ^handle stop-leading1 ^procedural <proc214> ^item-type action)
   (<proc214> ^op_name op_stop-leading1
              ^arg1 <parg2141>)
   (<parg2141> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2141>)
}


### +start-following [215]
# Start following <person>
smem --add {
   # word-pair 'start following'
   (<start-follow> ^prior-word |start|
                   ^current-word |following|
                   ^spelling |start-following|
                   ^super-type @60998
                   ^prior-word-first true
                   ^referent <a215>)

   # action 'start-following'
   (<a215> ^handle start-following1 ^procedural <proc215> ^item-type action)
   (<proc215> ^op_name op_start-following1
              ^arg1 <parg2151>)
   (<parg2151> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2151>)
}


### +stop-following [216]
# Stop following <person>
smem --add {
   # word-pair 'stop following'
   (<stop-follow> ^prior-word |stop|
                  ^current-word |following|
                  ^spelling |stop-following|
                  ^super-type @60998
                  ^prior-word-first true
                  ^referent <a216>)

   # action 'stop-following'
   (<a216> ^handle stop-following1 ^procedural <proc216> ^item-type action)
   (<proc216> ^op_name op_stop-following1
              ^arg1 <parg2161>)
   (<parg2161> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2161>)
}


### +approach [217]
# Approach the <obj>
smem --add {
   # word 'approach'
   (<approach> ^spelling |approach|
               ^super-type @60998 
               ^referent <a217>)

   # action 'approach'
   (<a217> ^handle approach1 ^procedural <proc217> ^item-type action)
   (<proc217> ^op_name op_approach1 
              ^arg1 <parg2171>)
      (<parg2171> ^arg-type object ^arg-status real ^importance required ^id <obj-slot2171>)
}




#!#############################################################################################
#!#############################################################################################
#! Actions involving Language
#! 301-399


### +ask [301]
# Ask 'QUOTED MESSAGE'
smem --add {
   # word 'ask'
   (<ask> ^spelling |ask|
          ^referent <a301>
          ^structure-type V
          ^semantic-structure action
          ^tense present
          ^number singular
          ^assigners <ask-a1> <ask-a2> <ask-a3>
          ^converts-to VP)
   (<ask-a1> ^structure-type PN
             ^before <ask-a2> <ask-a3>
             ^relative-position after
             ^syntactic-structure head
             ^semantic-structure agent
             ^optional true) 
   (<ask-a2> ^structure-type U
             ^exclusive <ask-a3>
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg1
             ^optional true) 
   (<ask-a3> ^structure-type DP
             ^exclusive <ask-a2>
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg1
             ^optional true) 

   # action 'ask'
   (<a301> ^handle ask1 ^procedural <proc301> ^item-type action ^learn-proposal true ^perform once)
   (<proc301> ^op_name op_ask1
             ^arg1 <parg3011>
             ^match no)
   (<parg3011> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot3011>)
}

### +say [302]
# Say 'hello' to bob
  smem --add { 
   # word 'said'
   (<said> ^spelling |said|
           ^referent <a302>
           ^tense past
           ^super-type @60999) 

   # word 'say'
   (<say> ^spelling |say|
          ^referent <a302>
          ^structure-type V
          ^semantic-structure action
          ^tense present
          ^number singular
          ^assigners <say-a2> <say-a3>
          ^converts-to VP)
   (<say-a2> ^structure-type U
             ^exclusive <say-a3>
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg1
             ^optional true) 
   (<say-a3> ^structure-type DP
             ^exclusive <say-a2>
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg1
             ^optional true) 

   # action 'say'
   (<a302> ^handle say1 ^procedural <proc302> ^type action)
   (<proc302> ^op_name op_say1
              ^arg1 <parg3021>
              ^arg2 <parg3022>)
   (<parg3021> ^arg-type object ^arg-status abstract ^importance required ^id <obj-slot3021>)
   (<parg3022> ^arg-type object ^arg-status real ^importance optional ^id <obj-slot3022>)
}



#!#############################################################################################
#!#############################################################################################
#! Actions involving the Agent's internal state
#! 401-499

### +sense [401]
smem --add {
   # word 'see'
   (<see> ^spelling |see|
          ^referent <a401>
          ^super-type @60997)

   # word 'detect'
   (<detect> ^spelling |detect|
             ^referent <a401>
             ^super-type @60997)           

   # word 'sense'
   (<sensex> ^spelling |sense|
             ^referent <a401>
             ^super-type @60997)             

   # word 'encounter'
   (<encounter> ^spelling |encounter|
                ^referent <a401>
                ^super-type @60997)  

   # word 'reach'
   (<reach> ^spelling |reach|
            ^referent <a401>
            ^super-type @60997)

   # action 'sense'
   (<a401> ^handle sense1 ^procedural <proc401> ^item-type action)
   (<proc401> ^op_name op_sense1)
}


### +remember [402]
# Remember the current location as the starting location
smem --add {
   # word 'remember'
   (<remember>  ^spelling |remember|
                ^referent <a402>
                ^structure-type V
                ^semantic-structure action
                ^tense present
                ^number singular
                ^assigners <remember-a1> <remember-a2> <remember-a3>
                ^converts-to VP)
   (<remember-a1> ^structure-type DP
                  ^before <remember-a3>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
   (<remember-a2> ^structure-type P
                  ^syntactic-structure nil
                  ^lexical-item-spelling |as|
                  ^required true)
   (<remember-a3> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^required true)

   # word-pair 'remember if'
   (<remember-if>  ^prior-word |remember|
                   ^referent <a402>
                   ^spelling |remember-if|
                   ^current-word |if|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <remember-if-a1> <remember-if-a2> <remember-if-a3> 
                   ^converts-to VP)
   (<remember-if-a1> ^structure-type CP
                     ^before <remember-if-a2> <remember-if-a3> 
                     ^relative-position after
                     ^semantic-structure *embed*
                     ^embed-structure if-subclause
                     ^syntactic-structure nil
                     ^required true)
   (<remember-if-a2> ^structure-type P
                     ^before <remember-if-a3> 
                     ^lexical-item-spelling |as|
                     ^syntactic-structure nil
                     ^required true)
   (<remember-if-a3> ^structure-type DP
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg2
                     ^required true)

   # action 'remember'
   (<a402> ^handle remember1 ^procedural <proc402> ^item-type action ^learn-proposal true ^perform once)
   (<proc402> ^op_name op_remember1
              ^arg1 <parg4021> ^arg2 <parg4022>)
   (<parg4021> ^arg-type object ^importance required ^arg-status real ^id <obj-slot4021>)
   (<parg4022> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot4022>)
}


### +recall [403]
# Recall the soda in a location
smem --add {
   # word 'recall'
   (<rec>  ^spelling |recall|
           ^referent <a403>
           ^structure-type V
           ^semantic-structure action
           ^tense present
           ^number singular
           ^assigners <recall-a2> <recall-a3>
           ^converts-to VP)
   #         (<recall-a1> ^structure-type PN
   #                 ^exclusive <recall-a2> 
   #                 ^relative-position after
   #                 ^syntactic-structure head
   #                 ^semantic-structure arg1
   #                 ^optional true) 
   (<recall-a2> ^structure-type DP
                ^exclusive <recall-a1> 
                ^relative-position after
                ^syntactic-structure head
                ^semantic-structure arg1
                ^optional true)
   (<recall-a3>  ^structure-type PP
                 ^syntactic-structure complement
                 ^semantic-structure predicate
                 ^relative-position after
                 ^required true)
    
   # action 'recall'
   (<a403> ^handle recall1 ^procedural <proc403> ^item-type action ^learn-proposal true ^perform once)
    (<proc403> ^op_name op_recall1
                ^arg1 <parg4031> ^arg2 <parg4032>)
    (<parg4031> ^arg-type object ^importance required ^arg-status real ^id <obj-slot4031>)
    (<parg4032> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot4032> ^2 <obj-slot4032>)
}


### +think [404]
   # AM: EDIT: removed the 2nd argument 
   # 'Think of a storage location of the soda'
   # The soda argument is put under the first as a sub-relation
smem --add {
   (<think>  ^spelling |think|
             ^referent <a404>
             ^structure-type V
             ^semantic-structure action
             ^tense present
             ^assigners <think-a1> #<think-a2> <think-a1> 
             ^converts-to VP)
   (<think-a1> ^structure-type PP
   #                 ^before <think-a2> 
             ^relative-position after
             ^syntactic-structure complement
             ^semantic-structure arg2
             ^required true)
   #          (<think-a2>  ^structure-type PP
   #                    ^syntactic-structure complement
   #                    ^semantic-structure arg1
   #                    ^relative-position after
   #                    ^required true)


   # action 'think'
   (<a404> ^handle think1 ^procedural <proc404> ^item-type action ^learn-proposal true ^perform once)
   (<proc404> ^op_name op_think1
              ^arg1 <parg4041> ^arg2 <parg4042>)
   (<parg4041> ^arg-type predicate ^importance required ^arg-status real ^id <pred-slot4041> ^2 <obj-slot4041>)
   (<parg4042> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot4042> ^2 <obj-slot4042>)
}


### +heard [405]
smem --add {
   # word 'heard'
   (<heard> ^spelling |heard|
            ^referent <a405>
            ^structure-type V
            ^semantic-structure action
            ^tense present
            ^number singular
            ^assigners <heard-a1> <heard-a2>
            ^converts-to VP)
   (<heard-a1> ^structure-type PN
               ^before <heard-a2> 
               ^relative-position before
               ^syntactic-structure head
               ^semantic-structure agent
               ^required true) 
   (<heard-a2> ^structure-type DP
          ^relative-position after
          ^syntactic-structure complement
          ^semantic-structure arg1
          ^optional true) 

   # action 'heard'
   (<a405> ^handle heard ^procedural <proc405> ^type action)
   (<proc405> ^op_name op_heard1)
}



### +wait [406]
smem --add {
   # single-word 'wait'
   (<wait> ^spelling-single-word |wait|
           ^structure-type CP
           ^message-type wait)

   # word 'wait'
   (<wait2> ^spelling |wait|
            ^super-type @60993 
            ^referent <a406>)

   # action 'wait'
   (<a406> ^handle wait1 ^procedural <proc406> ^item-type action)
   (<proc406> ^op_name op_wait1)
}



### +check [407]
smem --add {
   # word 'check'
   (<check> ^spelling |check|
            ^super-type @60990 
            ^referent <a407>)

   # word 'test'
   (<test> ^spelling |test|
           ^super-type @60990 
           ^referent <a407>)

   # action 'check'
   (<a407> ^handle check1 ^procedural <proc407> ^item-type action)
   (<proc407> ^op_name op_check1)
}




#!#############################################################################################
#!#############################################################################################
#! Game Actions
#! 501-599


### +attend [501]
smem --add {
   # word 'attend'
   (<attend> ^spelling |attend|
             ^referent <a501>
             ^super-type @60988)

   # word-pair 'attend to'
   (<attend-to> ^prior-word |attend|
                ^current-word |to|
                ^spelling |attend-to|
                ^super-type @60998
                ^referent <a501>
                ^consumes-prior-word true)

   # action 'attend'
   (<a501> ^handle attend ^procedural <proc501> ^type action)
   (<proc501> ^op_name initiate-attend1)
}


### +ignore [502]
smem --add {
   # word 'ignore'
   (<ignore> ^spelling |ignore|
             ^referent <a502>
             ^super-type @60988) 

   # action 'ignore'
   (<a502> ^handle ignore ^procedural <proc502> ^type action)
   (<proc502> ^op_name initiate-ignore1)
}


### +have [503]
smem --add {
   # word 'have'
   (<have> ^spelling |have|
           ^super-type @60989 
           ^referent <a503>)

   # word 'has'
   (<has> ^spelling |has|
          ^super-type @60989
          ^referent <a503>)

   # action 'has'
   (<a503> ^handle has ^procedural <proc503> ^type action)
   (<proc503> ^op_name initiate-has1)
}


### +play [504]
smem --add {
   # word 'play'
   (<play> ^spelling |play|
           ^super-type @60999 
           ^referent <a504>)

   # word 'playing'
   (<playing> ^spelling |playing|
              ^super-type @20999 
              ^referent <a504>)
   
   # word 'placing'
   (<placing> ^spelling |placing|
              ^super-type @20999 
              ^referent <a504>)
           

   # action 'play'
   (<a504> ^handle play ^procedural <proc504> ^type action)
   (<proc504> ^op_name initiate-play1)
}


### +win [505]
smem --add {
   # word 'win'
   (<win> ^spelling |win|
           ^super-type @60993 
           ^referent <a505>)

   # word 'wins'
   (<wins> ^spelling |wins|
            ^super-type @60993 
            ^referent <a505>)

   # action 'win'
   (<a505> ^handle win ^procedural <proc505> ^type action)
   (<proc505> ^op_name initiate-win1)
}


### +lose [506]
smem --add {
   # word 'lose'
   (<lose> ^spelling |lose|
           ^super-type @60993 
           ^referent <a506>)

   # action 'lose'
   (<a506> ^handle lose ^procedural <proc506> ^type action)
   (<proc506> ^op_name initiate-lose1)
}


### +prefer [507]
smem --add {
   # word 'prefer'
   (<prefer> ^spelling |prefer|
             ^structure-type V
             ^semantic-structure action
             ^tense present
             ^number singular
             ^assigners  <prefera1>
             <prefera2>
             <prefera3>
             ^referent <a507>
             ^converts-to VP)
   (<prefera1> ^structure-type GP  #Gerund Phrase
               ^relative-position after
               ^syntactic-structure complement
               ^semantic-structure *embed*
               ^embed-structure subclause1
               ^before <prefera2> 
               ^before <prefera3>
               ^required true)
   (<prefera2> ^structure-type P
               ^lexical-item-spelling |over| 
               ^before <prefera3>
               ^syntactic-structure adjunct
               ^optional true
               ^referent-type literal)
   (<prefera3> ^structure-type GP  #Gerund Phrase
               ^syntactic-structure complement2
               ^semantic-structure *embed*
               ^embed-structure subclause2
               ^optional true)

   # action 'prefer'
   (<a507> ^handle prefer ^procedural <proc507> ^type action)
   (<proc507> ^op_name initiate-prefer1) 
}


### +avoid [508]
smem --add {
   # word 'avoid'
   (<avoid> ^spelling |avoid|
            ^structure-type V
            ^semantic-structure action
            ^tense present
            ^number singular
            ^assigners  <avoida1>
            <avoida2>
            <avoida3>
            ^referent <a508>
            ^converts-to VP)
   (<avoida1> ^structure-type GP  #Gerund Phrase
              ^relative-position after
              ^syntactic-structure complement
              ^semantic-structure *embed*
              ^embed-structure subclause1  #James fix inconsistent use of subclause vs subclause1
              ^before <avoida2> 
              ^before <avoida3>
              ^required true)
   (<avoida2> ^structure-type P
              ^lexical-item-spelling |over| 
              ^before <avoida3>
              ^syntactic-structure adjunct
              ^semantic-structure on-off-state
              ^optional true
              ^referent-type literal)
   (<avoida3> ^structure-type GP  #Gerund Phrase
              ^semantic-structure *embed*
              ^embed-structure subclause2
              ^optional true)

   # action 'avoid'
   (<a508> ^handle avoid ^procedural <proc508> ^type action)
   (<proc508> ^op_name initiate-avoid1)
}


### +attack [509]
smem --add {
   # word 'attack'
   #          (<attack> ^spelling |attack|
   #                   ^referent <a509>
   #                   ^super-type @60997) 
   (<attack> ^spelling |attack|
             ^referent <a509>
             ^super-type @60999
             ^directional true)

   # action 'attack'
   (<a509> ^handle attack ^procedural <proc509> ^type action)
   (<proc509> ^op_name initiate-attack)
}


### +fill [510]
smem --add {
   # word 'fill'
   (<fill> ^spelling |fill|
           ^referent <a510>
           ^super-type @60999
           ^directional true)

   # action 'fill'
   (<a510> ^handle fill ^procedural <proc510> ^type action)
   (<proc510> ^op_name initiate-fill)
}


### +load [511]
smem --add {
   # word 'load'
   (<load> ^spelling |load|
           ^semantic-structure action
           ^referent <a511>
           ^converts-to VP
           ^structure-type V
           ^semantic-structure action
           ^tense present
           ^number singular
           ^assigners  <load-a1>
           ^converts-to VP)  
   (<load-a1> ^structure-type U
              ^syntactic-structure head
              ^referent-type literal
              ^semantic-structure arg1
              ^required true)

   # action 'load'
   (<a511> ^handle load ^procedural <proc511> ^type action)
   (<proc511> ^op_name initiate-load)
}


### +consider [512]
smem --add {
   # word 'consider'
   (<consider> ^spelling |consider|
               ^structure-type V
               ^semantic-structure action
               ^tense present
               ^number singular
               ^assigners <considera1> <considera2> <considera3>
               ^referent <a512>
               ^converts-to VP)
   (<considera1> ^structure-type GP  #Gerund Phrase
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure *embed*
                 ^embed-structure subclause1
                 ^before <considera2> 
                 ^before <considera3>
                 ^required true)
   (<considera2> ^structure-type P
                 ^lexical-item-spelling |over| 
                 ^before <considera3>
                 ^syntactic-structure adjunct
                 ^optional true
                 ^referent-type literal)
   (<considera3> ^structure-type GP  #Gerund Phrase
                 ^syntactic-structure complement2
                 ^semantic-structure *embed*
                 ^embed-structure subclause2
                 ^optional true)

   # action 'consider'
   (<a512> ^handle consider ^procedural <proc512> ^type action)
   (<proc512> ^op_name initiate-consider1) 
}



### +match [513]
smem --add {
   # word 'matches'
   (<matches> ^spelling |matches|
              ^referent <a513>
              ^tense present
              ^directional true
              ^super-type @60987)
   # word 'matched'
   #           (<matched> ^spelling |matched-v|
   #                   ^current-word |matched|
   #                   ^prior-word-stale false
   #                   ^prior-word IS-V
   #                   ^prior-word |not|
   #                   ^prior-word-first false
   #                   ^referent <a513>
   #                   ^tense past
   #                   ^super-type @60986)                             

   (<a513> ^handle matches1) 
}


### +cover [514]
   #smem --add {
   #      ## covered                                        ## JEL - decide was not covered - should be adj. 
   #           (<covered> ^spelling |covered-v|
   #                   ^current-word |covered|
   #                   ^prior-word-stale false
   #                   ^prior-word RC
   #                   ^prior-word ADV
   #                   ^prior-word-first false
   #                   ^referent <a514>
   #                   ^tense past
   #                   ^super-type @60986) 
   #(<a514> ^handle covers1
   #         ^tense past)
   #}


### +perform [515]
smem --add {
   # word 'perform'
   (<perform> ^spelling |perform|
              ^referent <a515>
              ^super-type @60998)

   # action 'perform'
   (<a515> ^handle perform1 ^item-type action)

}
