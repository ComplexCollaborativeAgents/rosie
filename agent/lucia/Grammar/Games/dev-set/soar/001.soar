#   Soar code produced automatically 
#   from file 'C:\Users\plindes\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\001.ecg'.

#   NAME construction
sp {comprehend-word*apply*lexical-access*NAME-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |name|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name NAME
          ^is <a>
          ^orth |name|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e-meaning>)
   (<a> ^a NAME)
   (<e-meaning> ^schema Name
                ^target <meaning>)
}

#   PUZZLE construction
sp {comprehend-word*apply*lexical-access*PUZZLE-puzzle
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |puzzle|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PUZZLE
          ^is <a>
          ^orth |puzzle|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e-meaning>)
   (<a> ^a PUZZLE)
   (<e-meaning> ^schema Puzzle
                ^target <meaning>)
}

#   OF construction
sp {comprehend-word*apply*lexical-access*OF-of
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |of|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name OF
          ^is <a>
          ^orth |of|
          ^f <form>
          ^m <meaning>
          ^subcase-of Preposition)
   (<a> ^a OF)
}

#   OF self.m.name <-- "of1" constraint
sp {comprehend-word*OF-constraint*self-m-name*ASSIGN*of1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a OF
          ^orth |of|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |of1| })
-->
   (<l-slot1> ^name <target> -
              ^name |of1|)
}

#   Propose an operator for the WordDefinitionSentence construction
sp {comprehend-word*propose*match-construction*WordDefinitionSentence
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <word>)
   (<word> ^is.a UNKNOWN-WORD
           ^previous <tobe>)
   (<tobe> ^is.a FiniteToBe
           ^previous <object>)
   (<object> ^is.a RefExpr
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name WordDefinitionSentence
        ^span 3
        ^word <word>
        ^tobe <tobe>
        ^object <object>
        ^previous <previous>
        ^debug-info (concat |Match a WordDefinitionSentence construction, combination 0.|))
}

#   Apply the operator for the WordDefinitionSentence construction
sp {comprehend-word*apply*match-construction*WordDefinitionSentence
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name WordDefinitionSentence
        ^object <object>
        ^tobe <tobe>
        ^word <word>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name WordDefinitionSentence
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^object <object>
              ^tobe <tobe>
              ^word <word>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a WordDefinitionSentence)
   (<constituents> ^object <object>
                   ^tobe <tobe>
                   ^word <word>)
   (<e-meaning> ^schema WordDefinition
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a WordDefinitionSentence construction.|))
}

#   WordDefinitionSentence self.m.object <--> object.m constraint
sp {comprehend-word*WordDefinitionSentence-constraint*self-m-object*UNIFY*object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WordDefinitionSentence
          ^m <l-slot1>
          ^object <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   WordDefinitionSentence self.m.word <--> word.word.orth constraint
sp {comprehend-word*WordDefinitionSentence-constraint*self-m-word*UNIFY*word-word-orth
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WordDefinitionSentence
          ^m <l-slot1>
          ^word <r-slot1>)
   (<l-slot1> ^word { <target> <> <value> })
   (<r-slot1> ^word <r-slot2>)
   (<r-slot2> ^orth <value>)
-->
   (<l-slot1> ^word <target> -
              ^word <value>)
}

#   Name schema
sp {comprehend-word*evoked-schema*Name*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Name
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Name schema
sp {comprehend-word*evoked-schema*Name*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Puzzle
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

#   WordDefinition schema
sp {comprehend-word*evoked-schema*WordDefinition*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WordDefinition
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name WordDefinition
               ^is <a>
               ^word nil
               ^object nil)
   (<a> ^a WordDefinition)
}

#   WordDefinition schema
sp {comprehend-word*evoked-schema*WordDefinition*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WordDefinition
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^word nil
               ^object nil)
   (<a> ^a WordDefinition)
}

