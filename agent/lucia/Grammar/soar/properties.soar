#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\properties.ecg'.

#   SMALL construction
sp {comprehend-word*apply*lexical-access*SMALL-small
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |small|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SMALL
          ^is <a>
          ^orth |small|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a SMALL)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   SMALL self.m.class <-- @size constraint
sp {comprehend-word*SMALL-constraint*self-m-class*ASSIGN*AT-size
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SMALL
          ^orth |small|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |size| })
-->
   (<l-slot1> ^class <target> -
              ^class |size|)
}

#   SMALL self.m.name <-- "small1" constraint
sp {comprehend-word*SMALL-constraint*self-m-name*ASSIGN*small1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SMALL
          ^orth |small|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |small1| })
-->
   (<l-slot1> ^name <target> -
              ^name |small1|)
}

#   MEDIUM construction
sp {comprehend-word*apply*lexical-access*MEDIUM-medium
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |medium|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name MEDIUM
          ^is <a>
          ^orth |medium|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a MEDIUM)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   MEDIUM self.m.class <-- @size constraint
sp {comprehend-word*MEDIUM-constraint*self-m-class*ASSIGN*AT-size
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a MEDIUM
          ^orth |medium|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |size| })
-->
   (<l-slot1> ^class <target> -
              ^class |size|)
}

#   MEDIUM self.m.name <-- "medium1" constraint
sp {comprehend-word*MEDIUM-constraint*self-m-name*ASSIGN*medium1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a MEDIUM
          ^orth |medium|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |medium1| })
-->
   (<l-slot1> ^name <target> -
              ^name |medium1|)
}

#   BIG construction
sp {comprehend-word*apply*lexical-access*BIG-big
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |big|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BIG
          ^is <a>
          ^orth |big|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a BIG)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   BIG self.m.class <-- @size constraint
sp {comprehend-word*BIG-constraint*self-m-class*ASSIGN*AT-size
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BIG
          ^orth |big|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |size| })
-->
   (<l-slot1> ^class <target> -
              ^class |size|)
}

#   BIG self.m.name <-- "large1" constraint
sp {comprehend-word*BIG-constraint*self-m-name*ASSIGN*large1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BIG
          ^orth |big|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |large1| })
-->
   (<l-slot1> ^name <target> -
              ^name |large1|)
}

#   LARGE construction
sp {comprehend-word*apply*lexical-access*LARGE-large
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |large|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name LARGE
          ^is <a>
          ^orth |large|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a LARGE)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   LARGE self.m.class <-- @size constraint
sp {comprehend-word*LARGE-constraint*self-m-class*ASSIGN*AT-size
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LARGE
          ^orth |large|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |size| })
-->
   (<l-slot1> ^class <target> -
              ^class |size|)
}

#   LARGE self.m.name <-- "large1" constraint
sp {comprehend-word*LARGE-constraint*self-m-name*ASSIGN*large1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LARGE
          ^orth |large|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |large1| })
-->
   (<l-slot1> ^name <target> -
              ^name |large1|)
}

#   GREEN construction
sp {comprehend-word*apply*lexical-access*GREEN-green
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |green|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name GREEN
          ^is <a>
          ^orth |green|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a GREEN)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   GREEN self.m.class <-- @color constraint
sp {comprehend-word*GREEN-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a GREEN
          ^orth |green|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   GREEN self.m.name <-- "green1" constraint
sp {comprehend-word*GREEN-constraint*self-m-name*ASSIGN*green1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a GREEN
          ^orth |green|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |green1| })
-->
   (<l-slot1> ^name <target> -
              ^name |green1|)
}

#   RED construction
sp {comprehend-word*apply*lexical-access*RED-red
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |red|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name RED
          ^is <a>
          ^orth |red|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a RED)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   RED self.m.class <-- @color constraint
sp {comprehend-word*RED-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RED
          ^orth |red|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   RED self.m.name <-- "red1" constraint
sp {comprehend-word*RED-constraint*self-m-name*ASSIGN*red1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RED
          ^orth |red|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |red1| })
-->
   (<l-slot1> ^name <target> -
              ^name |red1|)
}

#   PURPLE construction
sp {comprehend-word*apply*lexical-access*PURPLE-purple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |purple|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PURPLE
          ^is <a>
          ^orth |purple|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a PURPLE)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   PURPLE self.m.class <-- @color constraint
sp {comprehend-word*PURPLE-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PURPLE
          ^orth |purple|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   PURPLE self.m.name <-- "purple1" constraint
sp {comprehend-word*PURPLE-constraint*self-m-name*ASSIGN*purple1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PURPLE
          ^orth |purple|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |purple1| })
-->
   (<l-slot1> ^name <target> -
              ^name |purple1|)
}

#   ORANGE construction
sp {comprehend-word*apply*lexical-access*ORANGE-orange
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |orange|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ORANGE
          ^is <a>
          ^orth |orange|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a ORANGE)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   ORANGE self.m.class <-- @color constraint
sp {comprehend-word*ORANGE-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ORANGE
          ^orth |orange|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   ORANGE self.m.name <-- "orange1" constraint
sp {comprehend-word*ORANGE-constraint*self-m-name*ASSIGN*orange1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ORANGE
          ^orth |orange|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |orange1| })
-->
   (<l-slot1> ^name <target> -
              ^name |orange1|)
}

#   CLEAR construction
sp {comprehend-word*apply*lexical-access*CLEAR-clear
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |clear|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CLEAR
          ^is <a>
          ^orth |clear|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a CLEAR)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   CLEAR self.m.class <-- @state constraint
sp {comprehend-word*CLEAR-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CLEAR
          ^orth |clear|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   CLEAR self.m.name <-- "clear" constraint
sp {comprehend-word*CLEAR-constraint*self-m-name*ASSIGN*clear
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CLEAR
          ^orth |clear|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |clear| })
-->
   (<l-slot1> ^name <target> -
              ^name |clear|)
}

#   OFF construction
sp {comprehend-word*apply*lexical-access*OFF-off
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |off|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name OFF
          ^is <a>
          ^orth |off|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a OFF)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   OFF self.m.class <-- @state constraint
sp {comprehend-word*OFF-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a OFF
          ^orth |off|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   OFF self.m.name <-- "turned-off1" constraint
sp {comprehend-word*OFF-constraint*self-m-name*ASSIGN*turned-off1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a OFF
          ^orth |off|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |turned-off1| })
-->
   (<l-slot1> ^name <target> -
              ^name |turned-off1|)
}

#   COOKED construction
sp {comprehend-word*apply*lexical-access*COOKED-cooked
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |cooked|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name COOKED
          ^is <a>
          ^orth |cooked|
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^evokes <e1>)
   (<a> ^a COOKED)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   COOKED self.m.class <-- @state constraint
sp {comprehend-word*COOKED-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a COOKED
          ^orth |cooked|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   COOKED self.m.name <-- "cooked" constraint
sp {comprehend-word*COOKED-constraint*self-m-name*ASSIGN*cooked
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a COOKED
          ^orth |cooked|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |cooked| })
-->
   (<l-slot1> ^name <target> -
              ^name |cooked|)
}

#   RIGHT construction
sp {comprehend-word*apply*lexical-access*RIGHT-right
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |right|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name RIGHT
          ^is <a>
          ^orth |right|
          ^f <form>
          ^m <meaning>
          ^subcase-of Direction
          ^evokes <e1>)
   (<a> ^a RIGHT)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   RIGHT self.m.class <-- @relative-direction1 constraint
sp {comprehend-word*RIGHT-constraint*self-m-class*ASSIGN*AT-relative-direction1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RIGHT
          ^orth |right|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |relative-direction1| })
-->
   (<l-slot1> ^class <target> -
              ^class |relative-direction1|)
}

#   RIGHT self.m.name <-- "right1" constraint
sp {comprehend-word*RIGHT-constraint*self-m-name*ASSIGN*right1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RIGHT
          ^orth |right|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |right1| })
-->
   (<l-slot1> ^name <target> -
              ^name |right1|)
}

#   LEFT construction
sp {comprehend-word*apply*lexical-access*LEFT-left
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |left|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name LEFT
          ^is <a>
          ^orth |left|
          ^f <form>
          ^m <meaning>
          ^subcase-of Direction
          ^evokes <e1>)
   (<a> ^a LEFT)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   LEFT self.m.class <-- @relative-direction1 constraint
sp {comprehend-word*LEFT-constraint*self-m-class*ASSIGN*AT-relative-direction1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LEFT
          ^orth |left|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |relative-direction1| })
-->
   (<l-slot1> ^class <target> -
              ^class |relative-direction1|)
}

#   LEFT self.m.name <-- "left1" constraint
sp {comprehend-word*LEFT-constraint*self-m-name*ASSIGN*left1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LEFT
          ^orth |left|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |left1| })
-->
   (<l-slot1> ^name <target> -
              ^name |left1|)
}

#   AROUND construction
sp {comprehend-word*apply*lexical-access*AROUND-around
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |around|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name AROUND
          ^is <a>
          ^orth |around|
          ^f <form>
          ^m <meaning>
          ^subcase-of Direction
          ^evokes <e1>)
   (<a> ^a AROUND)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   AROUND self.m.class <-- @relative-direction1 constraint
sp {comprehend-word*AROUND-constraint*self-m-class*ASSIGN*AT-relative-direction1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AROUND
          ^orth |around|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |relative-direction1| })
-->
   (<l-slot1> ^class <target> -
              ^class |relative-direction1|)
}

#   AROUND self.m.name <-- "around1" constraint
sp {comprehend-word*AROUND-constraint*self-m-name*ASSIGN*around1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AROUND
          ^orth |around|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |around1| })
-->
   (<l-slot1> ^name <target> -
              ^name |around1|)
}

#   FORWARD-direction construction
sp {comprehend-word*apply*lexical-access*FORWARD-direction-forward
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |forward|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FORWARD-direction
          ^is <a>
          ^orth |forward|
          ^f <form>
          ^m <meaning>
          ^subcase-of Direction
          ^evokes <e1>)
   (<a> ^a FORWARD-direction)
   (<e1> ^schema PropertyDescriptor
         ^target <meaning>)
}

#   FORWARD-direction self.m.class <-- @relative-direction1 constraint
sp {comprehend-word*FORWARD-direction-constraint*self-m-class*ASSIGN*AT-relative-direction1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FORWARD-direction
          ^orth |forward|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |relative-direction1| })
-->
   (<l-slot1> ^class <target> -
              ^class |relative-direction1|)
}

#   FORWARD-direction self.m.name <-- "forward" constraint
sp {comprehend-word*FORWARD-direction-constraint*self-m-name*ASSIGN*forward
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FORWARD-direction
          ^orth |forward|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |forward| })
-->
   (<l-slot1> ^name <target> -
              ^name |forward|)
}

