#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-locations.ecg'.

#   KnownObject schema
sp {comprehend-word*evoked-schema*KnownObject*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema KnownObject
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name KnownObject
               ^is <a>
               ^handle nil)
   (<a> ^a KnownObject)
   (<e1> ^schema RefDesc
         ^target <e-target>)
}

#   KnownObject schema
sp {comprehend-word*evoked-schema*KnownObject*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema KnownObject
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^handle nil)
   (<a> ^a KnownObject)
   (<e1> ^schema RefDesc
         ^target <e-target>)
}

#   MapLocation schema
sp {comprehend-word*evoked-schema*MapLocation*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MapLocation
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name MapLocation
               ^is <a>)
   (<a> ^a MapLocation)
   (<e1> ^schema KnownObject
         ^target <e-target>)
}

#   MapLocation schema
sp {comprehend-word*evoked-schema*MapLocation*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MapLocation
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a MapLocation)
   (<e1> ^schema KnownObject
         ^target <e-target>)
}

#   Kitchen schema
sp {comprehend-word*evoked-schema*Kitchen*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Kitchen
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Kitchen
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Kitchen)
   (<e1> ^schema MapLocation
         ^target <e-target>)
   (<c1> ^attr handle
         ^value kitchen1)
}

#   Kitchen schema
sp {comprehend-word*evoked-schema*Kitchen*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Kitchen
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Kitchen)
   (<e1> ^schema MapLocation
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr handle
         ^value kitchen1)
}

