#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-arg-structs.ecg'.

#   Propose an operator for the ActInDirectionForDistance construction
sp {comprehend-word*propose*match-construction*ActInDirectionForDistance
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <distance>)
   (<distance> ^is.a NumberOfUnits
               ^previous <action>)
   (<action> ^is.a ActInDirection
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name ActInDirectionForDistance
        ^span 2
        ^distance <distance>
        ^action <action>
        ^previous <previous>
        ^debug-info (concat |Match a ActInDirectionForDistance construction, combination 0.|))
}

#   Apply the operator for the ActInDirectionForDistance construction
sp {comprehend-word*apply*match-construction*ActInDirectionForDistance
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name ActInDirectionForDistance
        ^action <action>
        ^distance <distance>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name ActInDirectionForDistance
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Imperative
              ^constituents <constituents>
              ^action <action>
              ^distance <distance>
              ^evokes <e1>
              ^previous <previous>)
   (<a> ^a ActInDirectionForDistance)
   (<constituents> ^action <action>
                   ^distance <distance>)
   (<e1> ^schema MoveDistance
         ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a ActInDirectionForDistance construction.|))
}

#   ActInDirectionForDistance self.m.action <--> action.m constraint
sp {comprehend-word*ActInDirectionForDistance-constraint*self-m-action*UNIFY*action-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ActInDirectionForDistance
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   ActInDirectionForDistance self.m.direction <--> action.m.direction constraint
sp {comprehend-word*ActInDirectionForDistance-constraint*self-m-direction*UNIFY*action-m-direction
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ActInDirectionForDistance
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^direction { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^direction <value>)
-->
   (<l-slot1> ^direction <target> -
              ^direction <value>)
}

#   ActInDirectionForDistance self.m.distance <--> distance.m constraint
sp {comprehend-word*ActInDirectionForDistance-constraint*self-m-distance*UNIFY*distance-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ActInDirectionForDistance
          ^m <l-slot1>
          ^distance <r-slot1>)
   (<l-slot1> ^distance { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^distance <target> -
              ^distance <value>)
}

#   Propose an operator for the ModifiedDriveVerb construction
sp {comprehend-word*propose*match-construction*ModifiedDriveVerb
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <modifier>)
   (<modifier> ^is.a Adverb
               ^previous <verb>)
   (<verb> ^is.a DriveVerb
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name ModifiedDriveVerb
        ^span 2
        ^modifier <modifier>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a ModifiedDriveVerb construction, combination 0.|))
}

#   Apply the operator for the ModifiedDriveVerb construction
sp {comprehend-word*apply*match-construction*ModifiedDriveVerb
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name ModifiedDriveVerb
        ^verb <verb>
        ^modifier <modifier>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name ModifiedDriveVerb
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of DriveVerb
              ^constituents <constituents>
              ^verb <verb>
              ^modifier <modifier>
              ^previous <previous>)
   (<a> ^a ModifiedDriveVerb)
   (<constituents> ^verb <verb>
                   ^modifier <modifier>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a ModifiedDriveVerb construction.|))
}

#   ModifiedDriveVerb self.m <--> verb.m constraint
sp {comprehend-word*ModifiedDriveVerb-constraint*self-m*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ModifiedDriveVerb
          ^m { <target> <> <value> }
          ^verb <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   ModifiedDriveVerb self.m.modifier <--> modifier.m constraint
sp {comprehend-word*ModifiedDriveVerb-constraint*self-m-modifier*UNIFY*modifier-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ModifiedDriveVerb
          ^m <l-slot1>
          ^modifier <r-slot1>)
   (<l-slot1> ^modifier { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifier <target> -
              ^modifier <value>)
}

#   SituationClause construction
sp {comprehend-word*generalize-cxn*SituationClause*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of SituationClause
          ^is <a>
          ^m <meaning>)
   (<a> -^a SituationClause)
-->
   (<a> ^a SituationClause)
   (<cxn> ^subcase-of SituationClause -
          ^subcase-of Declarative
          ^evokes <e1>)
   (<e1> ^schema SituationDescriptor
         ^target <meaning>)
}

#   Propose an operator for the TransitiveSituationClause construction
sp {comprehend-word*propose*match-construction*TransitiveSituationClause
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <object>)
   (<object> ^is.a RefExpr
             ^previous <verb>)
   (<verb> ^is.a TransitiveSituationVerb
           ^previous <subject>)
   (<subject> ^is.a RefExpr
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name TransitiveSituationClause
        ^span 3
        ^object <object>
        ^verb <verb>
        ^subject <subject>
        ^previous <previous>
        ^debug-info (concat |Match a TransitiveSituationClause construction, combination 0.|))
}

#   Apply the operator for the TransitiveSituationClause construction
sp {comprehend-word*apply*match-construction*TransitiveSituationClause
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name TransitiveSituationClause
        ^subject <subject>
        ^verb <verb>
        ^object <object>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name TransitiveSituationClause
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SituationClause
              ^constituents <constituents>
              ^subject <subject>
              ^verb <verb>
              ^object <object>
              ^previous <previous>)
   (<a> ^a TransitiveSituationClause)
   (<constituents> ^subject <subject>
                   ^verb <verb>
                   ^object <object>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a TransitiveSituationClause construction.|))
}

#   TransitiveSituationClause self.m.subject <--> subject.m constraint
sp {comprehend-word*TransitiveSituationClause-constraint*self-m-subject*UNIFY*subject-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TransitiveSituationClause
          ^m <l-slot1>
          ^subject <r-slot1>)
   (<l-slot1> ^subject { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^subject <target> -
              ^subject <value>)
}

#   TransitiveSituationClause self.m.action <--> verb.m constraint
sp {comprehend-word*TransitiveSituationClause-constraint*self-m-action*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TransitiveSituationClause
          ^m <l-slot1>
          ^verb <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   TransitiveSituationClause self.m.object <--> object.m constraint
sp {comprehend-word*TransitiveSituationClause-constraint*self-m-object*UNIFY*object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TransitiveSituationClause
          ^m <l-slot1>
          ^object <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   Propose an operator for the UntilDeclarativeClause construction
sp {comprehend-word*propose*match-construction*UntilDeclarativeClause
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <declarative>)
   (<declarative> ^is.a Declarative
                  ^previous <until>)
   (<until> ^is.a UNTIL
            ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name UntilDeclarativeClause
        ^span 2
        ^declarative <declarative>
        ^until <until>
        ^previous <previous>
        ^debug-info (concat |Match a UntilDeclarativeClause construction, combination 0.|))
}

#   Apply the operator for the UntilDeclarativeClause construction
sp {comprehend-word*apply*match-construction*UntilDeclarativeClause
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name UntilDeclarativeClause
        ^until <until>
        ^declarative <declarative>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name UntilDeclarativeClause
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of UntilClause
              ^constituents <constituents>
              ^until <until>
              ^declarative <declarative>
              ^evokes <e1>
              ^previous <previous>)
   (<a> ^a UntilDeclarativeClause)
   (<constituents> ^until <until>
                   ^declarative <declarative>)
   (<e1> ^schema UntilDeclarative
         ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a UntilDeclarativeClause construction.|))
}

#   UntilDeclarativeClause self.m.assertion <--> declarative.m constraint
sp {comprehend-word*UntilDeclarativeClause-constraint*self-m-assertion*UNIFY*declarative-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a UntilDeclarativeClause
          ^m <l-slot1>
          ^declarative <r-slot1>)
   (<l-slot1> ^assertion { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^assertion <target> -
              ^assertion <value>)
}

#   Propose an operator for the ActAlongDirectionUntil construction
sp {comprehend-word*propose*match-construction*ActAlongDirectionUntil
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <until>)
   (<until> ^is.a UntilClause
            ^previous <action>)
   (<action> ^is.a ActAlongDirection
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name ActAlongDirectionUntil
        ^span 2
        ^until <until>
        ^action <action>
        ^previous <previous>
        ^debug-info (concat |Match a ActAlongDirectionUntil construction, combination 0.|))
}

#   Apply the operator for the ActAlongDirectionUntil construction
sp {comprehend-word*apply*match-construction*ActAlongDirectionUntil
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name ActAlongDirectionUntil
        ^action <action>
        ^until <until>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name ActAlongDirectionUntil
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^action <action>
              ^until <until>
              ^evokes <e1>
              ^previous <previous>)
   (<a> ^a ActAlongDirectionUntil)
   (<constituents> ^action <action>
                   ^until <until>)
   (<e1> ^schema TerminatedAction
         ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a ActAlongDirectionUntil construction.|))
}

#   ActAlongDirectionUntil self.m.action <--> action.m constraint
sp {comprehend-word*ActAlongDirectionUntil-constraint*self-m-action*UNIFY*action-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ActAlongDirectionUntil
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   ActAlongDirectionUntil self.m.terminator <--> until.m constraint
sp {comprehend-word*ActAlongDirectionUntil-constraint*self-m-terminator*UNIFY*until-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ActAlongDirectionUntil
          ^m <l-slot1>
          ^until <r-slot1>)
   (<l-slot1> ^terminator { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^terminator <target> -
              ^terminator <value>)
}

