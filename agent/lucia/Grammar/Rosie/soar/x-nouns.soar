#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-nouns.ecg'.

#   CONFERENCE-ROOM construction
sp {comprehend-word*apply*lexical-access*CONFERENCE-ROOM-conference-room
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |room|)
   (<s> ^superstate.comprehension.word-stack <previous1>)
   (<previous1> ^orth |conference|
                ^previous <previous2>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CONFERENCE-ROOM
          ^is <a>
          ^orth |conference room|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^multi-word <previous1>
          ^evokes <e1>)
   (<a> ^a CONFERENCE-ROOM)
   (<e1> ^schema ConferenceRoom
         ^target <meaning>)
}

#   BUILDING construction
sp {comprehend-word*apply*lexical-access*BUILDING-building
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |building|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BUILDING
          ^is <a>
          ^orth |building|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a BUILDING)
   (<e1> ^schema Building
         ^target <meaning>)
}

#   OFFICE construction
sp {comprehend-word*apply*lexical-access*OFFICE-office
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |office|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name OFFICE
          ^is <a>
          ^orth |office|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a OFFICE)
   (<e1> ^schema Office
         ^target <meaning>)
}

#   MAIN-OFFICE construction
sp {comprehend-word*apply*lexical-access*MAIN-OFFICE-the-main-office
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |office|)
   (<s> ^superstate.comprehension.word-stack <previous1>)
   (<previous1> ^orth |main|
                ^previous <previous2>)
   (<previous2> ^orth |the|
                ^previous <previous3>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name MAIN-OFFICE
          ^is <a>
          ^orth |the main office|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^multi-word <previous2>
          ^evokes <e1>)
   (<a> ^a MAIN-OFFICE)
   (<e1> ^schema MainOffice
         ^target <meaning>)
}

#   SOAR-OFFICE construction
sp {comprehend-word*apply*lexical-access*SOAR-OFFICE-the-soar-office
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |office|)
   (<s> ^superstate.comprehension.word-stack <previous1>)
   (<previous1> ^orth |soar|
                ^previous <previous2>)
   (<previous2> ^orth |the|
                ^previous <previous3>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SOAR-OFFICE
          ^is <a>
          ^orth |the soar office|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^multi-word <previous2>
          ^evokes <e1>)
   (<a> ^a SOAR-OFFICE)
   (<e1> ^schema SoarOffice
         ^target <meaning>)
}

#   HALL construction
sp {comprehend-word*apply*lexical-access*HALL-hall
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |hall|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name HALL
          ^is <a>
          ^orth |hall|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a HALL)
   (<e1> ^schema Hall
         ^target <meaning>)
}

#   END construction
sp {comprehend-word*apply*lexical-access*END-end
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |end|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name END
          ^is <a>
          ^orth |end|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a END)
   (<e1> ^schema End
         ^target <meaning>)
}

#   DOORS construction
sp {comprehend-word*apply*lexical-access*DOORS-doors
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |doors|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name DOORS
          ^is <a>
          ^orth |doors|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a DOORS)
   (<e1> ^schema Doorway
         ^target <meaning>)
}

#   DOORS self.features.number <-- "pl" constraint
sp {comprehend-word*DOORS-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DOORS
          ^orth |doors|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   INTERSECTION construction
sp {comprehend-word*apply*lexical-access*INTERSECTION-intersection
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |intersection|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name INTERSECTION
          ^is <a>
          ^orth |intersection|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a INTERSECTION)
   (<e1> ^schema Intersection
         ^target <meaning>)
}

#   STAPLER construction
sp {comprehend-word*apply*lexical-access*STAPLER-stapler
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |stapler|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name STAPLER
          ^is <a>
          ^orth |stapler|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a STAPLER)
   (<e1> ^schema Stapler
         ^target <meaning>)
}

#   SODA construction
sp {comprehend-word*apply*lexical-access*SODA-soda
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |soda|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SODA
          ^is <a>
          ^orth |soda|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a SODA)
   (<e1> ^schema Soda
         ^target <meaning>)
}

#   TRASH construction
sp {comprehend-word*apply*lexical-access*TRASH-trash
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |trash|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TRASH
          ^is <a>
          ^orth |trash|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a TRASH)
   (<e1> ^schema Trash
         ^target <meaning>)
}

#   TASK construction
sp {comprehend-word*apply*lexical-access*TASK-task
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |task|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TASK
          ^is <a>
          ^orth |task|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a TASK)
   (<e1> ^schema Task
         ^target <meaning>)
}

#   GOAL construction
sp {comprehend-word*apply*lexical-access*GOAL-goal
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |goal|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name GOAL
          ^is <a>
          ^orth |goal|
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^evokes <e1>)
   (<a> ^a GOAL)
   (<e1> ^schema Goal
         ^target <meaning>)
}

#   UnitsName construction
sp {comprehend-word*generalize-cxn*UnitsName*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of UnitsName
          ^is <a>
          ^m <meaning>)
   (<a> -^a UnitsName)
-->
   (<a> ^a UnitsName)
   (<cxn> ^subcase-of UnitsName -
          ^evokes <e1>)
   (<e1> ^schema Units
         ^target <meaning>)
}

#   UnitsName self.m.class <-- @units constraint
sp {comprehend-word*UnitsName-constraint*self-m-class*ASSIGN*AT-units
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a UnitsName
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |units| })
-->
   (<l-slot1> ^class <target> -
              ^class |units|)
}

#   METER construction
sp {comprehend-word*apply*lexical-access*METER-meter
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |meter|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name METER
          ^is <a>
          ^orth |meter|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a METER)
}

#   METER self.m.type <-- "distance" constraint
sp {comprehend-word*METER-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a METER
          ^orth |meter|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   METER self.m.concept-handle <-- "meters" constraint
sp {comprehend-word*METER-constraint*self-m-concept-handle*ASSIGN*meters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a METER
          ^orth |meter|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |meters| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |meters|)
}

#   METERS construction
sp {comprehend-word*apply*lexical-access*METERS-meters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |meters|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name METERS
          ^is <a>
          ^orth |meters|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a METERS)
}

#   METERS self.m.type <-- "distance" constraint
sp {comprehend-word*METERS-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a METERS
          ^orth |meters|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   METERS self.m.concept-handle <-- "meters" constraint
sp {comprehend-word*METERS-constraint*self-m-concept-handle*ASSIGN*meters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a METERS
          ^orth |meters|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |meters| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |meters|)
}

#   FOOT construction
sp {comprehend-word*apply*lexical-access*FOOT-foot
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |foot|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FOOT
          ^is <a>
          ^orth |foot|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a FOOT)
}

#   FOOT self.m.type <-- "distance" constraint
sp {comprehend-word*FOOT-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOOT
          ^orth |foot|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   FOOT self.m.concept-handle <-- "feet" constraint
sp {comprehend-word*FOOT-constraint*self-m-concept-handle*ASSIGN*feet
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOOT
          ^orth |foot|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |feet| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |feet|)
}

#   FEET construction
sp {comprehend-word*apply*lexical-access*FEET-feet
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |feet|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FEET
          ^is <a>
          ^orth |feet|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a FEET)
}

#   FEET self.m.type <-- "distance" constraint
sp {comprehend-word*FEET-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FEET
          ^orth |feet|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   FEET self.m.concept-handle <-- "feet" constraint
sp {comprehend-word*FEET-constraint*self-m-concept-handle*ASSIGN*feet
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FEET
          ^orth |feet|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |feet| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |feet|)
}

#   INCH construction
sp {comprehend-word*apply*lexical-access*INCH-inch
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |inch|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name INCH
          ^is <a>
          ^orth |inch|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a INCH)
}

#   INCH self.m.type <-- "distance" constraint
sp {comprehend-word*INCH-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a INCH
          ^orth |inch|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   INCH self.m.concept-handle <-- "inches" constraint
sp {comprehend-word*INCH-constraint*self-m-concept-handle*ASSIGN*inches
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a INCH
          ^orth |inch|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |inches| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |inches|)
}

#   INCHES construction
sp {comprehend-word*apply*lexical-access*INCHES-inches
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |inches|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name INCHES
          ^is <a>
          ^orth |inches|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a INCHES)
}

#   INCHES self.m.type <-- "distance" constraint
sp {comprehend-word*INCHES-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a INCHES
          ^orth |inches|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   INCHES self.m.concept-handle <-- "inches" constraint
sp {comprehend-word*INCHES-constraint*self-m-concept-handle*ASSIGN*inches
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a INCHES
          ^orth |inches|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |inches| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |inches|)
}

#   CENTIMETER construction
sp {comprehend-word*apply*lexical-access*CENTIMETER-centimeter
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |centimeter|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CENTIMETER
          ^is <a>
          ^orth |centimeter|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a CENTIMETER)
}

#   CENTIMETER self.m.type <-- "distance" constraint
sp {comprehend-word*CENTIMETER-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CENTIMETER
          ^orth |centimeter|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   CENTIMETER self.m.concept-handle <-- "centimeters" constraint
sp {comprehend-word*CENTIMETER-constraint*self-m-concept-handle*ASSIGN*centimeters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CENTIMETER
          ^orth |centimeter|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |centimeters| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |centimeters|)
}

#   CENTIMETERS construction
sp {comprehend-word*apply*lexical-access*CENTIMETERS-centimeters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |centimeters|)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CENTIMETERS
          ^is <a>
          ^orth |centimeters|
          ^f <form>
          ^m <meaning>
          ^subcase-of UnitsName)
   (<a> ^a CENTIMETERS)
}

#   CENTIMETERS self.m.type <-- "distance" constraint
sp {comprehend-word*CENTIMETERS-constraint*self-m-type*ASSIGN*distance
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CENTIMETERS
          ^orth |centimeters|
          ^m <l-slot1>)
   (<l-slot1> ^type { <target> <> |distance| })
-->
   (<l-slot1> ^type <target> -
              ^type |distance|)
}

#   CENTIMETERS self.m.concept-handle <-- "centimeters" constraint
sp {comprehend-word*CENTIMETERS-constraint*self-m-concept-handle*ASSIGN*centimeters
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CENTIMETERS
          ^orth |centimeters|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |centimeters| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |centimeters|)
}

