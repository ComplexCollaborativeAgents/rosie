# copy the action-operator for the task we're trying to learn 

sp {retrospective-learning*propose*copy-action*action-operator*task-action
   (state <s> ^name retrospective-learning
              ^superstate.operator.action-operator <action>
             -^action-operator)
-->
   (<s> ^operator <o> +)
   (<o> ^name copy-action
        ^type task-action
        ^source-action <action>
        ^destination <s>
        ^copy-name action-operator
        ^object-map <map>)
}

sp {retrospective-learning*elaborate*copy-action*task-action*object-map*entries
   (state <s> ^name retrospective-learning
              ^operator <o> +
              ^top-state.world.objects.object <src-obj>
              ^world.objects.object <copy-obj>)
   (<o> ^name copy-action
        ^type task-action
        ^object-map <map>)
   (<src-obj> ^handle <h>)
   (<copy-obj> ^handle <h>)
-->
   (<map> ^<src-obj> <copy-obj>)
}

# copy each subaction retrieved from episodic memory
sp {retrospective-learning*propose*copy-action*subaction
   (state <s> ^name retrospective-learning
              ^subaction-episode.action-stack.top.execution-operator <sub>)
-->
   (<s> ^operator <o> +)
   (<o> ^name copy-action
        ^type subaction
        ^source-action <sub>
        ^destination <s>
        ^copy-name subaction-copy
        ^object-map <map>)
}

sp {retrospective-learning*elaborate*copy-action*subaction*object-map*entry
   (state <s> ^name retrospective-learning
              ^operator <o> +
              ^subaction-episode.world.objects.object <src-obj>
              ^world.objects.object <copy-obj>)
   (<o> ^name copy-action
        ^type subaction
        ^object-map <map>)
   (<src-obj> ^handle <h>)
   (<copy-obj> ^handle <h>)
-->
   (<map> ^<src-obj> <copy-obj>)
}

sp {retrospective-learning*apply*copy-action*subaction*push*onto*subactions*list
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-copy <sub>
              ^subactions <subs>
              ^subaction-episode <ep>)
   (<o> ^name copy-action
        ^type subaction)
   (<subs> ^next <next-sub>)
-->
   # Push the subaction onto the subactions linked list
   (<subs> ^next <sub>
           ^next <next-sub> -)
   (<sub> ^next <next-sub>)
   
   # Cleanup the state
   (<s> ^subaction-copy <sub> -
        ^subaction-episode <ep> -)
}

#
#sp {retrospective-learning*apply*copy-action-operator*copy*merged*info
#   (state <s> ^name retrospective-learning
#              ^operator <o>
#              ^action-operator <operator>)
#   (<o> ^name copy-action-operator
#        ^action-operator.merged <m>)
#   (<m> ^object1.handle <handle1>
#        ^object2.handle <handle2>)
#-->
#   (<operator> ^merged.<handle1> <handle2>)
#}
