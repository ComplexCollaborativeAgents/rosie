sp {create-condition*apply*complete
   (state <s> ^name create-condition
             -^relation
             -^action
   		  	  ^clause <c>
              ^condition <co>
			  ^superstate <ss>
			  ^operator <o>)
   (<o> ^name complete)
-->
   (<c> ^formatted <co>)
   (<ss> ^nlp <co>)
}

sp {create-condition*apply*complete*unary-attribute
   (state <s> ^name create-condition
			  ^unary-attribute <att>
			  ^condition-name <val>
   		  	  ^clause <c>
			  ^superstate <ss>
			  ^operator <o>)
   (<o> ^name complete)
   (<ss> ^parameter <c>)
-->
  (<c> ^formatted-attribute <val>)
}
sp {create-condition*apply*complete*update-object-count
   (state <s> ^name create-condition
             -^action
              ^increment-obj-count true
   		  	  ^object-count <oc>
          	  ^clause <c>
			  ^superstate <ss>
			  ^operator <o>)
   (<o> ^name complete)
   (<ss> ^object-count <oc>)
  #-{(<s> ^relation <r>)
  #  (<c> ^equal-to.modifier.handle negation)}
-->
   (<c> ^parameter-index <oc>)
   (<ss> ^object-count <oc> -)
   (<ss> ^object-count (+ <oc> 1))
}
#sp {create-condition*apply*complete*update-object-count*not-equal
#   (state <s> ^name create-condition
#             -^action
#              ^increment-obj-count true
#                   ^object-count <oc>
#                ^clause <c>
#              ^superstate <ss>
#              ^operator <o>)
#   (<o> ^name complete)
#   (<ss> ^object-count <oc>)
#   (<s> ^relation <r>)
#   (<c> ^equal-to.modifier.handle negation)
#-->
#   (<r> ^parameter-index <oc>)
#   (<ss> ^object-count <oc> -)
#   (<ss> ^object-count (+ <oc> 1))
#}
sp {create-condition*apply*complete*parameter
   (state <s> ^name create-condition
              ^relation <c>
              ^clause <cc>
             -^action
              ^condition <co>
			  ^superstate <ss>
			  ^operator <o>)
   (<o> ^name complete)
  #-{(<cc> ^equal-to.modifier.handle negation)}
-->
   (<c> ^formatted <co>)
   (<cc> ^formatted <co>)
   (<ss> ^nlp <co>)
}
#sp {create-condition*apply*complete*parameter*not*equal-to
#    :interrupt
#   (state <s> ^name create-condition
#              ^relation <c>
#              ^clause <cc>
#             -^action
#              ^condition <co>
#              ^superstate <ss>
#              ^operator <o>)
#   (<o> ^name complete)
#   (<cc> ^equal-to.modifier.handle negation)
#-->
#   (<c> ^formatted <co>)
#   #(<cc> ^formatted <co>)
#   (<ss> ^nlp <co>)
#}
sp {create-condition*apply*complete*in-set*formatted
  (state <s> ^name create-condition
              ^relation <c>
             -^superstate.superstate.world.predicates.predicate.handle in1
			  ^superstate <ss>
			  #^param1 <pi>
			  ^condition <co>
			  ^operator <o>)
   (<o> ^name complete)
   (<c> ^2 <c2> ^handle in1)
-->
  #(write (cmd print <s> -d 4))
  #(write (cmd pref <ss> parameter -w))
   (<c2> ^formatted <co>)# ^parameter-index <pi>)
}
sp {create-condition*apply*complete*interrupt
#:interrupt
  (state <s> ^name create-condition
  		 	 #^name create-from-parseX
              ^condition <co>
			  ^clause <cc>
			 -^arg1
			 ^arg2.name bank1
			  #^superstate <ss>
			  #^parameter.{1} <pp>
			  ^operator <o>)
   (<o> ^name complete)#create-rtype)
   #(<co> ^name value ^args.{2}.rtype set)# ^negative true)
   #(<ss>)
    
-->
(interrupt)
#(write (cmd matches))
(write (cmd print <cc> -d 6))
#(write (cmd pref <s>))
#(write (cmd pref <ss> parameter -w))
#   (<c2> ^formatted <co>)# ^parameter-index <pi>)
}

##check efficiency change
sp {create-condition*apply*complete*update*parameter*formatted
   (state <s> ^name create-condition
             -^action
              ^condition <co>
			  ^superstate <ss>
			  ^operator <o>)
   (<o> ^name complete)
   (<ss> ^parameter <p>)
   (<p> ^parameter-index <pi>)
   (<co> ^parameter.{1}.param-id <pi>)
-->
   (<p> ^formatted <co>)
}