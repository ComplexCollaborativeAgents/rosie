sp {soar-math*propose*complete
   (state <s> ^name soar-math
              ^instance <instance>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^instance <instance>)
}
sp {soar-math*apply*complete
   (state <s> ^name soar-math
              ^superstate.condition.result.set <res>
              ^operator <op>
              ^instance <s1>)  
   (<op> ^name complete ^instance <s1>)
#   (<s1> ^diff 1)
-->
  (<res> ^instance <s1>)
}


sp {soar-math*multiply
   (state <s> ^name soar-math
            #  ^superstate <ss>
             # ^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type multiply ^args <args> ^parameter.num < 2)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)#<s2>.<o2>.<elem2> <value> ^parameter.result.link.link.<s2>.<o2>.<elem2> holder) 
   (<a2> ^result.set.instance.{1} <value1>)
-->
#   (<ss> ^result <res>)
   #(<res> ^instance.<arg1> (* <value1> <value>))
   (<s> ^instance <instancen>)
   #(<res> ^instance <instancen>)
   #(<instancen> ^mult_1 <value> ^mult_2 <value1>)
   (<instancen> ^1 (* <value1> <value>))
}

sp {soar-math*add
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type add ^args <args> ^parameter.num < 2)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
#   (<ss> ^result <res>)
#   (<res> ^instance.<arg1> (+ <value1> <value>))
    (<s> ^instance <instancen>)
   #(<res> ^instance <instancen>)
   (<instancen> ^1 (+ <value> <value1>))#^add_1 <value> ^add_2 <value1>)
}

sp {soar-math*divide
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type divide ^args <args> ^parameter.num < 2)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
#   (<ss> ^result <res>)
#   (<res> ^instance.<arg1> (/ <value> <value1>))
    (<s> ^instance <instancen>)
   #(<res> ^instance <instancen>)
   #(<instancen> ^div_1 <value> ^div_2 <value1>)
   (<instancen> ^1 (/ <value> <value1>))
}

sp {soar-math*subtract
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type subtract ^args <args> ^parameter.num < 2)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
#   (<ss> ^result <res>)
  # (<res> ^instance.<arg1> (- <value> <value1>))
   (<s> ^instance <instancen>)
  #(<res> ^instance <instancen>)
   #(<instancen> ^sub_1 <value> ^sub_2 <value1>)
   (<instancen> ^1 (- <value> <value1>))
}
#sp {soar-math*power
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type power ^args <args> ^parameter.num < 2)
#   (<args> ^num 2
#           ^2 <a1>
#           ^3 <a2>)
#   (<a1> ^result.set.instance.{1} <value>)
#   (<a2> ^result.set.instance.{1} <value1>)
#-->
#   (<s> ^instance <instancen>)
#   #(<res> ^instance <instancen>)
#  #(<instancen> ^pow_1 <value> ^pow_2 <value1>)
#  (<instancen> ^1 (pow <value> <value1>))
#}


sp {soar-math*absolute-value
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type absolute-value ^args <args> ^parameter.num < 2)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.instance.{1} <value>)
-->
   (<s> ^instance <instancen>)
   #(<res> ^instance <instancen>)
   #(<instancen> ^abs <value>)
   (<instancen> ^1 (abs <value>))
}

sp {soar-math*square-root
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type square-root ^args <args> ^parameter.num < 2)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.instance.{1} <value>)
-->
   (<s> ^instance <instancen>)
   #(<res> ^instance <instancen>)
   #(<instancen> ^abs <value>)
   (<instancen> ^1 (sqrt <value>))
}

sp {soar-math*multiply*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
     #         ^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type multiply ^args <args> ^parameter.num > 1)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
   (<s> ^instance <pa>)
   (<pa> ^2 <value> ^3 <value1> ^1 (* <value1> <value>))
   #(<pa> ^2 <value> ^3 <value1> ^mult_1 <value> ^mult_2 <value1>)
}

sp {soar-math*add*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type add ^args <args> ^parameter.num > 1)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
   (<s> ^instance <pa>)
  # (<res> ^instance <pa>)
   (<pa> ^2 <value> ^3 <value1> ^1 (+ <value1> <value>))
   #(<pa> ^2 <value> ^3 <value1> ^add_1 <value> ^add_2 <value1>)
}

sp {soar-math*divide*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type divide ^args <args> ^parameter.num > 1)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
   (<s> ^instance <pa>)
   (<pa> ^2 <value> ^3 <value1> ^1 (/ <value> <value1>))
   #(<pa> ^2 <value> ^3 <value1> ^div_1 <value> ^div_2 <value1>)
}

sp {soar-math*subtract*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type subtract ^args <args> ^parameter.num > 1)
   (<args> ^num 2
           ^2 <a1>
           ^3 <a2>)
   (<a1> ^result.set.instance.{1} <value>)
   (<a2> ^result.set.instance.{1} <value1>)
-->
   (<s> ^instance <pa>)
   (<pa> ^2 <value> ^3 <value1> ^1 (- <value> <value1>))
   #(<pa> ^2 <value> ^3 <value1> ^sub_1 <value> ^sub_2 <value1>)
}

#sp {soar-math*power*instance
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type power ^args <args> ^parameter.num > 1)
#   (<args> ^num 2
#           ^2 <a1>
#           ^3 <a2>)
#   (<a1> ^result.set.instance.{1} <value>)
#   (<a2> ^result.set.instance.{1} <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^2 <value> ^3 <value1> ^1 (pow <value> <value1>))
#   #(<pa> ^2 <value> ^3 <value1> ^pow_1 <value> ^pow_2 <value1>)
#}

sp {soar-math*abs*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type absolute-value ^args <args> ^parameter.num 2)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.instance.{1} <value>)
-->
   (<s> ^instance <pa>)
   #(<pa> ^2 <value> ^abs <value>)
   (<pa> ^2 <value> ^1 (abs <value>))
}
sp {soar-math*square-root*instance
   (state <s> ^name soar-math
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^type square-root ^args <args> ^parameter.num 2)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.instance.{1} <value>)
-->
   (<s> ^instance <pa>)
   #(<pa> ^2 <value> ^abs <value>)
   (<pa> ^2 <value> ^1 (sqrt <value>))
}



#sp {soar-math*subtract*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^sub_1 <thing1> ^sub_2 <thing2>)
#-->
#   (<p2> ^1 (- <thing1> <thing2>))
#}
#sp {soar-math*multiply*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^mult_1 <thing1> ^mult_2 <thing2>)
#-->
#   (<p2> ^1 (* <thing1> <thing2>))
#}
#sp {soar-math*divide*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^div_1 <thing1> ^div_2 <thing2>)
#-->
#   (<p2> ^1 (/ <thing1> <thing2>))
#}
#sp {soar-math*add*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^add_1 <thing1> ^add_2 <thing2>)
#-->
#   (<p2> ^1 (+ <thing1> <thing2>))
#}

#sp {soar-math*pow*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^pow_1 <thing1> ^pow_2 <thing2>)
#-->
#   (<p2> ^1 (pow <thing1> <thing2>))
#}
#
#sp {soar-math*abs*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.instance <p2>)
#    (<p2> ^abs <thing1>)
#-->
#   (<p2> ^1 (abs <thing1>))
#}

#sp {soar-math*multiply*instance2
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type multiply ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<argx> {<b> <> <a>})
#   (<args> ^num 2
#           ^<argx> <a1>
#           ^{<argy> <> <argx>} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^<argx> <value> ^1 (* <value1> <value>))
#}
#
#sp {soar-math*add*instance2
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type add ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<argx> {<b> <> <a>})
#   (<args> ^num 2
#           ^<argx> <a1>
#           ^{<argy> <> <argx>} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^<argx> <value> ^1 (+ <value1> <value>))
#}
#
#sp {soar-math*divide*instance2
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type divide ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<arg2>)
#   (<args> ^num 2
#          ^{<arg2> 2} <a1>
#           ^{<arg3> 3} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^2 <value> ^1 (/ <value> <value1>))
#}
#sp {soar-math*divide*instance2b
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type divide ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<arg3>)
#   (<args> ^num 2
#          ^{<arg2> 2} <a1>
#           ^{<arg3> 3} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^3 <value1> ^1 (/ <value> <value1>))
#}
#
#sp {soar-math*subtract*instance2
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type subtract ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<arg2>)
#   (<args> ^num 2
#          ^{<arg2> 2} <a1>
#           ^{<arg3> 3} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^2 <value> ^1 (- <value> <value1>))
#}
#sp {soar-math*subtract*instance2b
#   (state <s> ^name soar-math
#            #  ^superstate <ss>
#              #^superstate.condition.result.set <res>
#              ^superstate.operator <o>)
#   (<o> ^type subtract ^args <args> ^parameter <pp>)
#   (<pp> ^num 2 ^<arg1> <a> ^<arg3>)
#   (<args> ^num 2
#          ^{<arg2> 2} <a1>
#           ^{<arg3> 3} <a2>)
#   (<a1> ^result.set.instance.{<arg1> 1} <value>)
#   (<a2> ^result.set.instance.<arg1> <value1>)
#-->
#   (<s> ^instance <pa>)
#   (<pa> ^3 <value1> ^1 (- <value> <value1>))
#}