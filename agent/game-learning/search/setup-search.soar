sp {setup-search*elaborate*tcn
   (state <s> ^name setup-search
              ^top-state.dialog-context.structure.multiplayer <cg>
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^multiplayer <cg>)
}

sp {setup-search*elaborate*multiplayer
   (state <s> ^name setup-search
              ^superstate.operator <op>)
   (<op> ^game-name <name> ^multiplayer <m>)
-->
   (<s> ^multiplayer <m>)
}

sp {setup-search*propose*find-solution
   (state <s> ^name setup-search
              ^superstate.operator <op>)
   (<op> ^game-name <name> -^multiplayer)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-solution
        ^game-name <name>)
}

sp {setup-search*propose*find-solution2
   (state <s> ^name setup-search
              ^superstate.operator <op>)
   (<op> ^game-name <name> ^multiplayer)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-solution
        ^replay true
        ^game-name <name>)
}

#sp {setup-search*propose*detect-game-concepts
#   (state <s> ^name setup-search
#              ^superstate.operator <op>)
#   (<op> ^game-name <name> ^multiplayer)
#-->
#(interrupt)
#   (<s> ^operator <o> + =)
#   (<o> ^name detect-game
#        ^game-name <name>)
#}
##################################

#sp {elaborate*detect-game-concepts
#   (state <s> ^name detect-game
#              ^superstate.operator <op>)
#   (<op> ^game-name <name>)
#-->
#   (<s> ^detect-game-concepts <name> ^gtype action)#action)# goal failure heuristic)
#}
#sp {detect-game-concepts*elaborate*problem-space
#   (state <s> ^detect-game-concepts <name>
#              ^top-state.world <world2>)
#-->
#   (<s> ^flag detect-game-concepts ^simulated true ^problem-space <ps> ^retrieve-game <name> ^list <l>)
#   (<l> ^game <g>)
#   (<ps> ^world <world> ^name game)#JK 1/18/17 ^name action hmmm
#   (<world> ^source <world2>
#            ^copy-type deep)
#}
#sp {detect-game-concepts*elaborate*sub-conditions
#   (state <s> ^flag detect-game-concepts
#              ^gtype <type>
#              ^<type> <t>)
#   (<t> ^condition <co>)
#   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
#   (<cond> ^name <name>)
#-->
#   (<t> ^condition <cond>)
#}
#sp {detect-game-concepts*elaborate*sub-conditions*predicate
#   (state <s> ^flag detect-game-concepts
#              ^gtype <type>
#              ^<type> <t>)
#   (<t> ^nlp-set.conditions <cond>)
#-->
#   (<t> ^condition <cond>)
#}
#sp {detect-game-concepts*elaborate*input-args
#   (state <s> ^flag detect-game-concepts
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
#   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
#   (<nlps> ^aname <name>)
#   (<c> ^result.set <res2>)
#-->
#   (<res2> ^instance <in1>)
#}
#sp {detect-game-concepts*elaborate*input-args*noparam
#   (state <s> ^flag detect-game-concepts
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance <in1> ^rtype <rtype> ^parameter.num 0)
#   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^condition <c5>)
#   (<c5> ^args.<argn> <c> ^parameter.<argn> <param>)#look at parent for param-id
#   (<param> ^param-id <a1>)
#   (<c> ^attribute input-arg ^parameter.num 0 ^rtype <rtype>)
#   (<c> ^result.set <res2>)
#-->
#   (<res2> ^instance <in1>)
#}
#sp {detect-game-concepts*elaborate*input-args*set-to-single*objects
#   (state <s> ^flag detect-game-concepts
#              ^gtype <gtype>
#              ^predicate <T5>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
#   (<args> ^num > 0)
#   (<args> ^<a1> <c1>)
#   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set)# ^parameter.num 0)
#   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
#   (<nlps> ^aname <name>)
#-->
#   (<res> ^instance <i15>)
#   (<i15> ^1 <obj>)
#}

############################
############################

sp {setup-search*elaborate*problem-space*predicate-structure
   (state <s> ^name setup-search
              ^top-state.world <world2>)
-->
   (<s> ^problem-space.world <world>)
   (<world> ^source <world2>
            ^copy-type deep)
}