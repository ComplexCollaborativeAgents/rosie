#JK move to appropriate location
#elabroate volume if it exists for object onto object
sp {perception-monitor*elaborate*object*volume
	(state <s> ^superstate nil
            ^perception-monitor.object-monitor.object-info <obj>)
 	(<obj> ^wm-obj <wmobj> ^differences.belief-vol <bv>)
  	(<bv> ^type volume ^result.record.value <vol>)
   	(<wmobj> ^predicates <p>)
-->
	(<p> ^volume <vol>)
}
sp {learn-predicate*elaborate*input-args
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype <rtype> ^input <a1>)#^parameter.{1}.param-id <a1>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}
#hmm not sure if right anymore
#try doing it for non parameters too
sp {learn-predicate*elaborate*input-args*set-to-single*objects
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set) #^parameter.num 0)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^rtype single ^input <a1>)# ^parameter.{1}.param-id <a1>
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}
#JK REMOVED deep-copy sentence change                                                             
#sp {learn-predicate*elaborate*input-args*learning-predicate
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.learning-predicate.name <name>
#              ^predicate <T5>)
#   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^attribute input-arg)
#   (<nlps> ^aname <name>)
#-->
#   (<c> ^result.set <res>)
#}
sp {learn-predicate*elaborate*input-args*object*single
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype single ^result.set.instance.{1} <obja>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype single ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}
sp {learn-predicate*elaborate*input-args*object*single*to*set
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1}.<object> <obja>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype single ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}
#do single to set or no...< lets say probably do not want to do that here, 
#ok that is a copy, not same set, just for learning
sp {learn-predicate*elaborate*input-args*object*set
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1} <set>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <set2> ^copy <set>)
}
sp {learn-predicate*elaborate*input-args*object*set*to*set-objects
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1} <set>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
   (<set> ^<object> <obja>)
   (<res> ^instance <in>)
   (<in> ^1 <set2> ^copy <set>)
-->
   (<set2> ^<object> <obj>)
}
#elaborate all conditions before world-copy
sp {learn-predicate*elaborate*problem-space*predicate-structure
   (state <s> ^name learn-predicate
              -^superstate.name selection
              ^top-state.world <world2>)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^world <world> ^name game)#JK 1/18/17 ^name action hmmm
   (<world> ^source <world2>
            ^copy-type deep)
}
sp {learn-predicate*elaborate*problem-space*world
    (state <s> ^name learn-predicate ^superstate <ss>)
    (<ss> ^superstate <ts> ^name selection)
    (<ts> ^world <world2> ^name learn-predicate)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <world> +  ^dont-copy-anything true + ^name game)#JK 1/18/17 ^name action + hmmm
    (<world> ^source <world2> + ^copy-type deep +)
}
#INHERIT primitive relations of locations beneath a block #need to not copy
sp {learn-predicate*elaborate*inherited*location*relations
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> -^dont-copy <instance2>)
   (<instance2> ^{<< 1 2 >> <arg1>} <obja> ^{<< 1 2 >> <arg2>} {<objx> <> <obj>} -^3 ^{<arg1> <> <arg2>})
   -->
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^<arg1> <obj> ^<arg2> <objx>)
}
sp {learn-predicate*elaborate*inherited*location*relations*2
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> ^dont-copy <instance2>)
   (<instance2> ^1 <obja> ^2 {<objx> <> <obj>} -^3)
   -->
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^1 <obj> ^2 <objx>)
}
#inherit x y row column position
sp {learn-predicate*elaborate*inherited*location*xy*coordinate
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates <preds>)
   (<preds> ^{<< x y row column position >> <xy>} <cord> )#^category location 
   (<obj> ^predicates <op>)
   -->
   (<op> ^<xy> <cord> ^dont-copy <xy> ^dont-copy dont-copy)
}
sp {learn-predicate*elaborate*from*transfer-action-goal
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate <ss>)
   (<ss> ^name transfer-action-goal ^structure <t> ^gtype <type>)
-->
   (<s> ^gtype <type>
      #  ^retrieve-handle <handle>
        #^parsed-structure <ps>
        ^completed-version 1
        ^game <name>
        ^<type> <t>
        ^main-type <type>)
}
#trying to fix triple pass! fucked by GDS not sure why, for now just do two games
#sp {learn-predicate*elaborate*from*transfer-action-goal
#:o-support
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.name <name>
#              ^superstate <ss>)
#   (<ss> ^name transfer-action-goal ^structure <t>)
#   (<t> ^predicate-structure <p>  ^type <type> ^argnum <an> ^handle <aname>)
#-->
#   (<s> ^gtype <type>
#      #  ^retrieve-handle <handle>
#        #^parsed-structure <ps>
#        ^game <name>
#        ^<type> <act>
#        ^main-type <type>)
#   (<act> ^parameter-set <pas>
#        ^nlp-set <p>
#        ^formated preidcate
#        ^aname <aname>
#        ^handle <aname>
#        ^potential-args <po>)
#   (<pas> ^argnum <an>)
#   (<p> ^aname <aname>)
#}
sp {learn-predicate*elaborate*tcn
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<t> -^learned-structure)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^main-type <type>)
        #^gtype <type>)
        #^<type> <act>)
  #(<act> ^parameter-set <ps>
  #      ^potential-args <po>)
}
sp {learn-predicate*elaborate*parsed-structure
:o-support
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<t> -^learned-structure)
   (<op> ^message <t>)
-->
   (<s> ^parsed-structure <t>)
}
sp {learn-predicate*elaborate*tcn*nlp-set
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<op> ^nlp-set <nps>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^parsed-structure <t>
        ^gtype <type>
        ^main-type <type>
        ^completed-version 1
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}
#weird check why fires at first selection auto repair
sp {learn-predicate*elaborate*tcn*nlp-set*stored
:o-support
   (state <s> ^name learn-predicate
              ^quiescence t 
			 -^main-type #COPY FIX
			  ^top-state.dialog-context <dc>
              ^superstate.operator <op>)
   (<t> ^learned-structure <nps>)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
#(interrupt) #TODO use message structure? and rebuild?
#TODO need to clean learn-link and message <t> then of parsed-struct, or dont add
#TODO better explained if is iterative (add new knowledge so should rebuild ...)
#(write (cmd print <nps> -d 10))
#(write (cmd print <op> -d 4))
   (<s> ^parsed-structure <t2>
        ^gtype <type>
        ^completed-version 1
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}
sp {learn-predicate*apply*convert-language-format*clean-old-structures
   (state <s> ^name learn-predicate
             -^<gtype>.nlp-set
              ^parsed-structure <t>
              ^operator <o>
              ^top-state.dialog-context.learn-link <ll>
              ^gtype <gtype>
             -^tcn)
   (<o> ^name create-from-parse) #convert-parsed-format
   (<ll> ^predicate-structure <ps>)
   (<ps> ^conditions <nlp>)
-->
(interrupt)
   (<ps> ^conditions <nlp> -)
}
sp {learn-predicate*propose*create-from-parse
   (state <s> ^name learn-predicate
             #-^<type>.nlp-set #CHANGE
             #-^prohibit
             -^completed-version 1 
              ^parsed-structure <t>
			  ^main-type <type>
              #^gtype <gtype>
             -^tcn)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-from-parse #convert-parsed-format
        ^structure <t>)
}
sp {learn-predicate*propose*create-from-parse*next-version
   (state <s> ^name learn-predicate
              #^prohibit <pp>
              ^next-version <nv>
             -^prohibit <nv>
              ^completed-version 1
             -^completed-version 2 
              ^parsed-structure <t>
			  ^main-type <type>
             -^tcn)
-->
#(interrupt)
   (<s> ^operator <o> + =)
   (<o> ^name create-from-parse
        #^prohibit <pp>
        ^structure <t>)
}
#delay this copy until we have picked a winner!
sp {learn-predicate*store*structure
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated ^final-version) #COPY CHANGE
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
-->
   (<ps> ^conditions <nlp>) #COPY PROBLEM	
}
sp {learn-predicate*store*prefer
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^prefer <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^prefer <nlp>)#COP PROBLEM
}
sp {learn-predicate*store*avoid
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^avoid <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^avoid <nlp>)#COP PROBLEM
}
sp {learn-predicate*store*moved
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^moved <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^moved <nlp>)
}
sp {learn-predicate*store*modifier
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^modifier <m> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^modifier <m>)
   (<s> ^problemspace game-heuristics)
}
sp {learn-predicate*store*consider
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^consider <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^consider <nlp>)
   (<s> ^problemspace games)
}
sp {learn-predicate*store*opponent
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.opponent <o> ^formated ^handle <n> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^opponent <o>)
}
sp {learn-predicate*store*structure*argnum
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^main-type {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^parameter-set.argnum <an> ^handle <n> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^argnum <an>) #COPY PROBLEM
}
sp {learn-predicate*store*structure*heuristic
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype heuristic
              ^main-type heuristic
              ^heuristic <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name> ^ntype heuristic)
-->
   (<s> ^ntype heuristic)
   (<t> ^ntype heuristic)
}
sp {learn-predicate*store*structure*learned-predicate
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name>)
-->
   (<ll> ^predicate-structure <ps> ^argnum <an>) #COPY PROBLEM
}
sp {learn-predicate*store*structure*learned-predicate*conditions
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated ^handle <name> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps> ^handle <name>)
-->
   (<ps> ^conditions <nlp>) #COPY PROBLEM
}
#COPY PROBLEM
#wait for all of interpretations to be created and formatted
sp {learn-predicate*elaborate*list-games
   (state <s> ^name learn-predicate
              ^main-type <type2>
              #^<type2> <gt>
              ^completed-versions true      
              ^top-state.dialog-context <dc>
              ^superstate.operator <op>)
   (<op> ^type <type>)
   #(<gt> ^handle <pname> ^formated)
   (<dc> ^name <name>)#^learn-link.handle <pname>
-->
   (<s> ^list.game <g> ^objects <o>)
   (<g> ^game <name> ^type <type> predicate) 
   (<s> ^current <g>)
}
sp {learn-predicate*elaborate*game-name
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate.operator <op>)
   (<op> ^type <type> ^message)
-->
   (<s> ^game <name>)
}
sp {learn-predicate*elaborate*actiongoalname
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname> ^handle <aname>)
}
sp {learn-predicate*elaborate*opponent
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.opponent <o>)
-->
   (<t> ^opponent <o>)
}
sp {learn-predicate*elaborate*handlename
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^handle <aname>)
-->
	(<t> ^aname <aname>)
}
sp {learn-predicate*propose*formate-conditions
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated)
-->
#(write (cmd print <nlp> -d 10))
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
		^predicate <t>
        ^nlp-set <nlp>)
}
sp {preference*learn-predicate*prefer*x*over*format-conditions
   (state <s> ^name learn-predicate
              ^operator <o> +
              ^operator <o2> +)
    (<o> ^name create-from-parse)
    (<o2> ^name format-conditions)
-->
   (<s> ^operator <o> > <o2>)
}
#create completed all versions that fires after format-conditions
sp {learn-predicate*propose*completed-creating-versions
   (state <s> ^name learn-predicate
             -^completed-versions
              ^main-type <type>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name completed-creating-versions)
}

sp {learn-predicate*apply*completed-creating-versions
#:interrupt
   (state <s> ^name learn-predicate
              ^operator.name completed-creating-versions)
-->
   (<s> ^completed-versions true)
}

sp {learn-predicate*apply*completed-creating-versions*debug
#:interrupt
   (state <s> ^name learn-predicateXX
   		  	  ^main-type goal
			  ^goal.nlp-set <n>
              ^operator.name completed-creating-versions)
-->
(interrupt)
(write (cmd print <n> -d 10))
}

#TODO change in all cases, only copy to learn link once detected
sp {learn-predicate*apply*completed-creating-versions*single-version
   (state <s> ^name learn-predicate
             -^prohibit #only single type
              ^main-type predicate #<type>
              ^predicate <t>
              ^operator.name completed-creating-versions)
-->
   (<t> ^final-version true)
}

sp {learn-predicate*elaborate*sub-conditions
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*simulated-true
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
-->
   (<s> ^simulated true)
}
sp {learn-predicate*elaborate*sub-conditions*predicate
   (state <s> ^name learn-predicate
              ^gtype {<type> << predicate heuristic >>}
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*heuristic
   (state <s> ^name learn-predicate
              ^ntype heuristic
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*action-predicate
   (state <s> ^name learn-predicate
              #^main-type predicate #may cause issues..
              ^predicate.condition <c>
              ^gtype action
              ^action <t>)
   (<c> ^verb <on> ^type concept ^attribute action)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*actiongoal
   (state <s> ^name learn-predicate
              ^superstate.name transfer-action-goal
              ^gtype {<gtype> << action goal failure >> }
              ^<gtype> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*nlp-set*verb-structure
   (state <s> ^name learn-predicate
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
	(<t> ^verb-structure <vs>)
}
#need to make at end of learn
sp {learn-predicate*elaborate*learn-link*verb-structure
:o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learn-link <ll> #TODO most recent?
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs> ^final-version)
-->
   (<ll> ^verb-structure <vs>)
}