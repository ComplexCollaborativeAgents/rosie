sp {handle-new-whenever-task*propose*complete-handle-new-whenever-task
   (state <s> ^name handle-new-whenever-task
              ^learned-whenever-task true)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-handle-new-whenever-task)
}

sp {handle-new-whenever-task*apply*complete-handle-new-whenever-task
   (state <s> ^name handle-new-whenever-task
              ^operator.name complete-handle-new-whenever-task
              ^whenever-segment <seg>
              ^task-concept-network.handle <task-handle>
              ^top-state.task-stack <stack>)
   (<stack> ^new-whenever-task <seg>
            ^whenever <when>)
   (<seg> ^task-operator.conditions <conds>)
-->
   (<stack> ^new-whenever-task <seg> -)
   (<when> ^whenever-task <task>)
   (<task> ^conditions <conds>
           ^task-handle <task-handle>)
}

sp {handle-new-whenever-task*apply*complete-handle-new-whenever-task*report*performed
   (state <s> ^name handle-new-whenever-task
              ^operator.name complete-handle-new-whenever-task
              ^whenever-segment <seg>
              ^task-concept-network <tcn>
              ^top-state.task-stack <stack>)
   (<stack> ^new-whenever-task <seg>
            ^whenever <when>)
   (<seg> ^task-operator.conditions <conds>)
   (<tcn> ^handle <task-handle>
          ^procedural.op_name <task-name>)
-->
   (<stack> ^new-whenever-task <seg> -)
   (<when> ^whenever-task <task>)
   (<task> ^conditions <conds>
           ^task-handle <task-handle>
           ^task-name <task-name>)
}

sp {handle-new-whenever-task*apply*complete-handle-new-whenever-task*report*performed
   (state <s> ^name handle-new-whenever-task
              ^operator.name complete-handle-new-whenever-task
              ^top-state.interaction <interaction>)
   (<interaction> ^stack.segment.purpose.satisfaction.learning-event.type whenever
                  ^status <status>)
-->
   (<status> ^performed.learning-event.type whenever)
}
