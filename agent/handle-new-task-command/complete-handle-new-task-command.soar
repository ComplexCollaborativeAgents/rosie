
sp {handle-new-task-command*propose*complete-handle-new-task-command
   (state <s> ^name handle-new-task-command
              ^task-operator <op>
              ^new-task-segment <seg>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-handle-new-task-command)
}

sp {handle-new-task-command*apply*complete-handle-new-task-command*copy*new-task-segment*task-stack
   (state <s> ^name handle-new-task-command
              ^operator.name complete-handle-new-task-command
              ^new-task-segment <seg>
              ^task-type execute-task
              ^top-state.task-stack <stack>)
-->
   (<stack> ^new-task-segment <seg>)
}

sp {handle-new-task-command*apply*complete-handle-new-task-command*copy*new-task-segment*task-stack*whenever
   (state <s> ^name handle-new-task-command
              ^operator.name complete-handle-new-task-command
              ^new-task-segment <seg>
              ^task-type whenever-task
              ^top-state.task-stack <stack>)
-->
   (<stack> ^new-whenever-task <seg>)
}

sp {handle-new-task-command*apply*complete-handle-new-task-command*update*interaction*segment*params
   (state <s> ^name handle-new-task-command
              ^operator.name complete-handle-new-task-command
              ^command-message <msg>
              ^task-operator <task-op>
              ^top-state.interaction.stack.segment.purpose.parameters <params>)
   (<params> ^command-message <msg>)
-->
   (<params> ^command-message <msg> -
             ^task-operator <task-op>)
}
