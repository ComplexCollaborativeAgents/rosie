
####################### generalize-argument ###########################
#
# These rules take a specific instance of an action argument
#   and generates a generalized-rep to be stored in smem
#
# They fire if a generalize-argument structure is on the state
#   (state <s> ^generalize-argument <gen-arg>)
#   (<gen-arg> ^instance <i>)  # usually from the action operator

#   Also expects the following on the state: 
#     action-operator, action-id

# Produces (<gen-arg> ^generalized-rep <gen>)


sp {anystate*generalize-argument*prefer*procedural*over*default
  (state <s> ^generalize-argument <arg>
              ^operator <o1> +
              ^operator <o2> +)
  (<o1> ^name generalize-argument
        ^argument <arg>
        ^match-type procedural)
  (<o2> ^name generalize-argument
        ^argument <arg>
        ^match-type default)
-->
  (<s> ^operator <o1> > <o2>)
}

####################### object ###########################

# procedural match - the object matches one on the action-operator
sp {anystate*propose*generalize-argument*object*procedural*level1
  (state <s> ^generalize-argument <arg>
             ^action-id.procedural.<arg-name> <parg>
             ^action-operator.<arg-name>.id <obj>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type object
       ^id <obj>)
  (<parg> ^arg-type object
          ^id <obj-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
}

sp {anystate*propose*generalize-argument*object*procedural*level2
  (state <s> ^generalize-argument <arg>
             ^action-id.procedural.<arg-name> <parg>
             ^action-operator.<arg-name>.{2} <obj>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type object
       ^id <obj>)
  (<parg> ^arg-type predicate
          ^2 <obj-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
}

sp {anystate*apply*generalize-argument*object*procedural
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj-slot>)
-->
  (<arg> ^generalized-rep <gen>)
  (<gen> ^arg-type object
         ^id <obj-slot>)
}

# default match - copy the predicates onto a default rep
sp {anystate*propose*generalize-argument*object*default
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type object
       ^id <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instance <obj>
       ^predicates <preds>)
}

sp {anystate*elaborate*generalize-argument*object*default*predicates*sentence
  (state <s> ^generalize-argument <arg>
             ^operator <o> +
             ^subaction-id.handle << say1 ask1 >>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instance.predicates <preds>
       ^predicates <def-preds>)
  (<preds> ^sentence <sent>)
-->
  (<def-preds> ^sentence <sent>)
}

sp {anystate*elaborate*generalize-argument*object*default*predicates
  (state <s> ^generalize-argument <arg>
             ^operator <o> +)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^instance.predicates <preds>
       ^predicates <def-preds>)
  (<preds> ^{ <prop-handle> << modifier1 category property >> } <pred-handle>)
  #(<preds> ^{ <prop-handle> << modifier1 color shape size category property spatial-shape >> } <pred-handle>)
-->
  (<def-preds> ^<prop-handle> <pred-handle>)
}

# ENUMERATE: 1-5 predicates

sp {anystate*apply*generalize-argument*object*default*1*predicate
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>             } <pred1>)
 -{(<def-preds> ^{ <prop2> <> <prop1> } <pred2>)}
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>)
}

sp {anystate*apply*generalize-argument*object*default*2*predicates
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>)
  -{(<def-preds> ^{ <prop3> <> <prop2> <> <prop1> } <pred3>)}
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>)
}

sp {anystate*apply*generalize-argument*object*default*3*predicates
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>)
  -{(<def-preds> ^{ <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred4>)}
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>)
}

sp {anystate*apply*generalize-argument*object*default*4*predicates
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>
               ^{ <prop4> > <prop3> } <pred4>)
  -{(<def-preds> ^{ <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred5>)}
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>
         ^<prop4> <pred4>)
}

sp {anystate*apply*generalize-argument*object*default*5*predicates
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^predicates <def-preds>)
  (<def-preds> ^{ <prop1>           } <pred1>
               ^{ <prop2> > <prop1> } <pred2>
               ^{ <prop3> > <prop2> } <pred3>
               ^{ <prop4> > <prop3> } <pred4>
               ^{ <prop5> > <prop4> } <pred5>)
  -{(<def-preds> ^{ <prop6> <> <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred6>)}
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type object
         ^id <obj-slot>)
  (<obj-slot> ^default <def>)
  (<def> ^<prop1> <pred1>
         ^<prop2> <pred2>
         ^<prop3> <pred3>
         ^<prop4> <pred4>
         ^<prop5> <pred5>)
}

####################### concept ###########################

# procedural match - the concept matches one on the action-operator
sp {anystate*propose*generalize-argument*concept*procedural
  (state <s> ^generalize-argument <arg>
             ^action-id.procedural.<arg-name> <parg>
             ^action-operator.<arg-name>.handle <handle>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type concept
       ^handle <handle>)
  (<parg> ^arg-type concept
          ^id <conc-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type concept
       ^match-type procedural
       ^id <conc-slot>)
}

sp {anystate*apply*generalize-argument*concept*procedural
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type concept
       ^match-type procedural
       ^id <conc-slot>)
-->
  (<arg> ^generalized-rep <gen>)
  (<gen> ^arg-type concept
         ^id <conc-slot>)
}

# default match - copy the predicates onto a default rep
sp {anystate*propose*generalize-argument*concept*default
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type concept
       ^handle <handle>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type concept
       ^match-type default
       ^predicate-handle <handle>)
}

sp {anystate*apply*generalize-argument*concept*default
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type concept
       ^match-type default
       ^predicate-handle <handle>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type concept
         ^id <conc-slot>)
  (<conc-slot> ^default <def>)
  (<def> ^predicate-handle <handle>)
}

####################### predicate-handle ###########################


# procedural match - the predicate-handle matches one on the action-operator
sp {anystate*propose*generalize-argument*predicate-handle*procedural
  (state <s> ^generalize-argument <arg>
             ^action-id.procedural.<arg-name> <parg>
             ^action-operator.<arg-name>.handle <handle>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type predicate-handle
       ^handle <handle>)
  (<parg> ^arg-type predicate
          ^id <pred-slot>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-handle
       ^match-type procedural
       ^id <pred-slot>)
}

sp {anystate*apply*generalize-argument*predicate-handle*procedural
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-handle
       ^match-type procedural
       ^id <pred-slot>)
-->
  (<arg> ^generalized-rep <gen>)
  (<gen> ^arg-type predicate-handle
         ^id <pred-slot>)
}

# default match - copy the predicates onto a default rep
sp {anystate*propose*generalize-argument*predicate-handle*default
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>
        -^generalized-rep)
  (<i> ^arg-type predicate-handle
       ^handle <handle>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-handle
       ^match-type default
       ^predicate-handle <handle>)
}

sp {anystate*apply*generalize-argument*predicate-handle*default
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-handle
       ^match-type default
       ^predicate-handle <handle>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^arg-type predicate-handle
         ^id <pred-slot>)
  (<pred-slot> ^default <def>)
  (<def> ^predicate-handle <handle>)
}

####################### predicate ###########################

sp {anystate*generalize-argument*expand*predicate*generalize*object
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>)
  (<i> ^arg-type predicate
       ^handle <handle>
       ^2 <obj>)
-->
  (<s> ^generalize-argument <gen-obj> <gen-pred>)

  (<gen-pred> ^instance <pred-i>)
  (<pred-i> ^arg-type predicate-handle
            ^handle <handle>)

  (<gen-obj> ^instance <obj-i>)
  (<obj-i> ^arg-type object
           ^id <obj>)

  (<arg> ^generalize-handle <gen-pred>
         ^generalize-obj2 <gen-obj>)
}

sp {anystate*propose*generalize-argument*predicate
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance.arg-type predicate
         ^generalize-handle.generalized-rep.id <pred-slot>
         ^generalize-obj2.generalized-rep.id <obj-slot>
        -^generalized-rep)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate
       ^id <pred-slot>
       ^2 <obj-slot>)
}

sp {anystate*apply*generalize-argument*predicate*procedural
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate
       ^id <pred-slot>
       ^2 <obj-slot>)
-->
  (<arg> ^generalized-rep <gen>)
  (<gen> ^arg-type predicate
         ^id <pred-slot>
         ^2 <obj-slot>)
}

####################### single-predicate ###########################

# State Predicate

sp {anystate*generalize-argument*expand*single-predicate*state
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>)
  (<i> ^type state
       ^handle <handle>
       ^1 <obj1>)
-->
  (<s> ^generalize-argument <gen-obj1> <gen-pred>)

  (<gen-pred> ^instance <pred-i>)
  (<pred-i> ^arg-type predicate-handle
            ^handle <handle>)

  (<gen-obj1> ^instance <obj1-i>)
  (<obj1-i> ^arg-type object
            ^id <obj1>)

  (<arg> ^generalize-handle <gen-pred>
         ^generalize-obj1 <gen-obj1>)
}

sp {anystate*propose*generalize-argument*single-predicate*state
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance.type state
         ^generalize-handle.generalized-rep.id <pred-slot>
         ^generalize-obj1.generalized-rep.id <obj1-slot>
         -^generalized-rep)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type single-argument
       ^pred-type state
       ^id <pred-slot>
       ^1 <obj1-slot>)
}

sp {anystate*apply*generalize-argument*single-predicate*state
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type single-argument
       ^pred-type state
       ^id <pred-slot>
       ^1 <obj1-slot>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^type state
         ^id <pred-slot>
         ^1 <obj1-slot>)
}

# Relation Predicate

sp {anystate*generalize-argument*expand*single-predicate*relation
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance <i>)
  (<i> ^type relation
       ^handle <handle>
       ^1 <obj1>
       ^2 <obj2>)
-->
  (<s> ^generalize-argument <gen-pred> <gen-obj1> <gen-obj2>)

  (<gen-pred> ^instance <pred-i>)
  (<pred-i> ^arg-type predicate-handle
            ^handle <handle>)

  (<gen-obj1> ^instance <obj1-i>)
  (<obj1-i> ^arg-type object
            ^id <obj1>)

  (<gen-obj2> ^instance <obj2-i>)
  (<obj2-i> ^arg-type object
            ^id <obj2>)

  (<arg> ^generalize-handle <gen-pred>
         ^generalize-obj1 <gen-obj1>
         ^generalize-obj2 <gen-obj2>)
}

sp {anystate*propose*generalize-argument*single-predicate*relation
  (state <s> ^generalize-argument <arg>)
  (<arg> ^instance.type relation
         ^generalize-handle.generalized-rep.id <pred-slot>
         ^generalize-obj1.generalized-rep.id <obj1-slot>
         ^generalize-obj2.generalized-rep.id <obj2-slot>
         -^generalized-rep)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type single-argument
       ^pred-type relation
       ^id <pred-slot>
       ^1 <obj1-slot>
       ^2 <obj2-slot>)
}

sp {anystate*apply*generalize-argument*single-predicate*relation
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type single-argument
       ^pred-type relation
       ^id <pred-slot>
       ^1 <obj1-slot>
       ^2 <obj2-slot>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^type relation
         ^id <pred-slot>
         ^1 <obj1-slot>
         ^2 <obj2-slot>)
}

####################### predicate-set ###########################

sp {anystate*generalize-argument*expand*predicate-set
  (state <s> ^generalize-argument <arg>)
  (<arg> ^arg-type predicate-set
         ^instance.predicate <pred>)
-->
  (<s> ^generalize-argument <gen-pred>)
  (<gen-pred> ^arg-type single-predicate
              ^instance <pred>)
  (<arg> ^generalize-pred <gen-pred>)
}

sp {anystate*elaborate*generalize-argument*predicate-set*ungeneralized-pred
  (state <s> ^generalize-argument <arg>)
  (<arg> ^arg-type predicate-set
         ^generalize-pred <gen-pred>)
  (<gen-pred> -^generalized-rep)
-->
  (<arg> ^ungeneralized-preds true)
}

sp {anystate*propose*generalize-argument*predicate-set
  (state <s> ^generalize-argument <arg>)
  (<arg> ^arg-type predicate-set
         -^generalized-rep
         -^ungeneralized-preds true)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-set)
}

# ENUMERATE: 1-3 predicates

sp {anystate*apply*generalize-argument*predicate-set*1
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-set)
  (<arg> ^generalize-pred { <pred1> }
         -^generalize-pred { <pred2> <> <pred1> })
  (<pred1> ^generalized-rep <rep1>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^predicate <rep1>)
}

sp {anystate*apply*generalize-argument*predicate-set*2
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-set)
  (<arg> ^generalize-pred { <pred1>           }
         ^generalize-pred { <pred2> > <pred1> }
         -^generalize-pred { <pred3> <> <pred2> <> <pred1> })
  (<pred1> ^generalized-rep <rep1>)
  (<pred2> ^generalized-rep <rep2>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^predicate <rep1> <rep2>)
}

sp {anystate*apply*generalize-argument*predicate-set*3
  (state <s> ^generalize-argument <arg>
             ^operator <o>)
  (<o> ^name generalize-argument
       ^argument <arg>
       ^arg-type predicate-set)
  (<arg> ^generalize-pred { <pred1>           }
         ^generalize-pred { <pred2> > <pred1> }
         ^generalize-pred { <pred3> > <pred2> }
         -^generalize-pred { <pred4> <> <pred3> <> <pred2> <> <pred1> })
  (<pred1> ^generalized-rep <rep1>)
  (<pred2> ^generalized-rep <rep2>)
  (<pred3> ^generalized-rep <rep3>)
-->
  (<arg> ^generalized-rep <rep>)
  (<rep> ^predicate <rep1> <rep2> <rep3>)
}
             
