# action-operator
#   The superoperator which we are trying to execute

# By default it is elaborated from the superstate.operator
sp {action*elaborate*action-operator*superoperator
   (state <s> ^problem-space.name action
              ^superstate.operator <o>)
   (<o> ^action-handle <h>)
-->
   (<s> ^action-operator <o>)
}

# If we are in evaluate-operator, we have deep copied the world
#   So we have to create a transformed version of the action operator (from 2 states up)
#   Using deep copies of the objects involved
sp {action*problem-space*elaborate*action-operator*deep
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator <operator>)
-->
   (<s> ^deep-copy-action-operator <operator>
        ^action-operator <new-operator>)
}

#####################################################################
# Rules for deep copying the action operator
#   If there exists deep-copy-action-operator <source-operator>
# ! Assumes that the world has been deep copied

# Copy all attributes that don't have substructure
sp {action*problem-space*elaborate*action-operator*deep*copy*level*1
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>)
   (<src-op> ^<att> <val>)
   -{(<val> ^<sub>)}
-->
   (<new-op> ^<att> <val>)
}

####################################################
# object arguments

# CASE 1:
#   If there is an object listed in the copy-object-map, use that copy
sp {action*problem-space*elaborate*action-operator*deep*copy*object*argument*existing
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
              ^deep-copy-world.copy-objects-map.entry <obj-e>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<obj-e> ^source <src-obj>
            ^copy <new-obj>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
}

# CASE 2:
#   If there is no object listed in the copy-object-map
#   Create a new deep copy of that object

# Create a new object representation
sp {action*problem-space*elaborate*action-operator*deep*copy*object*arugment*new
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

# copy predicates onto the new object (if no entry in copy-objects-map)
sp {action*problem-space*elaborate*action-operator*deep*copy*object*argument*new*copy*predicates
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
             -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   # Copy
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^id <new-obj>)
   (<new-obj> ^predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

####################################################
# concept arguments

sp {action*problem-space*elaborate*action-operator*deep*copy*concept*argument
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^id <concept>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept>)
}

####################################################
# concept arguments
   
#### copy predicate argument
sp {action*problem-space*elaborate*action-operator*deep*copy*predicate*argument*existing
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
              ^deep-copy-world.copy-objects-map.entry <obj-e>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^handle <handle>
              ^2 <src-obj>)
   (<obj-e> ^source <src-obj>
            ^copy <obj>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred>
              ^2 <obj>)
}

# object isn't in copy map, make a new deep copy
sp {action*problem-space*elaborate*action-operator*deep*copy*predicate*argument*new*level1
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

sp {action*problem-space*elaborate*action-operator*deep*copy*predicate*argument*new*level2
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^2 <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^2 <new-obj>)
   (<new-obj> ^predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

#### copy until-clause argument
   
sp {action*problem-space*elaborate*action-operator*deep*copy*until-clause
   (state <s> ^deep-copy-action-operator <src-op>
              ^action-operator <new-op>)
   (<src-op> ^until-clause <src-until>)
-->
   (<new-op> ^until-clause <new-until>)
}
   
sp {action*problem-space*elaborate*action-operator*deep*copy*until-clause*state*predicate
   (state <s> ^deep-copy-action-operator.until-clause.predicate <src-pred>
              ^action-operator.until-clause <new-until>
              ^deep-copy-world.copy-objects-map <objs-map>)
   (<src-pred> ^type state
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <src-obj>)
   (<objs-map> ^entry <obj-e>)
   (<obj-e> ^source <src-obj>
            ^copy <obj>)
-->
   (<new-until> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <obj>)
}
sp {action*problem-space*learning*elaborate*action-operator*deep*until-clause*relation*predicate
   (state <s> ^deep-copy-action-operator.until-clause.predicate <src-pred>
              ^action-operator.until-clause <new-until>
              ^deep-copy-world.copy-objects-map <objs-map>)
   (<src-pred> ^type relation
               ^handle <pred-handle>
               ^1 <src-obj1>
               ^2 <src-obj2>)
   (<objs-map> ^entry <obj1-e> <obj2-e>)
   (<obj1-e> ^source <src-obj1>
            ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
            ^copy <obj2>)
-->
   (<new-until> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred-handle>
               ^1 <obj1>
               ^2 <obj2>)
}
