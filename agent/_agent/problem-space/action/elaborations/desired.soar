####################### desired ###########################
#
# These rules will check if a desired structure (goal) is satisfied
#
# They fire is a desired structure is on the state in an action problem-space
#   (state <s> ^desired <des>)
#   (<des> ^predicate <pred>)   # Can be more than 1 predicate
#   (<pred> ^type << state relation >>
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>) # may have 2 or more arguments if a relation
# Will elaborate each predicate with ^satisfied true, 
#   and elaborates the desired structure with ^satisfied true if all predicates are satisfied

#   Also expects the following on the state: 
#     world


# state predicate is satisfied if the unary predicate exists on the object
sp {action*elaborate*desired*state*predicate*satisfied
   (state <s> ^problem-space.name action
              ^desired.predicate <p>)
   (<p> ^type state
        ^handle <pred-name>
        ^1 <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop-handle> <pred-name>)
-->
   (<p> ^satisfied true)
}

# Check if a visible predicate is satisfied (the object is visible)
sp {action*elaborate*desired*state*predicate*satisfied*visible
   (state <s> ^problem-space.name action
              ^desired <des>
              ^world.objects.object <obj>)
   (<des> ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^{1} <obj>)
   (<obj> ^predicates.visible true)
-->
   (<pred> ^satisfied true)
}

# relation predicate is satisfied if the relation exists as a predicate instance
sp {action*elaborate*desired*relation*predicate*satisfied
   (state <s> ^problem-space.name action
              ^desired.predicate <p>
              ^world.predicates <preds>)
   (<p> ^type relation
        ^handle <rel-handle>
        ^1 <obj1>
        ^2 <obj2>)
   (<preds> ^predicate <pred>)
  (<pred> ^handle <rel-handle>
           ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
-->
   (<p> ^satisfied true)
}

# #ENUMERATE based on the number of predicates (1-6)
sp {action*elaborate*desired*satisfied*1*predicate
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>)
   (<p1> ^satisfied true)
   -{(<d> ^predicate { <p2> <> <p1> })}
-->
   (<d> ^satisfied true)
}

sp {action*elaborate*desired*satisfied*2*predicates
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>
        ^predicate { <p2> > <p1> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   -{(<d> ^predicate { <p3> <> <p1> <> <p2> })}
-->
   (<d> ^satisfied true)
}

sp {action*elaborate*desired*satisfied*3*predicates
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>
        ^predicate { <p2> > <p1> }
        ^predicate { <p3> > <p2> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   (<p3> ^satisfied true)
   -{(<d> ^predicate { <p4> <> <p1> <> <p2> <> <p3> })}
-->
   (<d> ^satisfied true)
}

sp {action*elaborate*desired*satisfied*4*predicates
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>
        ^predicate { <p2> > <p1> }
        ^predicate { <p3> > <p2> }
        ^predicate { <p4> > <p3> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   (<p3> ^satisfied true)
   (<p4> ^satisfied true)
   -{(<d> ^predicate { <p5> <> <p1> <> <p2> <> <p3> <> <p4> })}
-->
   (<d> ^satisfied true)
}


sp {action*elaborate*desired*satisfied*5*predicates
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>
        ^predicate { <p2> > <p1> }
        ^predicate { <p3> > <p2> }
        ^predicate { <p4> > <p3> }
        ^predicate { <p5> > <p4> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   (<p3> ^satisfied true)
   (<p4> ^satisfied true)
   (<p5> ^satisfied true)
   -{(<d> ^predicate { <p6> <> <p1> <> <p2> <> <p3> <> <p4> <> <p5>})}
-->
   (<d> ^satisfied true)
}

sp {action*elaborate*desired*satisfied*6*predicates
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^predicate <p1>
        ^predicate { <p2> > <p1> }
        ^predicate { <p3> > <p2> }
        ^predicate { <p4> > <p3> }
        ^predicate { <p5> > <p4> }
        ^predicate { <p6> > <p5> })
   (<p1> ^satisfied true)
   (<p2> ^satisfied true)
   (<p3> ^satisfied true)
   (<p4> ^satisfied true)
   (<p5> ^satisfied true)
   (<p6> ^satisfied true)
   -{(<d> ^predicate { <p7> <> <p1> <> <p2> <> <p3> <> <p4> <> <p5> <> <p6> })}
-->
   (<d> ^satisfied true)
}

