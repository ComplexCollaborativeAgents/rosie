########## evaluate-operator state #########

sp {problem-space*action*evaluate-operator*elaborate*problem-space*action*type*simulate
   (state <s> ^name evaluate-operator
              ^problem-space <ps>)
   (<ps> ^action <a>)
-->
   (<a> ^type simulate)
}

sp {problem-space*action*evaluate-operator*elaborate*problem-space*default-copy*info
   (state <s> ^name evaluate-operator
              ^problem-space <ps>)
   (<ps> ^name action
        -^action-space waypoint-search)
-->
   (<ps> ^default-state-copy no
         ^default-operator-copy custom
         ^default-desired-copy yes)
}
  

sp {problem-space*action*evaluate-operator*elaborate*problem-space*world*copy-type*deep
   (state <s> ^name evaluate-operator
              ^problem-space <ps>)
   (<ps> ^name action
        -^action-space waypoint-search
         ^world <world>)
-->
   (<world> ^copy-type deep)
}

sp {problem-space*action*evaluate-operator*elaborate*problem-space*subactions*copy-type*deep
   (state <s> ^name evaluate-operator
              ^problem-space <ps>)
   (<ps> ^name action
        -^action-space waypoint-search
         ^subactions <subs>)
-->
   (<subs> ^copy-type deep)
}

sp {problem-space*action*evaluate-operator*elaborate*propose-action-operators*true
   (state <s> ^name evaluate-operator
              ^problem-space <ps>)
   (<ps> ^name action
         ^action <action>)
-->
   (<action> ^propose-action-operators true)
}


## If the desired goal is satisfied, report success
sp {problem-space*action*evaluate-operator*elaborate*successs*desired*satisfied
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^desired <d>)
   (<d> ^satisfied true)
-->
   (<s> ^success <d>)
}
