Given information about an object, tries to match it against the current world objects
A valid match is one that is close enough to the given svs-obj and where no properties conflict
Either returns ^world-match-result <obj-info> where <obj-info> is from object-monitor.object-info
	Or returns ^world-match-result none

### State Representation ###

^object-handle <handle> 
	The handle of the object being matched
	Copied from superoperator
	
^object-predicates <preds>
	A set of predicates used to match against
	Copied from superoperator
	
^svs-obj <obj>
	A reference to the svs representation of the object to match against
	Copied from superoperator
	
^match-type << non-visible all >>
	Whether visible world objects are included in the matching process
	Copied from superoperator
	
^candidate-set 
	Contains a list of world objects that are candidates to be matched, 
		along with match scoring information
	^candidate
		^object-info - ref to object-monitor.object-info
		^distance <d> - euclidean distance from svs-obj to the candidate
		^valid << true false >> - true if no conflicts arise
		^predicate-conflict true - shown if the predicates conflict

^distance-results true
	Flag created once the distances for the candidates are extracted

### Operators + order ###

extract-distances
match-candidate
complete-match-world-object

### Operators ###

extract-distance
	Creates a filter to check distance from svs-obj to all belief objects
	When it is finished, creates flag (^distance-results true)
	
match-candidate
	Proposes an operator for each valid candidate
	Candidates are preferred for lower distances,
		and rejected if distance is above agent-params.stale-match-distance
	The selected operator will copy its candidate to the top-state 
		as ^world-match-result <obj-info>
	
complete-match-world-object
	Preferred after all others, if no match-candidate operator fired
		This one returns ^world-match-result none to superstate
	
