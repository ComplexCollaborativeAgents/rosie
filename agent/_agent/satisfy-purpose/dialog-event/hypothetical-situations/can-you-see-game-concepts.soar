sp {dialog-event*propose*answer-can-you-see-game-concepts
   (state <s> ^name dialog-event
              #-^descriptions <descs>
              ^purpose <p>)
   (<p> ^type agent-detect-game-concepts
        ^parameters <params>
        ^satisfaction <sat>)   
   (<params> ^gtype <gtype> 
             ^game-handle <game>)
 -->
   (<s> ^operator <o> +) #PR - could add specific preferences where this is greater than goal, failure, action
   (<o> ^name answer-can-you-see-game-concepts
        ^gtype <gtype> 
        ^game-handle <game>)
}

sp {dialog-event*apply*answer-can-you-see-game-concepts
   (state <s> ^name dialog-event
              ^purpose <p>
              ^operator <o>)
   (<p> ^type agent-detect-game-concepts
        ^parameters <params>
        ^satisfaction <sat>)   
   (<params> ^gtype <gtype>
             ^game-handle <game>) 
   (<o> ^name answer-can-you-see-game-concepts
        ^gtype <gtype> 
        ^game-handle <game>)
-->
  (<s> ^detect-game-concepts <game>
       ^gtype <gtype>)
}
    
# Apply operator answer-can-you-see-game-concepts
sp {dialog-event*apply*answer-can-you-see-game-concepts*get-no-result-predicates
    (state <s> ^name dialog-event 
               ^operator <o> 
               ^gtype <gtype> 
               ^<gtype> <t> )
    (<o> ^name ^name answer-can-you-see-game-concepts
         ^gtype <gtype>
         ^game-handle <game>)
    (<t> ^condition <con>)
    (<con> ^result.set <set>)
    (<set> -^instance)
-->
    (<s> ^set <inc>
         #^PR-game-details yes
         ^concept-seen No)
    (<inc> ^condition <con>)
} #PR - link this to resolve-satisfaction-failure so that lowest condition will be generated

# Preferences - in order to not propose answer-can-you-see-game-concepts again
sp {dialog-event*better-preferences
   (state <s> ^name dialog-event 
              ^PR-game-details yes
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name answer-can-you-see-game-concepts)
   (<o2> ^name get-game-details)
-->
   (<s> ^operator <o1> < <o2>)
}

####################################
# Propose game-concept-identified - When game-concepts are recognized and operator is proposed
####################################

sp {operator*impasse-tie*propose*game-concept-identified
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse tie)
   (<ss> ^name dialog-event
         ^operator <o1> +
         ^operator <o2> +
         ^gtype <gtype>)
   (<o1> ^type <gtype>)
   (<o2> ^name answer-can-you-see-game-concepts)
   -{ (<s> ^item { > <o1> <> <o2> <o3> }) }
-->
   (<s> ^operator <o> +)
   (<o> ^name game-concept-identified
        ^operator <o2>
        ^concept_operators <con>)
   (<ss> ^concept_operators <con>)
}

sp {operator*impasse-tie*elaborate*game-concept-identified
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse tie 
              ^operator <o> +)
   (<ss> ^name dialog-event
         ^operator <o1> +
         ^gtype <gtype>)   
   (<o> ^name game-concept-identified
        ^concept_operators <con>)
   (<o1> ^type <gtype>)
-->
   (<con> ^operators <o1>)
}

sp {operator*impasse-tie*apply*game-concept-identified*goal-or-failure
   (state <s> ^superstate <ss>
              ^attribute operator
              ^impasse tie
              ^operator <o>)
   (<o> ^name game-concept-identified
        ^concept_operators <con>)
   (<con> ^operators <o1>)
   (<ss> ^name dialog-event
         ^operator <o1> +
         ^operator <o2> +
         ^gtype <gtype>
         ^<gtype> <t>)
   (<t> ^aname <concept-name>)
   (<o1> ^name <concept-name>)
   (<o2> ^name answer-can-you-see-game-concepts)
-->
   (<ss> ^concept-seen Yes
         ^generated no
         ^combined no) # In order to enable description of broken condition
}

#Setting satisfied to the opposite value of existing negative
sp {dialog-event*op-no-change*apply*get-game-details*false-to-true
   (state <s> ^name dialog-event 
              ^operator.name get-game-details
              ^concept-seen No
              ^PR-game-details yes
              ^set <set>
              ^descriptions <descs>)
   (<descs> ^<< description obj-desc >> <desc>)
   (<desc> ^prep
           ^negative false)
-->
   (<desc> ^satisfied true)
}

sp {dialog-event*op-no-change*apply*get-game-details*true-to-false
   (state <s> ^name dialog-event 
              ^operator.name get-game-details
              ^concept-seen No
              ^PR-game-details yes
              ^set <set>
              ^descriptions <descs>)
   (<descs> ^<< description obj-desc >> <desc>)
   (<desc> ^prep
           ^negative true)
-->
   (<desc> ^satisfied false)
}

################################################################
# Report answer using complete-answer-can-you-see-game-concepts
################################################################

sp {dialog-event*propose*complete-answer-can-you-see-game-concepts
   (state <s> ^name dialog-event
              #^combined
              #^generated <gen>
              ^concept-seen <seen>
              ^purpose.type <type>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name complete-answer-can-you-see-game-concepts
        ^concept-seen <seen>)
}

sp {dialog-event*apply*complete-answer-can-you-see-game-concepts*concept-seen-yes*send-message
   (state <s> ^name dialog-event 
              ^concept_operators <con>
              ^purpose.type <type>
              ^operator <o>
              ^purpose.parameters.gtype <gtype>
              ^io.output-link <out>)
   (<o> ^name complete-answer-can-you-see-game-concepts
        ^concept-seen << Yes >> <seen>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type <type>
          ^fields.response <res>)
   (<res> ^concept-seen <seen>
          ^count (size <con>)
          ^type <gtype>)
} #PR - at this point, add the goal.failure.action to top-state in order to answer which goals do you see?

sp {dialog-event*apply*complete-answer-can-you-see-game-concepts*concept-seen-no*send-message
   (state <s> ^name dialog-event 
              ^set <set>
              ^retrieve-game <game-name>
             # ^descriptions <descs>
              ^purpose.type <type>
              ^operator <o>
              ^purpose.parameters.gtype <gtype>
              ^io.output-link <out>
              ^top-state <ts>)
   (<o> ^name complete-answer-can-you-see-game-concepts
        ^concept-seen << No >> <seen>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type <type>
          ^fields.response <res>)
   (<res> ^concept-seen <seen>
          ^type <gtype>
          #^descriptions <descs>
          )
   (<ts> ^dialogue-context <dc>)
   (<dc> ^type conversation
         ^game-handle <game-handle>
         ^concept-seen <seen>
         ^gtype <gtype>
         ^set <set>)          
}

 #PR - TODO add game name so that people can continue to ask questions about a game
#PR - TODO add these things to top-context only if it is a dialog

sp {dialog-event*apply*complete-answer-can-you-see-game-concepts*mark*performed
   (state <s> ^name dialog-event
              ^operator.name complete-answer-can-you-see-game-concepts
              ^top-state.interaction.status <status>)
-->
   (<status> ^performed.dialog-event <de>)
   (<de> ^type explanation
         ^originator agent)
} 
