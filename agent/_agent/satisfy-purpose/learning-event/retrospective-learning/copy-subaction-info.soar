sp {retrospective-learning*propose*copy-subaction-info
   (state <s> ^name retrospective-learning
              ^subaction-episode <ep>)
-->
   (<s> ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^subaction-episode <ep>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^subaction-episode.action-stack.top.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type <type>)
-->
   (<o> ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type <type>
               ^source <arg>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info*predicate*object
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <pred-info>)
   (<pred-info> ^arg-type predicate
                ^source.{2} <obj2>)
-->
   (<o> ^argument-info <obj-info>)
   (<obj-info> ^arg-type object
               ^source.id <obj2>)
   (<pred-info> ^info2 <obj-info>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info*until-clause*state
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <pred-info>)
   (<pred-info> ^arg-type until-clause
                ^source.predicate <pred>)
   (<pred> ^type state
           ^1 <obj1>)
-->
   (<o> ^argument-info <obj1-info>)
   (<obj1-info> ^arg-type object
               ^source.id <obj1>)
   (<pred> ^info1 <obj1-info>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info*until-clause*relation
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <pred-info>)
   (<pred-info> ^arg-type until-clause
                ^source.predicate <pred>)
   (<pred> ^type relation
           ^1 <obj1>
           ^2 <obj2>)
-->
   (<o> ^argument-info <obj1-info> <obj2-info>)
   (<obj1-info> ^arg-type object
                ^source.id <obj1>)
   (<obj2-info> ^arg-type object
                ^source.id <obj2>)
   (<pred> ^info1 <obj1-info> 
           ^info2 <obj2-info>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info*object*matches-world
   (state <s> ^name retrospective-learning
              ^operator <o> +
              ^world.objects.object <wm-obj>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               ^source.id.handle <obj-handle>)
   (<wm-obj> ^handle <obj-handle>)
-->
   (<arg-info> ^matches-world <wm-obj>)
}

sp {retrospective-learning*elaborate*copy-subaction-info*argument-info*object*matches-world*linked
   (state <s> ^name retrospective-learning
              ^operator <o> +
              ^current-action.added <obj>
              ^world.objects.object <link-obj>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
              -^source.id.predicates.category message
               ^source.id.handle <obj-handle>)
   (<obj> ^handle <obj-handle>
          ^linked-to.handle <link-handle>)
   (<link-obj> ^handle <link-handle>)
-->
   (<arg-info> ^matches-world <link-obj>)
}

sp {retropsective-learning*elaborate*copy-subaction-info*object*matches-abstract
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               ^source.id.handle <obj-handle>)
-->
   (<arg-info> ^matches-abstract <obj>)
   (<obj> ^handle <obj-handle>
          ^item-type object
          ^predicates <preds>)
}

# Adds o-support
sp {retropsective-learning*elaborate*copy-subaction-info*object*matches-abstract*o-support
   (state <s> ^name retrospective-learning
              ^operator <o>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               ^matches-abstract <obj>)
   (<obj> ^handle <obj-handle>
          ^predicates <preds>)
-->
   (<obj> ^handle <obj-handle>
          ^item-type object
          ^predicates <preds>)
}

# o-supported (so predicates will stick)
sp {retropsective-learning*elaborate*copy-subaction-info*object*matches-abstract*predicates
   (state <s> ^name retrospective-learning
              ^operator <o>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               ^source.id.predicates.<prop-name> <pred-name>
               ^matches-abstract.predicates <preds>)
-->
   (<preds> ^<prop-name> <pred-name>)
}

sp {retropsective-learning*elaborate*copy-subaction-info*object*object-id*matches-world
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               ^matches-world <obj>)
-->
   (<arg-info> ^object-id <obj>)
}

sp {retropsective-learning*elaborate*copy-subaction-info*object*object-id*matches-abstract
   (state <s> ^name retrospective-learning
              ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
               -^matches-world
                ^matches-abstract <obj>)
-->
   (<arg-info> ^object-id <obj>)
}

#sp {retropsective-learning*apply*copy-subaction-info*matches-abstract*not*in*world
#   (state <s> ^name retrospective-learning
#              ^operator <o>
#              ^world.objects <objs>)
#   (<o> ^name copy-subaction-info
#        ^argument-info <arg-info>)
#   (<arg-info> ^arg-type object
#              -^arg-status abstract
#                ^matches-abstract <obj>
#                ^object-id <obj>)
#-->
#   (<objs> ^object <obj>)
#}

sp {retrospective-learning*apply*copy-subaction-info
   (state <s> ^name retrospective-learning
              ^operator.name copy-subaction-info
              ^subactions <subs>
             -^subaction-info)
   (<subs> ^next <next>)
-->
   (<s> ^subaction-info <info>)
   (<info> ^next <next>)
   (<subs> ^next <next> -
           ^next <info>)
}

sp {retrospective-learning*apply*copy-subaction-info*copy*name
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.action-stack.top.execution-operator.action-handle <action-handle>)
-->
   (<info> ^action-handle <action-handle>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*object*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <sub-info>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type object
               ^object-id <obj>)
-->
   (<sub-info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type object
               ^id <obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*concept*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <sub-info>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name> 
               ^arg-type concept
               ^source.handle <concept-handle>)
-->
   (<sub-info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type concept
               ^handle <concept-handle>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <sub-info>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type predicate
               ^source.handle <pred-handle>
               ^info2.object-id <obj2>)
-->
   (<sub-info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <obj2>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*state*predicate
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <sub-info>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type until-clause
               ^source.predicate <pred>)
   (<pred> ^type state
           ^handle <pred-handle>
           ^property-handle <prop-handle>
           ^info1.object-id <obj1>)
-->
   (<sub-info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type until-clause
               ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <obj1>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*relation*predicate
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <sub-info>)
   (<o> ^name copy-subaction-info
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type until-clause
               ^source.predicate <pred>)
   (<pred> ^type relation
           ^handle <pred-handle>
           ^info1.object-id <obj1>
           ^info2.object-id <obj2>)
-->
   (<sub-info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type until-clause
               ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred-handle>
               ^1 <obj1>
               ^2 <obj2>)
}


sp {retrospective-learning*apply*copy-subaction-info*cleanup
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-episode <ep>
              ^subaction-info <info>)
   (<o> ^name copy-subaction-info
        ^subaction-episode <ep>)
   (<info> ^action-handle <handle>)
-->
   (<s> ^subaction-episode <ep> -
        ^subaction-info <info> -)
}

