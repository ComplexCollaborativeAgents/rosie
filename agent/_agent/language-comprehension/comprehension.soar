#sp {mNL-Soar*propose*comprehension
#   (state <s> ^name rosie
#              ^io.input-link.language.sentence <sentence>)
#   (<sentence> -^processed-sentence true)
#-->
#   (<s> ^operator <op> + =)
#   (<op> ^name comprehension
#         ^sentence <sentence>)
#}
#sp {mNL-Soar*propose*comprehension*internal
#   (state <s> ^world-usage internal
#              ^current-sentence-number <csn>
#             -^terminated-sentence <cs>)
#-->
#   (<s> ^operator <op> + =, <) # allow I/O
#   (<op> ^name comprehension)
#}

#process new sentence from script or input link by creating a new segment that will get pushed onto stack
sp {rosie*propose*process-new-sentence*scripted
   (state <s> ^world-usage internal
              ^current-sentence <sentence>
              ^current-sentence-number <csn>
             -^terminated-sentence <cs>)
   (<sentence> -^segment-proposed true)
-->
   (<s> ^operator <op> + >) # allow I/O
   (<op> ^name process-new-sentence
         ^sentence <sentence>)
}
sp {rosie*propose*process-new-sentence*input-link
   (state <s> ^name rosie
              ^io.input-link.language.sentence <sentence>)
   (<sentence> -^segment-proposed true)
-->
   (<s> ^operator <op> + >)
   (<op> ^name process-new-sentence
         ^original-sentence <sentence>)
}

sp {rosie*apply*process-new-sentence*copy*new-segment-info*from-script
   (state <s> ^name rosie
              ^operator <op>
              ^top-state.interaction.changes <c>)
   (<op> ^name process-new-sentence
         ^sentence <sentence>)
   (<sentence> ^original-sentence <os>)
   #(<os> ^complete-sentence <cs1>)
-->
   #(write (crlf) <cs1>)	
   (<sentence> ^segment-proposed true)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type process-sentence 
        ^parameters.sentence (deep-copy <os>)
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-sentence
          ^originator agent)
}

sp {rosie*apply*process-new-sentence*copy*new-segment-info*from-input-link
   (state <s> ^name rosie
              ^operator <op>
              ^top-state.interaction.changes <c>)
   (<op> ^name process-new-sentence
         ^original-sentence <os>)
-->
 #  (write (crlf) (cmd print <os>))
   (<os> ^segment-proposed true)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type process-sentence 
        ^parameters.sentence (deep-copy <os>)
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-sentence
          ^originator agent)
}

#satisfaction of stack calls comprehension
sp {dialog-event*propose*comprehension
   (state <s> ^name dialog-event
              ^purpose <p>)
   (<p> ^type process-sentence ^parameters.sentence <sentence>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name comprehension
        ^sentence <sentence>)
}

## For alternative structures that could be retried, keep the most recent.
sp {apply*comprehension*save-most-recent-alternative-structure
   (state <s> ^operator.name comprehension
              ^segment <seg>)
   (<seg> ^not-merged-receiver <nmr>)
   (<nmr> ^lt.alternative-structure)
-->
   (<seg> ^alternative-structure-receiver <nmr>)}

#clean dialog-world
sp {apply*performed-event*clean*dialog-world
    (state <s1> ^name interaction
                ^operator <o>
                ^top-state.dialog-world.<< objects predicates >> <dw>)
    (<o> ^name performed-event
         -^event.dialog-event.type process-unknown-word
        -^event.dialog-event.type process-sentence)
   (<dw> ^<something> <obj>)
-->
   (<dw> ^<something> <obj> -)
}

sp {apply*comprehension*save-most-recent-alternative-meaning
   (state <s> ^operator.name comprehension
              ^segment <seg>)
   (<seg> ^merged-receiver <nmr>)
   (<nmr> ^lt.alternative-meaning)
-->
   (<seg> ^alternative-meaning-receiver <nmr>)}
   
   
