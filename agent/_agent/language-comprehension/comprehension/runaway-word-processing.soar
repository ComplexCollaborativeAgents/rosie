sp {comprehension*propose*runaway-word-processing
   (state <s> ^name comprehension
              ^top-state.world-usage external #JK no input-link time on internal
             -^top-state.io.input-link.time.steps <= <thres>
              ^segment.decision-count-threshold <thres>)
-->
   (<s> ^operator <op> !)
   (<op> ^name runaway-word-processing)
} 

sp {apply*runaway-word-processing*internal
   (state <s> ^operator.name runaway-word-processing
              ^top-state <ts> 
              ^segment <seg>)
   (<seg> ^original-sentence <cs>
          ^decision-count-threshold <thres>) 
   (<ts> ^world-usage internal
         ^current-sentence-number <csn>
         ^failure-count <fc>)
-->
 #  (interrupt)
   (<seg> ^decision-count-threshold <thres> -)
   #(write (crlf) |Runaway processing: | <thres>)
   (<seg> ^processed-terminator true)
   (<cs> ^processed-sentence true
         ^processing-result failure)
   (<ts> ^terminated-sentence <csn>
         ^failure-count <fc> - (+ <fc> 1))
}

sp {apply*runaway-word-processing*external
   (state <s> ^operator.name runaway-word-processing
              ^top-state <ts> 
              ^segment <seg>)
   (<seg> ^original-sentence <cs>
          ^decision-count-threshold <thres>) 
   (<ts> ^world-usage external)
-->
#   (interrupt)
   (<seg> ^decision-count-threshold <thres> -)
   #(write (crlf) |Runaway processing: | <thres>)
   (<seg> ^processed-terminator true)
   (<cs> ^processed-sentence true
         ^processing-result failure)
}

