sp {construct-task-argument*propose*create-task-argument
   (state <s> ^name construct-task-argument
              ^argument-info <arg-info>
             -^task-argument <task-arg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
}

# arg-type = concept
sp {construct-task-argument*apply*create-task-argument*concept
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type concept
               ^handle <concept-handle>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type concept
          ^handle <concept-handle>)
}

# arg-type = object
sp {construct-task-argument*apply*create-task-argument*object
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type object
               ^create-obj.object-rep <obj-rep>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type object
          ^id <obj-rep>)
}

# arg-type = predicate
sp {construct-task-argument*apply*create-task-argument*predicate
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type predicate
               ^handle <pred-handle>
               ^create-obj2.object-rep <obj2>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <obj2>)
}

# arg-type = until-clause

# state predicate
sp {construct-task-argument*apply*create-task-argument*until-clause*state*pred
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^predicate <pred>)
   (<pred> ^type state
           ^handle { <handle> <> visible1 }
           ^create-obj1.object-rep <obj1>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type until-clause
          ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <handle>
               ^1 <obj1>)
}

# state predicate - special case for visible
sp {construct-task-argument*apply*create-task-argument*until-clause*state*pred*visible
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^create-obj1.object-rep <obj1>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type until-clause
          ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle visible1
               ^1 <obj1>)
}

# after-clause, duration 
sp {construct-task-argument*apply*create-task-argument*after-clause*duration
   (state <s> ^name construct-task-argument
              ^operator <o>)
   (<o> ^name create-task-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type after-clause
               ^predicate <pred>)
   (<pred> ^type duration
           ^number <num>
           ^unit <unit>)
-->
   (<s> ^task-argument <arg>)
   (<arg> ^arg-type after-clause
          ^predicate <new-pred>)
   (<new-pred> ^type duration
               ^number <num>
               ^unit <unit>)
}
