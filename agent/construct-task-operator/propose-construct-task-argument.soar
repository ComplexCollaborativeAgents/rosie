##### concept arguments
sp {construct-task-operator*propose*construct-task-argument*concept
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name> <arg>)
   (<arg> ^item-type concept
          ^handle <handle>)
   (<task-op> -^<arg-name> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg>
        ^arg-name <arg-name>
        ^arg-type concept
        ^handle <handle>)
}

##### object arguments
sp {construct-task-operator*propose*construct-task-argument*object
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name> <obj>)
   (<obj> ^item-type object
          -^linked-to <other>)
   (<task-op> -^<arg-name> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <obj>
        ^arg-name <arg-name>
        ^arg-type object
        ^object <obj>)
}

sp {construct-task-operator*propose*construct-task-argument*object*linked-to
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name> <obj>)
   (<obj> ^item-type object
          ^linked-to <other>)
   (<task-op> -^<arg-name> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <obj>
        ^arg-name <arg-name>
        ^arg-type object
        ^object <other>)
}

# turn message argument from say/ask into an object
sp {construct-task-operator*propose*construct-task-argument*object*message
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^action.handle << say1 ask1 >>
          ^<arg-name> <arg>)
   (<arg> ^sentence <sentence>)
   (<task-op> -^<arg-name> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg>
        ^arg-name <arg-name>
        ^arg-type object
        ^object <new-obj>)
   (<new-obj> ^handle (make-constant-symbol |obj-hand|)
              ^predicates <obj-preds>)
   (<obj-preds> ^category message
                ^sentence <sentence>)
}

##### predicate arguments
## argument-info for predicate arg
sp {construct-task-operator*propose*construct-task-argument*predicate*arg
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^{ <arg-name> <> predicate <> relation } <arg>)
   (<arg> ^item-type predicate
         -^until-clause
         -^after-clause
         ^handle { <handle> <> for1 }
          ^2 <obj2>)
   (<task-op> -^<arg-name> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg>
        ^arg-name <arg-name>
        ^arg-type predicate
        ^handle <handle>
        ^2 <obj2>)
}

sp {construct-task-operator*propose*construct-task-argument*predicate*rel*arg2
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^{ << predicate relation >> } <arg>)
   (<arg> ^item-type predicate
         -^until-clause
         -^after-clause
          ^handle <handle>
          ^2 <obj2>)
   (<task-op> -^arg2 <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg>
        ^arg-name arg2
        ^arg-type predicate
        ^handle <handle>
        ^2 <obj2>)
}

sp {construct-task-operator*propose*construct-task-argument*predicate*arg2*relations
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^arg2.{2}.relations <arg1>)
   (<arg1> ^handle <handle>
           ^2 <obj1>)
   (<task-op> -^arg1 <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg1>
        ^arg-name arg1
        ^arg-type predicate
        ^handle <handle>
        ^2 <obj1>)
}

##### until-clause/after-clause arguments

sp {construct-task-operator*propose*construct-task-argument*clause*is1*state*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle is1
             ^arg1 <obj>
             ^predicate.handle <pred-h>)
   (<task-op> -^<clause-type> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <clause>
        ^arg-name <clause-type>
        ^arg-type <clause-type>
        ^predicate <pred>)
   (<pred> ^type state
           ^handle <pred-h>
           ^1 <obj>)
}

sp {construct-task-operator*propose*construct-task-argument*clause*visible
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<task-op> -^<clause-type> <task-arg>)
   (<obj> -^unit << seconds minutes hours >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <clause>
        ^arg-name <clause-type>
        ^arg-type <clause-type>
        ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^1 <obj>)
}

sp {construct-task-operator*propose*construct-task-argument*until-clause*duration*predicate*for
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name> <arg>)
   (<arg> ^item-type predicate
           ^handle for1
           ^2 <time>)
   (<time> ^number <num>
           ^unit <unit>)
   (<task-op> -^until-clause <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <arg>
        ^arg-name until-clause
        ^arg-type until-clause
        ^predicate <pred>)
   (<pred> ^type duration
           ^number <num>
           ^unit <unit>)
}

sp {construct-task-operator*propose*construct-task-argument*clause*duration*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<obj> ^number <num> 
          ^unit { <unit> << minutes seconds >> })
   (<task-op> -^<clause-type> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <clause>
        ^arg-name <clause-type>
        ^arg-type <clause-type>
        ^predicate <pred>)
   (<pred> ^type duration
           ^number <num>
           ^unit <unit>)
}

sp {construct-task-operator*propose*construct-task-argument*clause*clocktime*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>
              ^task-operator <task-op>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<obj> ^number <num> 
          ^unit hours)
   (<task-op> -^<clause-type> <task-arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^message-arg <clause>
        ^arg-name <clause-type>
        ^arg-type <clause-type>
        ^predicate <pred>)
   (<pred> ^type clocktime
           ^hour (int (/ <num> 100) )
           ^minute (mod <num> 100))
}
