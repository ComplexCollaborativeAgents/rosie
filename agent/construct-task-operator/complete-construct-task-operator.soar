# When the construct-task-operator substate is finished (no other operators)
#    push the task onto the task-stack
                                                        
sp {construct-task-operator*propose*complete-construct-task-operator
   (state <s> ^name construct-task-operator
              ^task-operator <op>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-construct-task-operator)
}

sp {construct-task-operator*apply*complete-construct-task-operator
   (state <s> ^name construct-task-operator
              ^operator.name complete-construct-task-operator
              ^command-message <msg>
              ^task-operator <op>
              ^top-state.task-stack <stack>)
   (<msg> -^task-source)
-->
   (<stack> ^new-task-segment <task>)
   (<task> ^task-operator <op>)
   (<msg> ^pushed true)
}

sp {construct-task-operator*apply*complete-construct-task-operator*task-subtask
   (state <s> ^name construct-task-operator
              ^operator.name complete-construct-task-operator
              ^command-message <msg>
              ^task-operator <op>
              ^top-state.task-stack <stack>)
   (<msg> ^task-source <src>)
-->
   (<stack> ^new-task-segment <task>)
   (<task> ^task-source <src>
           ^task-operator <op>)
   (<msg> ^pushed true)
}

sp {construct-task-operator*apply*complete-construct-task-operator*add*task-operator*to*segment
   (state <s> ^name construct-task-operator
              ^operator.name complete-construct-task-operator
              ^task-operator <op>
              ^top-state.interaction.stack.segment.purpose.parameters <params>)
-->
  (<params> ^task-operator <op>)
}
