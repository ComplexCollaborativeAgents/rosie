##### Creates the proper representation of each argument on to the action-operator

# propose if the argument isn't on the action-operator yet
sp {generate-action-operator*propose*create-operator-argument
   (state <s> ^name generate-action-operator
              ^action-operator <op>
              ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
              -^created <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
}

###################
# arg-type object

sp {generate-action-operator*apply*create-operator-argument*copy*object*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type object
               ^arg-status <status>
               ^id <obj>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type object
          ^arg-status <status>
          ^id <obj>)
   (<arg-info> ^created <arg>)
}


######################
## arg-type concept

sp {generate-action-operator*apply*create-operator-argument*copy*concept*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type concept
               ^arg-status <status>
               ^handle <concept-handle>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^arg-status <status>
          ^handle <concept-handle>)
   (<arg-info> ^created <arg>)
}



#######################
### arg-type predicate

sp {generate-action-operator*apply*create-operator-argument*predicate
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type predicate
               ^arg-status <status>
               ^handle <pred-handle>
               ^2 <obj2>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^arg-status <status>
          ^handle <pred-handle>
          ^2 <obj2>)
   (<arg-info> ^created <arg>)
}

###########################
## arg-type until-clause

sp {generate-action-operator*apply*create-operator-argument*arg-type*until-clause*state*predicate
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^predicate <pred>)
   (<pred> ^type state
           ^handle { <handle> <> visible1 }
           ^1 <obj1>)
-->
   (<op> ^until-clause <new-clause>)
   (<new-clause> ^arg-type until-clause
                 ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <handle>
               ^1 <obj1>)
   (<arg-info> ^created <new-clause>)
}
          

sp {generate-action-operator*apply*create-operator-argument*arg-type*until-clause*state*predicate*visible
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^1 <obj1>)
-->
   (<op> ^until-clause <new-clause>)
   (<new-clause> ^arg-type until-clause
                 ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle visible1
               ^1 <obj1>)
  (<arg-info> ^created <new-clause>)
}
          

