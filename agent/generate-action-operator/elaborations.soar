sp {generate-action-operator*elaborate*world*from*superstate
  (state <s> ^name generate-action-operator
             ^superstate.world <world>)
-->
  (<s> ^world <world>)
}

# command-message: the parsed command representation from language comprehension
sp {generate-action-operator*elaborate*message*from*superoperator
   (state <s> ^name generate-action-operator
              ^superstate.operator.command-message <msg>)
-->
   (<s> ^command-message <msg>)
}

### action-id - the lti for the action

# look up the action in smem
sp {generate-action-operator*elaborate*smem-query*action
   (state <s> ^name generate-action-operator
              ^command-message.action.handle <action-handle>)
-->
   (<s> ^smem-query <q>)
   (<q> ^cue.handle <action-handle>
        ^depth 8)
}

# copy the result as action-id
sp {generate-action-operator*elaborate*smem-query*result*action-id
   (state <s> ^name generate-action-operator
              ^command-message.action.handle <action-handle>
              ^smem-query <q>)
   (<q> ^cue.handle <action-handle>
        ^result <action-lti>)
-->
   (<s> ^action-id <action-lti>)
}

### predicate-lti 

# retrieve smem information for any concepts/predicates/properties
sp {generate-action-operator*elaborate*smem-query*predicate
   (state <s> ^name generate-action-operator
              ^command-message.<any> <arg>)
   (<arg> ^item-type << concept predicate property >>
          ^handle <pred-handle>)
-->
   (<s> ^smem-query <q>)
   (<q> ^cue.handle <pred-handle>
        ^depth 4)
}

# elaborate result of predicate retrievals as ^predicate-lti
sp {generate-action-operator*elaborate*smem-query*result*predicate-lti
   (state <s> ^name generate-action-operator
              ^command-message.<any> <arg>
              ^smem-query <q>)
   (<arg> ^item-type << concept predicate property >>
          ^handle <pred-handle>)
   (<q> ^cue.handle <pred-handle>
        ^result <pred-lti>)
-->
   (<s> ^predicate-lti <pred-lti>)
}

###### argument-info ######

# argument-info
#   original-name <arg-name>
#   value <arg>
#   procedural <parg>  # from action-id.procedural.<arg-name> <parg>

# for each argument - elaborate an argument-info structure
# ^argument-info <arg-info>
#   ^original-name <arg-name> # from command-message.<arg-name> <arg>
#   ^value <arg>              # from command-message.<arg-name> <arg>
#   ^procedural <parg>        # from action-id.procedrual.<arg-name> <parg>
#   ^arg-name <name>          # the name to use for the argument on the operator

## argument-info for messages (say or ask commands)
sp {generate-action-operator*elaborate*argument-info*message
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
   (<msg> ^action.handle << say1 ask1 >>
          ^arg1.sentence <sentence>)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name arg1
              ^arg-type object
              ^id <new-obj>)
   (<new-obj> ^handle (make-constant-symbol |obj-hand|)
   	          ^predicates <obj-preds>)
   (<obj-preds> ^category message
                ^sentence <sentence>)
}

## argument-info for objects 
sp {generate-action-operator*elaborate*argument-info*object
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
  (<msg> ^<arg-name> <arg>)
  (<arg> ^item-type object
         -^linked-to)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^arg-type object
              ^obj-source.id <arg>)
}

# linked objects
sp {generate-action-operator*elaborate*argument-info*object*linked
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
  (<msg> ^<arg-name> <arg>)
  (<arg> ^item-type object
         ^linked-to <other>)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^arg-type object
              ^obj-source.id <other>)
}

## argument-info for concepts
sp {generate-action-operator*elaborate*argument-info*concept
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
  (<msg> ^<arg-name> <arg>)
  (<arg> ^item-type concept
         ^handle <handle>)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^arg-type concept
              ^handle <handle>)
}

## argument-info for predicate arg
sp {generate-action-operator*elaborate*argument-info*predicate*arg
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
  (<msg> ^{ <arg-name> << arg1 arg2 arg3 arg4 arg5 >> } <arg>)
  (<arg> ^item-type predicate
        -^until-clause
         ^handle <handle>
         ^2 <obj2>)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^arg-type predicate
              ^handle <handle>
              ^obj-source.2 <obj2>)
}

sp {generate-action-operator*elaborate*argument-info*predicate*pred*rel*arg2
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
  (<msg> ^{ << predicate relation >> } <arg>)
  (<arg> ^item-type predicate
        -^until-clause
         ^handle <handle>
         ^2 <obj2>)
-->
  (<s> ^argument-info <arg-info>)
  (<arg-info> ^arg-name arg2
              ^arg-type predicate
              ^handle <handle>
              ^obj-source.2 <obj2>)
}

sp {generate-action-operator*elaborate*argument-info*predicate*arg2*relation*arg1
   (state <s> ^name generate-action-operator
              ^command-message <msg>)
   (<msg> ^arg2.{2}.relations <arg1>)
   (<arg1> ^handle <handle>
           ^2 <obj1>)
-->
   (<s> ^argument-info <arg-info>)
   (<arg-info> ^arg-name arg1
               ^arg-type predicate
               ^handle <handle>
               ^obj-source.2 <obj1>)
}

## argument-info for until-clause

sp {generate-action-operator*elaborate*argument-info*until-clause*predicate*visible
   (state <s> ^name generate-action-operator
              ^command-message.<arg-name>.until-clause <until>)
   (<until> ^action.handle sense1
            ^agent.handle rosie
            ^arg1 <obj>)
-->
   (<s> ^argument-info <arg-info>)
   (<arg-info> ^arg-name until-clause
               ^arg-type until-clause
               ^predicate <pred>)
   (<pred> ^type state
           ^handle visible1
           ^obj-source.1 <obj>)
}

### procedural <parg> - from procedural.<arg-name>
sp {generate-action-operator*elaborate*argument-info*procedural
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>
              ^action-id.procedural.<arg-name> <parg>)
   (<arg-info> ^arg-name <arg-name>)
-->
   (<arg-info> ^procedural <parg>)
}

### object elaboration
sp {generate-action-operator*elaborate*object*from*world*matches*source*handle
  (state <s> ^name generate-action-operator
             ^argument-info <arg-info>
             ^world.objects.object <wobj>)
  (<arg-info> ^obj-source.<name>.handle <handle>)
  (<wobj> ^handle <handle>)
-->
  (<arg-info> ^<name> <wobj>)
}

sp {generate-action-operator*elaborate*object*from*world*matches*source*handle*until-clause
  (state <s> ^name generate-action-operator
             ^argument-info <arg-info>
             ^world.objects.object <wobj>)
  (<arg-info> ^arg-type until-clause
              ^predicate <pred>)
  (<pred> ^obj-source.<name>.handle <handle>)
  (<wobj> ^handle <handle>)
-->
  (<pred> ^<name> <wobj>)
}

sp {generate-action-operator*elaborate*object*from*world*matches*source*handle*abstract
  (state <s> ^name generate-action-operator
             ^argument-info <arg-info>
             -^world.objects.object.handle <handle>)
  (<arg-info> ^arg-status abstract 
              ^obj-source.<name> <src>)
  (<src> ^handle <handle>
         -^object-instance)
-->
  (<arg-info> ^<name> <src>)
}


### arg-status
# Information about the status of the argument

# in general - copy from procedural
sp {generate-action-operator*elaborate*argument-info*object*arg-status*from*procedural
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>)
   (<arg-info> ^arg-type <any>
               ^procedural.arg-status <status>)
-->
   (<arg-info> ^arg-status <status>)
}

# object arg-status: default = real
sp {generate-action-operator*elaborate*argument-info*object*arg-status*default*real
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>)
   (<arg-info> ^arg-type object
              -^procedural.arg-status)
-->
   (<arg-info> ^arg-status real)
}

# concept arg-status: default = abstract
sp {generate-action-operator*elaborate*argument-info*concept*arg-status*default*real
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>)
   (<arg-info> ^arg-type concept
              -^procedural.arg-status)
-->
   (<arg-info> ^arg-status abstract)
}

# predicate arg-status: value depends on the type of predicate
sp {generate-action-operator*elaborate*argument-info*predicate*arg-status*existing
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>
              ^predicate-lti <pred-info>)
   (<arg-info> ^arg-type predicate
               ^handle <pred-handle>
              -^procedural.arg-status)
   (<pred-info> ^handle <pred-handle>
                ^relation-type existing)
-->
   (<arg-info> ^arg-status existing)
}

sp {generate-action-operator*elaborate*argument-info*predicate*arg-status*desired
   (state <s> ^name generate-action-operator
              ^argument-info <arg-info>
              ^predicate-lti <pred-info>)
   (<arg-info> ^arg-type predicate
               ^handle <pred-handle>
              -^procedural.arg-status)
   (<pred-info> ^handle <pred-handle>
                ^relation-type desired)
-->
   (<arg-info> ^arg-status desired)
}

