
The generate-action-operator substate is responsible for taking a command message
	produced during language comprehension and using it to
	construct an action-operator representation to be used to perform the task
	It also updates the smem representation for that action

##### Superoperator Rep #####

^command-message <msg> - the message produced during language comprehension


##### Substate Results ######

Will create an action-operator and push it onto the action stack
	Will also update the smem representation of the action



###### State Representation #####

^command-message <msg> - the message representation that was produced by language-comprehension
^action-id <lti>       - the root lti for the desired action
^predicate-lti <lti>   - the lti's for any retrieved concepts/predicates/properties
^to-store <lti>        - all lti's that have changed and need to be stored in smem

^argument-info         - structure elaborated for each argument on the command-message
	^original-name     - the name of the argument on the command message
	^value <arg>       - the root identifier for the argument on the command message
	^procedural <parg> - the smem structure for the argment on action-id.procedural
	^arg-name          - the name to use when creating the argument on the action-operator
	^arg-type          - type of the argument, either object, concept, predicate, or until-clause
	^arg-status        - status info about the argument 
	^object-id         - the world object for an object argument
	^object-id2        - the world object for the 2nd parameter of a predicate argument

# Flags:
^argument-info.created-procedural-argument true - exists if any procedural arguments were created (from create-procedural-argument)
^new-action true                                - exists if this is the first time we have seen the action (from create-semantic-structure)


###### action-operator representation #####

^action-operator
	^action-handle <handle>
	^name <op-name>  # name of the operator
	
	^<arg-name> # object argument
		^arg-type object
		^arg-status << real abstract >> # whether the object should be part of the world
		^id <obj>  # reference to world.objects.object <obj>
		
	^<arg-name> # concept argument
		^arg-type concept
		^arg-status abstract
		^handle <handle>   # handle of the concept
		
	^<arg-name> # predicate argument
		^arg-type predicate
		^arg-status << existing desired >>  # whether the predicate should already exist or wants to be achieved
		^handle <handle>  # handle of the predicate
		^2 <obj2>         # reference to world.objects.object
		
	^until-clause 
		^predicate    # state predicate (1 object)
			^type state
			^handle <pred-handle>
			^property-name <prop-handle>
			^1 <obj>
		^predicate    # relation predicate (2 objects)
			^type relation
			^handle <pred-handle>
			^1 <obj1>
			^2 <obj2>
			
###### Operators + Order #####

smem-query
smem-retrieve
add-argument-to-world
create-semantic-structure
create-procedural-argument
create-action-operator
create-operator-argument
mark-argument-optional
store-concepts
complete-generate-action-operator

###### Operator Info ######

# smem-retrieve
    In this substate, we retrieve the action-id up to a depth of 8

# smem-query
    Look up structures by handle for predicates, concepts, and properties
    for each, copy a ^predicate-lti <lti> wme onto the state

# create-semantic-structure
	If this is the first time we encounter an action, the action-id will be empty
	This operator initializes it with the basic smem structure, including procedural info
	
# add-argument-to-world
	If the object is imagined or an smem object which is not on the top-state world, 
		and has an arg-type=real, add it to the world

# create-action-operator
    creates the basic action-operator representation on the state
    With the handle, operator name, and action-type

# create-operator-argument
    for each argument-info, creates the appropriate structure on the action-operator (^action-operator.<arg-name> <op-arg>)
    and creates ^argument-info.created <op-arg> to mark its finished

# create-procedural-argument
    If there is an argument-info for an argument not on action-id.procedural, then create it
      Also creates a flag ^created-procedural-argument true on the argument-info
      and creates a ^to-store <id> wme so the information is stored in smem
      
# mark-argument-optional
    Marks a procedural argument as optional, then marks it to be stored
    Case 1: not a new action, but created-procedural-argument is true
    Case 2: the procedural argument wasn't included on the command

# store-concepts
    If any new information is created on the action-id, store it in smem
    Checks for any ^to-store <id> flags and stores them
    Creates a ^stored-concepts true flag when done

# complete-generate-action-operator
    When the generate-action-operator substate is finished (no other operators)
      push the action onto the action-stack
