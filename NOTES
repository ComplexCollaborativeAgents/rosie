Aaron - Notes about things to still do/fix in Rosie

TODO: 

- magicbot doesn't check object stability

- look into: Should we match new perception objects against all non-visible objects or take into account their belief object places

- Fix which predicates are extracted, maybe sync with James? 
  Including making sure predicates are good in the magicbot domain

- Make sure tabletop arm and object tracking is ok, and how we hande perception of moving objects and don't delete

- when moving objects, keeping the belief bounds in check
# Send the command to svs
#sp {anystate*apply*change-world-state*update-object-pose*svs*copy_node*grabbed
#   (state <s> ^operator <o>
#              ^top-state.svs.command <cmd>)
#   (<o> ^name change-world-state
#        ^update-object-pose <obj-info>)
#   (<obj-info> ^belief-obj.id <bel-id>
#               ^world-obj.predicates.is-grabbed1 grabbed1)
#-->
#   (<cmd> ^copy_transform <copy>)
#   (<copy> ^source robot
#           ^destination <bel-id>
#           ^position yes
#           ^rotation no
#           ^scale no)
#   (<obj-info> ^copy-command <copy>)
#}

- Figure out how to restrict pick-up to current location
- Put Down with things other than on or in

- Handling explore failure in a find task (or failures in general)

- Generalizing/Instantiating Objects and which predicates to use

- Reduce the volume of information printed for reference-info category LTI's 

- Fix conflicting if-then construction in constructions-is.soar (between James and Aaron)

- When we say 'scan until you see an apple', should we only ground the reference 'an apple' until one is visible?

- Handle adding implicit objects from the TCN to the world



To Refactor:
- output-link status values
- outgoing messages and types
- rosie/saved-agents - Remove and add to gitignore?
- rosie/scripts - Keep what you need and remove the rest


#### TODO - Remove things from the world that the agent remembered/added

## Remove anything remembered during the action
#sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*remembered*things
#   (state <s> ^name pop-task-segment
#              ^operator.name complete-pop-task-segment
#              ^segment-to-pop.remembered <rem>)
#   (<rem> ^object.predicates <preds>
#          ^attribute <att>
#          ^value <val>)
#   (<preds> ^<att> <val>)
#-->
#   (<preds> ^<att> <val> -)
#}
#
## Remove any objects added to the world during the action
#sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*added*objects
#   (state <s> ^name pop-task-segment
#              ^operator.name complete-pop-task-segment
#              ^segment-to-pop.added <obj>
#              ^superstate.world.objects <objs>)
#   (<objs> ^object <obj>)
#-->
#   (<objs> ^object <obj> -)
#}
#
## Remove any predicates related to that added object
#sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*added*predicates
#   (state <s> ^name pop-task-segment
#              ^operator.name complete-pop-task-segment
#              ^segment-to-pop.added <obj>
#              ^superstate.world.predicates.predicate <pred>)
#   (<pred> ^instance <i>)
#   (<i> ^<any> <obj>)
#-->
#   (<pred> ^instance <i> -)
#}
